{
	"id": "5265ff07083b570f83797624270e0041",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/TimeVillage/USDT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\";\n\ncontract MyToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20FlashMint {\n    constructor(address initialOwner)\n        ERC20(\"USD\", \"USDT\")\n        Ownable(initialOwner)\n        ERC20Permit(\"USDT\")\n    {}\n\n    function mint() public {\n        _mint(msg.sender, 1000 *1e18);\n    }\n}"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20FlashMint.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"../../../interfaces/IERC3156FlashBorrower.sol\";\nimport {IERC3156FlashLender} from \"../../../interfaces/IERC3156FlashLender.sol\";\nimport {ERC20} from \"../ERC20.sol\";\n\n/**\n * @dev Implementation of the ERC3156 Flash loans extension, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n *\n * Adds the {flashLoan} method, which provides flash loan support at the token\n * level. By default there is no fee, but this can be changed by overriding {flashFee}.\n *\n * NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\n * {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\n * overriding {maxFlashLoan} so that it correctly reflects the supply cap.\n */\nabstract contract ERC20FlashMint is ERC20, IERC3156FlashLender {\n    bytes32 private constant RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\n\n    /**\n     * @dev The loan token is not valid.\n     */\n    error ERC3156UnsupportedToken(address token);\n\n    /**\n     * @dev The requested loan exceeds the max loan value for `token`.\n     */\n    error ERC3156ExceededMaxLoan(uint256 maxLoan);\n\n    /**\n     * @dev The receiver of a flashloan is not a valid {onFlashLoan} implementer.\n     */\n    error ERC3156InvalidReceiver(address receiver);\n\n    /**\n     * @dev Returns the maximum amount of tokens available for loan.\n     * @param token The address of the token that is requested.\n     * @return The amount of token that can be loaned.\n     *\n     * NOTE: This function does not consider any form of supply cap, so in case\n     * it's used in a token with a cap like {ERC20Capped}, make sure to override this\n     * function to integrate the cap instead of `type(uint256).max`.\n     */\n    function maxFlashLoan(address token) public view virtual returns (uint256) {\n        return token == address(this) ? type(uint256).max - totalSupply() : 0;\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. This function calls\n     * the {_flashFee} function which returns the fee applied when doing flash\n     * loans.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function flashFee(address token, uint256 value) public view virtual returns (uint256) {\n        if (token != address(this)) {\n            revert ERC3156UnsupportedToken(token);\n        }\n        return _flashFee(token, value);\n    }\n\n    /**\n     * @dev Returns the fee applied when doing flash loans. By default this\n     * implementation has 0 fees. This function can be overloaded to make\n     * the flash loan mechanism deflationary.\n     * @param token The token to be flash loaned.\n     * @param value The amount of tokens to be loaned.\n     * @return The fees applied to the corresponding flash loan.\n     */\n    function _flashFee(address token, uint256 value) internal view virtual returns (uint256) {\n        // silence warning about unused variable without the addition of bytecode.\n        token;\n        value;\n        return 0;\n    }\n\n    /**\n     * @dev Returns the receiver address of the flash fee. By default this\n     * implementation returns the address(0) which means the fee amount will be burnt.\n     * This function can be overloaded to change the fee receiver.\n     * @return The address for which the flash fee will be sent to.\n     */\n    function _flashFeeReceiver() internal view virtual returns (address) {\n        return address(0);\n    }\n\n    /**\n     * @dev Performs a flash loan. New tokens are minted and sent to the\n     * `receiver`, who is required to implement the {IERC3156FlashBorrower}\n     * interface. By the end of the flash loan, the receiver is expected to own\n     * value + fee tokens and have them approved back to the token contract itself so\n     * they can be burned.\n     * @param receiver The receiver of the flash loan. Should implement the\n     * {IERC3156FlashBorrower-onFlashLoan} interface.\n     * @param token The token to be flash loaned. Only `address(this)` is\n     * supported.\n     * @param value The amount of tokens to be loaned.\n     * @param data An arbitrary datafield that is passed to the receiver.\n     * @return `true` if the flash loan was successful.\n     */\n    // This function can reenter, but it doesn't pose a risk because it always preserves the property that the amount\n    // minted at the beginning is always recovered and burned at the end, or else the entire function will revert.\n    // slither-disable-next-line reentrancy-no-eth\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 value,\n        bytes calldata data\n    ) public virtual returns (bool) {\n        uint256 maxLoan = maxFlashLoan(token);\n        if (value > maxLoan) {\n            revert ERC3156ExceededMaxLoan(maxLoan);\n        }\n        uint256 fee = flashFee(token, value);\n        _mint(address(receiver), value);\n        if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {\n            revert ERC3156InvalidReceiver(address(receiver));\n        }\n        address flashFeeReceiver = _flashFeeReceiver();\n        _spendAllowance(address(receiver), address(this), value + fee);\n        if (fee == 0 || flashFeeReceiver == address(0)) {\n            _burn(address(receiver), value + fee);\n        } else {\n            _burn(address(receiver), value);\n            _transfer(address(receiver), flashFeeReceiver, fee);\n        }\n        return true;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashLender.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "london"
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"IERC3156FlashBorrower": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initiator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onFlashLoan",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC3156 FlashBorrower, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].",
						"kind": "dev",
						"methods": {
							"onFlashLoan(address,address,uint256,uint256,bytes)": {
								"details": "Receive a flash loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"data": "Arbitrary data structure, intended to contain user-defined parameters.",
									"fee": "The additional amount of tokens to repay.",
									"initiator": "The initiator of the loan.",
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\""
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onFlashLoan(address,address,uint256,uint256,bytes)": "23e30c8b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC3156 FlashBorrower, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\",\"kind\":\"dev\",\"methods\":{\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"Receive a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"fee\":\"The additional amount of tokens to repay.\",\"initiator\":\"The initiator of the loan.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":\"IERC3156FlashBorrower\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"IERC3156FlashLender": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "flashFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC3156FlashBorrower",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "maxFlashLoan",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC3156 FlashLender, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].",
						"kind": "dev",
						"methods": {
							"flashFee(address,uint256)": {
								"details": "The fee to be charged for a given loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The amount of `token` to be charged for the loan, on top of the returned principal."
								}
							},
							"flashLoan(address,address,uint256,bytes)": {
								"details": "Initiate a flash loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"data": "Arbitrary data structure, intended to contain user-defined parameters.",
									"receiver": "The receiver of the tokens in the loan, and the receiver of the callback.",
									"token": "The loan currency."
								}
							},
							"maxFlashLoan(address)": {
								"details": "The amount of currency available to be lended.",
								"params": {
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The amount of `token` that can be borrowed."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"flashFee(address,uint256)": "d9d98ce4",
							"flashLoan(address,address,uint256,bytes)": "5cffe9de",
							"maxFlashLoan(address)": "613255ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC3156 FlashLender, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\",\"kind\":\"dev\",\"methods\":{\"flashFee(address,uint256)\":{\"details\":\"The fee to be charged for a given loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` to be charged for the loan, on top of the returned principal.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Initiate a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"receiver\":\"The receiver of the tokens in the loan, and the receiver of the callback.\",\"token\":\"The loan currency.\"}},\"maxFlashLoan(address)\":{\"details\":\"The amount of currency available to be lended.\",\"params\":{\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` that can be borrowed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":\"IERC3156FlashLender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 399,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 399,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol": {
				"ERC20FlashMint": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxLoan",
									"type": "uint256"
								}
							],
							"name": "ERC3156ExceededMaxLoan",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC3156InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "ERC3156UnsupportedToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "flashFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC3156FlashBorrower",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "maxFlashLoan",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC3156 Flash loans extension, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]. Adds the {flashLoan} method, which provides flash loan support at the token level. By default there is no fee, but this can be changed by overriding {flashFee}. NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions, {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend overriding {maxFlashLoan} so that it correctly reflects the supply cap.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC3156ExceededMaxLoan(uint256)": [
								{
									"details": "The requested loan exceeds the max loan value for `token`."
								}
							],
							"ERC3156InvalidReceiver(address)": [
								{
									"details": "The receiver of a flashloan is not a valid {onFlashLoan} implementer."
								}
							],
							"ERC3156UnsupportedToken(address)": [
								{
									"details": "The loan token is not valid."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"flashFee(address,uint256)": {
								"details": "Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.",
								"params": {
									"token": "The token to be flash loaned.",
									"value": "The amount of tokens to be loaned."
								},
								"returns": {
									"_0": "The fees applied to the corresponding flash loan."
								}
							},
							"flashLoan(address,address,uint256,bytes)": {
								"details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.",
								"params": {
									"data": "An arbitrary datafield that is passed to the receiver.",
									"receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.",
									"token": "The token to be flash loaned. Only `address(this)` is supported.",
									"value": "The amount of tokens to be loaned."
								},
								"returns": {
									"_0": "`true` if the flash loan was successful."
								}
							},
							"maxFlashLoan(address)": {
								"details": "Returns the maximum amount of tokens available for loan.",
								"params": {
									"token": "The address of the token that is requested."
								},
								"returns": {
									"_0": "The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"flashFee(address,uint256)": "d9d98ce4",
							"flashLoan(address,address,uint256,bytes)": "5cffe9de",
							"maxFlashLoan(address)": "613255ab",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"}],\"name\":\"ERC3156ExceededMaxLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC3156InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3156UnsupportedToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC3156 Flash loans extension, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]. Adds the {flashLoan} method, which provides flash loan support at the token level. By default there is no fee, but this can be changed by overriding {flashFee}. NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions, {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend overriding {maxFlashLoan} so that it correctly reflects the supply cap.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC3156ExceededMaxLoan(uint256)\":[{\"details\":\"The requested loan exceeds the max loan value for `token`.\"}],\"ERC3156InvalidReceiver(address)\":[{\"details\":\"The receiver of a flashloan is not a valid {onFlashLoan} implementer.\"}],\"ERC3156UnsupportedToken(address)\":[{\"details\":\"The loan token is not valid.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"flashFee(address,uint256)\":{\"details\":\"Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.\",\"params\":{\"token\":\"The token to be flash loaned.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"The fees applied to the corresponding flash loan.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.\",\"params\":{\"data\":\"An arbitrary datafield that is passed to the receiver.\",\"receiver\":\"The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.\",\"token\":\"The token to be flash loaned. Only `address(this)` is supported.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"`true` if the flash loan was successful.\"}},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":\"ERC20FlashMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":{\"keccak256\":\"0xde94f78563e985acb16868dae5955135207baa103e2a654108b6f043fd8c51c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b6f33918ae1ef9898bf976dbd62771ea10054cc330f8ca262e61ab6d0cdfa25\",\"dweb:/ipfs/QmReBtCQDR8F7pEd2Cwf2XWLtJNxQAKJiY3p7n7UZniwuL\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol:ERC20FlashMint",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol:ERC20FlashMint",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 399,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol:ERC20FlashMint",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol:ERC20FlashMint",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol:ERC20FlashMint",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 391,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 397,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 399,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 403,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2532,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2534,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1511,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1511,
								"contract": "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122033087c77ffd9c8203d6431156cd9e62e40bd71d63bad2d3d59b97c2246e8cb8f64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033087c77ffd9c8203d6431156cd9e62e40bd71d63bad2d3d59b97c2246e8cb8f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER ADDMOD PUSH29 0x77FFD9C8203D6431156CD9E62E40BD71D63BAD2D3D59B97C2246E8CB8F PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3053:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1255:3053:14;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033087c77ffd9c8203d6431156cd9e62e40bd71d63bad2d3d59b97c2246e8cb8f64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER ADDMOD PUSH29 0x77FFD9C8203D6431156CD9E62E40BD71D63BAD2D3D59B97C2246E8CB8F PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3053:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122033087c77ffd9c8203d6431156cd9e62e40bd71d63bad2d3d59b97c2246e8cb8f64736f6c634300081a0033",
									".code": [
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f999ad6bcc40b4f0e6ebcbcc0efdcd9ae42672a617d4dfbea34e38790a33b90764736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f999ad6bcc40b4f0e6ebcbcc0efdcd9ae42672a617d4dfbea34e38790a33b90764736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 SWAP10 0xAD PUSH12 0xCC40B4F0E6EBCBCC0EFDCD9A 0xE4 0x26 PUSH19 0xA617D4DFBEA34E38790A33B90764736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1245:2685:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f999ad6bcc40b4f0e6ebcbcc0efdcd9ae42672a617d4dfbea34e38790a33b90764736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF9 SWAP10 0xAD PUSH12 0xCC40B4F0E6EBCBCC0EFDCD9A 0xE4 0x26 PUSH19 0xA617D4DFBEA34E38790A33B90764736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1245:2685:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f999ad6bcc40b4f0e6ebcbcc0efdcd9ae42672a617d4dfbea34e38790a33b90764736f6c634300081a0033",
									".code": [
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200bdb4030cf2e340e1bf9e63a65810bbc3505044ab21637d34e5f4e0b95cabf3f64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200bdb4030cf2e340e1bf9e63a65810bbc3505044ab21637d34e5f4e0b95cabf3f64736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xDB BLOCKHASH ADDRESS 0xCF 0x2E CALLVALUE 0xE SHL 0xF9 0xE6 GASPRICE PUSH6 0x810BBC350504 BLOBBASEFEE 0xB2 AND CALLDATACOPY 0xD3 0x4E PUSH0 0x4E SIGNEXTEND SWAP6 0xCA 0xBF EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200bdb4030cf2e340e1bf9e63a65810bbc3505044ab21637d34e5f4e0b95cabf3f64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xDB BLOCKHASH ADDRESS 0xCF 0x2E CALLVALUE 0xE SHL 0xF9 0xE6 GASPRICE PUSH6 0x810BBC350504 BLOBBASEFEE 0xB2 AND CALLDATACOPY 0xD3 0x4E PUSH0 0x4E SIGNEXTEND SWAP6 0xCA 0xBF EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200bdb4030cf2e340e1bf9e63a65810bbc3505044ab21637d34e5f4e0b95cabf3f64736f6c634300081a0033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206645ef800195e1434d50780d5dd8ca257716958f4518c7fff4496aba2a27dd0764736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206645ef800195e1434d50780d5dd8ca257716958f4518c7fff4496aba2a27dd0764736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x45EF800195E143 0x4D POP PUSH25 0xD5DD8CA257716958F4518C7FFF4496ABA2A27DD0764736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "344:7386:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7386:17;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206645ef800195e1434d50780d5dd8ca257716958f4518c7fff4496aba2a27dd0764736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x45EF800195E143 0x4D POP PUSH25 0xD5DD8CA257716958F4518C7FFF4496ABA2A27DD0764736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "344:7386:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206645ef800195e1434d50780d5dd8ca257716958f4518c7fff4496aba2a27dd0764736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2532,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2534,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f2b8d5d743c3165206da140d2de1e132fa03c90f629ba797ce1e4c057e1dbdd764736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f2b8d5d743c3165206da140d2de1e132fa03c90f629ba797ce1e4c057e1dbdd764736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xB8 0xD5 0xD7 NUMBER 0xC3 AND MSTORE MOD 0xDA EQ 0xD 0x2D 0xE1 0xE1 ORIGIN STATICCALL SUB 0xC9 0xF PUSH3 0x9BA797 0xCE 0x1E 0x4C SDIV PUSH31 0x1DBDD764736F6C634300081A00330000000000000000000000000000000000 ",
							"sourceMap": "521:3235:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:19;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f2b8d5d743c3165206da140d2de1e132fa03c90f629ba797ce1e4c057e1dbdd764736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLCODE 0xB8 0xD5 0xD7 NUMBER 0xC3 AND MSTORE MOD 0xDA EQ 0xD 0x2D 0xE1 0xE1 ORIGIN STATICCALL SUB 0xC9 0xF PUSH3 0x9BA797 0xCE 0x1E 0x4C SDIV PUSH31 0x1DBDD764736F6C634300081A00330000000000000000000000000000000000 ",
							"sourceMap": "521:3235:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f2b8d5d743c3165206da140d2de1e132fa03c90f629ba797ce1e4c057e1dbdd764736f6c634300081a0033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e1b1cb3418ef392983cca1cb6845fa77b14a7c379e196b4b23d16a9f983969a164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e1b1cb3418ef392983cca1cb6845fa77b14a7c379e196b4b23d16a9f983969a164736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xB1 0xCB CALLVALUE XOR 0xEF CODECOPY 0x29 DUP4 0xCC LOG1 0xCB PUSH9 0x45FA77B14A7C379E19 PUSH12 0x4B23D16A9F983969A164736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "203:14914:20:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:20;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e1b1cb3418ef392983cca1cb6845fa77b14a7c379e196b4b23d16a9f983969a164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xB1 0xCB CALLVALUE XOR 0xEF CODECOPY 0x29 DUP4 0xCC LOG1 0xCB PUSH9 0x45FA77B14A7C379E19 PUSH12 0x4B23D16A9F983969A164736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "203:14914:20:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e1b1cb3418ef392983cca1cb6845fa77b14a7c379e196b4b23d16a9f983969a164736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 20
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220143d2636ac6a656bcdde4f25e6c5815becee5782fc8142b3e48d0f9c31f8212364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220143d2636ac6a656bcdde4f25e6c5815becee5782fc8142b3e48d0f9c31f8212364736f6c634300081a0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ RETURNDATASIZE 0x26 CALLDATASIZE 0xAC PUSH11 0x656BCDDE4F25E6C5815BEC 0xEE JUMPI DUP3 0xFC DUP2 TIMESTAMP 0xB3 0xE4 DUP14 0xF SWAP13 BALANCE 0xF8 0x21 0x23 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:21;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220143d2636ac6a656bcdde4f25e6c5815becee5782fc8142b3e48d0f9c31f8212364736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ RETURNDATASIZE 0x26 CALLDATASIZE 0xAC PUSH11 0x656BCDDE4F25E6C5815BEC 0xEE JUMPI DUP3 0xFC DUP2 TIMESTAMP 0xB3 0xE4 DUP14 0xF SWAP13 BALANCE 0xF8 0x21 0x23 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:21:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 21,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220143d2636ac6a656bcdde4f25e6c5815becee5782fc8142b3e48d0f9c31f8212364736f6c634300081a0033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 21
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 21
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 21
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/TimeVillage/USDT.sol": {
				"MyToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxLoan",
									"type": "uint256"
								}
							],
							"name": "ERC3156ExceededMaxLoan",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC3156InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "ERC3156UnsupportedToken",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "flashFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC3156FlashBorrower",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "maxFlashLoan",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"ERC3156ExceededMaxLoan(uint256)": [
								{
									"details": "The requested loan exceeds the max loan value for `token`."
								}
							],
							"ERC3156InvalidReceiver(address)": [
								{
									"details": "The receiver of a flashloan is not a valid {onFlashLoan} implementer."
								}
							],
							"ERC3156UnsupportedToken(address)": [
								{
									"details": "The loan token is not valid."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"flashFee(address,uint256)": {
								"details": "Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.",
								"params": {
									"token": "The token to be flash loaned.",
									"value": "The amount of tokens to be loaned."
								},
								"returns": {
									"_0": "The fees applied to the corresponding flash loan."
								}
							},
							"flashLoan(address,address,uint256,bytes)": {
								"details": "Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.",
								"params": {
									"data": "An arbitrary datafield that is passed to the receiver.",
									"receiver": "The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.",
									"token": "The token to be flash loaned. Only `address(this)` is supported.",
									"value": "The amount of tokens to be loaned."
								},
								"returns": {
									"_0": "`true` if the flash loan was successful."
								}
							},
							"maxFlashLoan(address)": {
								"details": "Returns the maximum amount of tokens available for loan.",
								"params": {
									"token": "The address of the token that is requested."
								},
								"returns": {
									"_0": "The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/TimeVillage/USDT.sol\":392:681  contract MyToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20FlashMint {... */\n  mstore(0x40, 0x0160)\n    /* \"contracts/TimeVillage/USDT.sol\":477:604  constructor(address initialOwner)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1574:1626  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe2, 0x1554d115)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1613:1617  name */\n  dup1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n  pop\n    /* \"contracts/TimeVillage/USDT.sol\":556:568  initialOwner */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xea, 0x1554d1)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xe2, 0x1554d115)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_12\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_11\n  jump\t// in\ntag_12:\n  pop\n  pop\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_14\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3096:3147   */\n  mstore\n    /* \"#utility.yul\":3069:3087   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\ntag_15:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_14:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_17\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_18\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_17:\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_20\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3405  name */\n  dup3\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x06\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3431  name.toShortStringWithFallback */\n  tag_21\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  jump\t// in\ntag_20:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_22\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3474  version */\n  dup2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3501:3517  _versionFallback */\n  0x07\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3500  version.toShortStringWithFallback */\n  tag_21\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  jump\t// in\ntag_22:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  dup2\n  mload\n  swap1\n  dup3\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  tag_23\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n  mload(0xe0)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n  mload(0x0100)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x20\n  dup3\n  add\n    /* \"#utility.yul\":3417:3442   */\n  mstore\n    /* \"#utility.yul\":3458:3476   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":3451:3485   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":3501:3519   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":3494:3528   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n  chainid\n    /* \"#utility.yul\":3544:3562   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":3537:3571   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"#utility.yul\":3587:3606   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":3580:3641   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":3389:3408   */\n  0xc0\n  add\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\ntag_23:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3747:3751  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xc0\n  mstore\n  pop\n    /* \"contracts/TimeVillage/USDT.sol\":392:681  contract MyToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20FlashMint {... */\n  tag_52\n  swap1\n  pop\n  jump\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_18:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x05\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_21:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3010:3021  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3043:3048  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3056  bytes(value).length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\n  iszero\n  tag_30\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  tag_31\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3098:3103  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3097  toShortString */\n  tag_32\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  jump\t// in\ntag_31:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_33)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_30:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3161:3166  store */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_36\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3181  value */\n  dup5\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3161:3166  store */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_11\n  jump\t// in\ntag_36:\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_33:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_32:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1773:1784  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1813  bytes memory bstr */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1822:1825  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1826  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1844  bstr */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1851  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  iszero\n  tag_41\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1893:1896  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  mload(0x40)\n  shl(0xe0, 0x305a27a9)\n  dup2\n  mstore\n  0x04\n  add\n  tag_15\n  swap2\n  swap1\n  tag_43\n  jump\t// in\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_41:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1985  bstr.length */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_44\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1978  bstr */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_45\n  jump\t// in\ntag_44:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n  swap4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_54\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_54:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_55\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_55:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":309:436   */\ntag_47:\n    /* \"#utility.yul\":370:380   */\n  0x4e487b71\n    /* \"#utility.yul\":365:368   */\n  0xe0\n    /* \"#utility.yul\":361:381   */\n  shl\n    /* \"#utility.yul\":358:359   */\n  0x00\n    /* \"#utility.yul\":351:382   */\n  mstore\n    /* \"#utility.yul\":401:405   */\n  0x41\n    /* \"#utility.yul\":398:399   */\n  0x04\n    /* \"#utility.yul\":391:406   */\n  mstore\n    /* \"#utility.yul\":425:429   */\n  0x24\n    /* \"#utility.yul\":422:423   */\n  0x00\n    /* \"#utility.yul\":415:430   */\n  revert\n    /* \"#utility.yul\":441:821   */\ntag_48:\n    /* \"#utility.yul\":520:521   */\n  0x01\n    /* \"#utility.yul\":516:528   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":563:575   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":584:645   */\n  tag_58\n  jumpi\n    /* \"#utility.yul\":638:642   */\n  0x7f\n    /* \"#utility.yul\":630:636   */\n  dup3\n    /* \"#utility.yul\":626:643   */\n  and\n    /* \"#utility.yul\":616:643   */\n  swap2\n  pop\n    /* \"#utility.yul\":584:645   */\ntag_58:\n    /* \"#utility.yul\":691:693   */\n  0x20\n    /* \"#utility.yul\":683:689   */\n  dup3\n    /* \"#utility.yul\":680:694   */\n  lt\n    /* \"#utility.yul\":660:678   */\n  dup2\n    /* \"#utility.yul\":657:695   */\n  sub\n    /* \"#utility.yul\":654:815   */\n  tag_59\n  jumpi\n    /* \"#utility.yul\":737:747   */\n  0x4e487b71\n    /* \"#utility.yul\":732:735   */\n  0xe0\n    /* \"#utility.yul\":728:748   */\n  shl\n    /* \"#utility.yul\":725:726   */\n  0x00\n    /* \"#utility.yul\":718:749   */\n  mstore\n    /* \"#utility.yul\":772:776   */\n  0x22\n    /* \"#utility.yul\":769:770   */\n  0x04\n    /* \"#utility.yul\":762:777   */\n  mstore\n    /* \"#utility.yul\":800:804   */\n  0x24\n    /* \"#utility.yul\":797:798   */\n  0x00\n    /* \"#utility.yul\":790:805   */\n  revert\n    /* \"#utility.yul\":654:815   */\ntag_59:\n  pop\n    /* \"#utility.yul\":441:821   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":952:1470   */\ntag_50:\n    /* \"#utility.yul\":1054:1056   */\n  0x1f\n    /* \"#utility.yul\":1049:1052   */\n  dup3\n    /* \"#utility.yul\":1046:1057   */\n  gt\n    /* \"#utility.yul\":1043:1464   */\n  iszero\n  tag_62\n  jumpi\n    /* \"#utility.yul\":1090:1095   */\n  dup1\n    /* \"#utility.yul\":1087:1088   */\n  0x00\n    /* \"#utility.yul\":1080:1096   */\n  mstore\n    /* \"#utility.yul\":1134:1138   */\n  0x20\n    /* \"#utility.yul\":1131:1132   */\n  0x00\n    /* \"#utility.yul\":1121:1139   */\n  keccak256\n    /* \"#utility.yul\":1204:1206   */\n  0x1f\n    /* \"#utility.yul\":1192:1202   */\n  dup5\n    /* \"#utility.yul\":1188:1207   */\n  add\n    /* \"#utility.yul\":1185:1186   */\n  0x05\n    /* \"#utility.yul\":1181:1208   */\n  shr\n    /* \"#utility.yul\":1175:1179   */\n  dup2\n    /* \"#utility.yul\":1171:1209   */\n  add\n    /* \"#utility.yul\":1240:1244   */\n  0x20\n    /* \"#utility.yul\":1228:1238   */\n  dup6\n    /* \"#utility.yul\":1225:1245   */\n  lt\n    /* \"#utility.yul\":1222:1269   */\n  iszero\n  tag_63\n  jumpi\n  pop\n    /* \"#utility.yul\":1263:1267   */\n  dup1\n    /* \"#utility.yul\":1222:1269   */\ntag_63:\n    /* \"#utility.yul\":1318:1320   */\n  0x1f\n    /* \"#utility.yul\":1313:1316   */\n  dup5\n    /* \"#utility.yul\":1309:1321   */\n  add\n    /* \"#utility.yul\":1306:1307   */\n  0x05\n    /* \"#utility.yul\":1302:1322   */\n  shr\n    /* \"#utility.yul\":1296:1300   */\n  dup3\n    /* \"#utility.yul\":1292:1323   */\n  add\n    /* \"#utility.yul\":1282:1323   */\n  swap2\n  pop\n    /* \"#utility.yul\":1373:1454   */\ntag_64:\n    /* \"#utility.yul\":1391:1393   */\n  dup2\n    /* \"#utility.yul\":1384:1389   */\n  dup2\n    /* \"#utility.yul\":1381:1394   */\n  lt\n    /* \"#utility.yul\":1373:1454   */\n  iszero\n  tag_66\n  jumpi\n    /* \"#utility.yul\":1450:1451   */\n  0x00\n    /* \"#utility.yul\":1436:1452   */\n  dup2\n  sstore\n    /* \"#utility.yul\":1417:1418   */\n  0x01\n    /* \"#utility.yul\":1406:1419   */\n  add\n    /* \"#utility.yul\":1373:1454   */\n  jump(tag_64)\ntag_66:\n    /* \"#utility.yul\":1377:1380   */\n  pop\n  pop\n    /* \"#utility.yul\":1043:1464   */\ntag_62:\n    /* \"#utility.yul\":952:1470   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1646:2945   */\ntag_11:\n    /* \"#utility.yul\":1766:1776   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1788:1818   */\n  dup2\n  gt\n    /* \"#utility.yul\":1785:1841   */\n  iszero\n  tag_70\n  jumpi\n    /* \"#utility.yul\":1821:1839   */\n  tag_70\n  tag_47\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":1850:1947   */\n  tag_71\n    /* \"#utility.yul\":1940:1946   */\n  dup2\n    /* \"#utility.yul\":1900:1938   */\n  tag_72\n    /* \"#utility.yul\":1932:1936   */\n  dup5\n    /* \"#utility.yul\":1926:1937   */\n  sload\n    /* \"#utility.yul\":1900:1938   */\n  tag_48\n  jump\t// in\ntag_72:\n    /* \"#utility.yul\":1894:1898   */\n  dup5\n    /* \"#utility.yul\":1850:1947   */\n  tag_50\n  jump\t// in\ntag_71:\n    /* \"#utility.yul\":1996:2000   */\n  0x20\n    /* \"#utility.yul\":2027:2029   */\n  0x1f\n    /* \"#utility.yul\":2016:2030   */\n  dup3\n  gt\n    /* \"#utility.yul\":2044:2045   */\n  0x01\n    /* \"#utility.yul\":2039:2688   */\n  dup2\n  eq\n  tag_74\n  jumpi\n    /* \"#utility.yul\":2732:2733   */\n  0x00\n    /* \"#utility.yul\":2749:2755   */\n  dup4\n    /* \"#utility.yul\":2746:2835   */\n  iszero\n  tag_75\n  jumpi\n  pop\n    /* \"#utility.yul\":2801:2820   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":2795:2821   */\n  mload\n    /* \"#utility.yul\":2746:2835   */\ntag_75:\n  not(0x00)\n    /* \"#utility.yul\":1603:1604   */\n  0x03\n    /* \"#utility.yul\":1599:1610   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1595:1619   */\n  shr\n    /* \"#utility.yul\":1591:1620   */\n  not\n    /* \"#utility.yul\":1581:1621   */\n  and\n    /* \"#utility.yul\":1627:1628   */\n  0x01\n    /* \"#utility.yul\":1623:1634   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":1578:1635   */\n  or\n    /* \"#utility.yul\":2848:2929   */\n  dup5\n  sstore\n    /* \"#utility.yul\":2009:2939   */\n  jump(tag_66)\n    /* \"#utility.yul\":2039:2688   */\ntag_74:\n    /* \"#utility.yul\":899:900   */\n  0x00\n    /* \"#utility.yul\":892:906   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":936:940   */\n  0x20\n    /* \"#utility.yul\":923:941   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":2075:2095   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":2193:2415   */\ntag_78:\n    /* \"#utility.yul\":2207:2214   */\n  dup3\n    /* \"#utility.yul\":2204:2205   */\n  dup2\n    /* \"#utility.yul\":2201:2215   */\n  lt\n    /* \"#utility.yul\":2193:2415   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":2289:2308   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":2283:2309   */\n  mload\n    /* \"#utility.yul\":2268:2310   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2396:2400   */\n  0x20\n    /* \"#utility.yul\":2381:2401   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":2349:2350   */\n  0x01\n    /* \"#utility.yul\":2337:2351   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":2223:2235   */\n  add\n    /* \"#utility.yul\":2193:2415   */\n  jump(tag_78)\ntag_80:\n    /* \"#utility.yul\":2197:2200   */\n  pop\n    /* \"#utility.yul\":2443:2449   */\n  dup5\n    /* \"#utility.yul\":2434:2441   */\n  dup3\n    /* \"#utility.yul\":2431:2450   */\n  lt\n    /* \"#utility.yul\":2428:2629   */\n  iszero\n  tag_81\n  jumpi\n    /* \"#utility.yul\":2504:2523   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":2498:2524   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2587:2588   */\n  0x03\n    /* \"#utility.yul\":2583:2597   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":2599:2602   */\n  0xf8\n    /* \"#utility.yul\":2579:2603   */\n  and\n    /* \"#utility.yul\":2575:2612   */\n  shr\n    /* \"#utility.yul\":2571:2613   */\n  not\n    /* \"#utility.yul\":2556:2614   */\n  and\n    /* \"#utility.yul\":2541:2615   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2428:2629   */\ntag_81:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2675:2676   */\n  0x01\n    /* \"#utility.yul\":2659:2673   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2655:2677   */\n  add\n    /* \"#utility.yul\":2642:2678   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1646:2945   */\n  jump\t// out\n    /* \"#utility.yul\":3652:4179   */\ntag_43:\n    /* \"#utility.yul\":3801:3803   */\n  0x20\n    /* \"#utility.yul\":3790:3799   */\n  dup2\n    /* \"#utility.yul\":3783:3804   */\n  mstore\n    /* \"#utility.yul\":3764:3768   */\n  0x00\n    /* \"#utility.yul\":3833:3839   */\n  dup3\n    /* \"#utility.yul\":3827:3840   */\n  mload\n    /* \"#utility.yul\":3876:3882   */\n  dup1\n    /* \"#utility.yul\":3871:3873   */\n  0x20\n    /* \"#utility.yul\":3860:3869   */\n  dup5\n    /* \"#utility.yul\":3856:3874   */\n  add\n    /* \"#utility.yul\":3849:3883   */\n  mstore\n    /* \"#utility.yul\":3901:3902   */\n  0x00\n    /* \"#utility.yul\":3911:4051   */\ntag_85:\n    /* \"#utility.yul\":3925:3931   */\n  dup2\n    /* \"#utility.yul\":3922:3923   */\n  dup2\n    /* \"#utility.yul\":3919:3932   */\n  lt\n    /* \"#utility.yul\":3911:4051   */\n  iszero\n  tag_87\n  jumpi\n    /* \"#utility.yul\":4036:4038   */\n  0x20\n    /* \"#utility.yul\":4020:4034   */\n  dup2\n  dup7\n  add\n    /* \"#utility.yul\":4016:4039   */\n  dup2\n  add\n    /* \"#utility.yul\":4010:4040   */\n  mload\n    /* \"#utility.yul\":4005:4007   */\n  0x40\n    /* \"#utility.yul\":3986:4003   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":3982:4008   */\n  add\n    /* \"#utility.yul\":3975:4041   */\n  mstore\n    /* \"#utility.yul\":3940:3950   */\n  add\n    /* \"#utility.yul\":3911:4051   */\n  jump(tag_85)\ntag_87:\n    /* \"#utility.yul\":3915:3918   */\n  pop\n    /* \"#utility.yul\":4100:4101   */\n  0x00\n    /* \"#utility.yul\":4095:4097   */\n  0x40\n    /* \"#utility.yul\":4086:4092   */\n  dup3\n    /* \"#utility.yul\":4075:4084   */\n  dup6\n    /* \"#utility.yul\":4071:4093   */\n  add\n    /* \"#utility.yul\":4067:4098   */\n  add\n    /* \"#utility.yul\":4060:4102   */\n  mstore\n    /* \"#utility.yul\":4170:4172   */\n  0x40\n    /* \"#utility.yul\":4163:4165   */\n  0x1f\n    /* \"#utility.yul\":4159:4166   */\n  not\n    /* \"#utility.yul\":4154:4156   */\n  0x1f\n    /* \"#utility.yul\":4146:4152   */\n  dup4\n    /* \"#utility.yul\":4142:4157   */\n  add\n    /* \"#utility.yul\":4138:4167   */\n  and\n    /* \"#utility.yul\":4127:4136   */\n  dup5\n    /* \"#utility.yul\":4123:4168   */\n  add\n    /* \"#utility.yul\":4119:4173   */\n  add\n    /* \"#utility.yul\":4111:4173   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":3652:4179   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4184:4481   */\ntag_45:\n    /* \"#utility.yul\":4302:4314   */\n  dup1\n  mload\n    /* \"#utility.yul\":4349:4353   */\n  0x20\n    /* \"#utility.yul\":4338:4354   */\n  dup1\n  dup4\n  add\n    /* \"#utility.yul\":4332:4355   */\n  mload\n  swap2\n    /* \"#utility.yul\":4302:4314   */\n  swap1\n    /* \"#utility.yul\":4367:4383   */\n  dup2\n  lt\n    /* \"#utility.yul\":4364:4475   */\n  iszero\n  tag_59\n  jumpi\n  not(0x00)\n    /* \"#utility.yul\":4441:4445   */\n  0x20\n    /* \"#utility.yul\":4437:4454   */\n  swap2\n  swap1\n  swap2\n  sub\n    /* \"#utility.yul\":4434:4435   */\n  0x03\n    /* \"#utility.yul\":4430:4455   */\n  shl\n    /* \"#utility.yul\":4426:4464   */\n  shl\n    /* \"#utility.yul\":4415:4465   */\n  and\n  swap2\n    /* \"#utility.yul\":4184:4481   */\n  swap1\n  pop\n  jump\t// out\ntag_52:\n    /* \"contracts/TimeVillage/USDT.sol\":392:681  contract MyToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20FlashMint {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xa67a86f1b6fd7030f44a621eeec16b10146271ac9a57dcb159be5839331d96b2\")\n  0x00\n  assignImmutable(\"0xd0a6af117abf9fe79cebb073effb96faaee53ca29b0e8ccb8ac0edbc977062ab\")\n  0x00\n  assignImmutable(\"0xe04ac22115156093a270abc0b85befe2e076f498c2224d99a126a025ed2a7617\")\n  0x00\n  assignImmutable(\"0x75bd60a6023702cd1e78e2a7954ec00cabb4a50c2e73f058af911e8e193d4722\")\n  0x00\n  assignImmutable(\"0x792a2e6eb073818f631b8730c6f5c8f313f41b3e47d43ad3e60a8d913c066c10\")\n  0x00\n  assignImmutable(\"0xd9aba7337cd62c2de4497994379254cfeeaa8d475b90f4dd6b0a5b6e6e6272c4\")\n  0x00\n  assignImmutable(\"0x7208d625e28adf61e4a9ff1c6f3a9f7b60db4e63d78e0871dbb03feed8f254c0\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/TimeVillage/USDT.sol\":392:681  contract MyToken is ERC20, ERC20Burnable, Ownable, ERC20Permit, ERC20FlashMint {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd9d98ce4\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x313ce567\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x5cffe9de\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x613255ab\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1249c58b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_33:\n      tag_35\n      jump\t// in\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":1317:1331   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1310:1332   */\n      iszero\n        /* \"#utility.yul\":1292:1333   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1280:1282   */\n      0x20\n        /* \"#utility.yul\":1265:1283   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_30\n        /* \"#utility.yul\":1152:1339   */\n      jump\n        /* \"contracts/TimeVillage/USDT.sol\":610:679  function mint() public {... */\n    tag_5:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_6:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_40:\n      mload(0x40)\n        /* \"#utility.yul\":1490:1515   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1478:1480   */\n      0x20\n        /* \"#utility.yul\":1463:1481   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      tag_30\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_7:\n      tag_32\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_8:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3075:3077  18 */\n      0x12\n        /* \"#utility.yul\":2181:2217   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2169:2171   */\n      0x20\n        /* \"#utility.yul\":2154:2172   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n      tag_30\n        /* \"#utility.yul\":2039:2223   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_9:\n      tag_40\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_10:\n      tag_38\n      tag_58\n      calldatasize\n      0x04\n      tag_59\n      jump\t// in\n    tag_58:\n      tag_60\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4784:5746  function flashLoan(... */\n    tag_11:\n      tag_32\n      tag_62\n      calldatasize\n      0x04\n      tag_63\n      jump\t// in\n    tag_62:\n      tag_64\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":1934:2095  function maxFlashLoan(address token) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_40\n      tag_67\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_67:\n      tag_69\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_40\n      tag_72\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_72:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_38\n      tag_76\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_15:\n      tag_38\n      tag_78\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_16:\n      tag_40\n      tag_81\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_17:\n      tag_84\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      tag_30\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_87\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_18:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload(0x05)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5299:5350   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5287:5289   */\n      0x20\n        /* \"#utility.yul\":5272:5290   */\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      tag_30\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_19:\n      tag_28\n      tag_93\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_20:\n      tag_32\n      tag_96\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_96:\n      tag_97\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_21:\n      tag_38\n      tag_100\n      calldatasize\n      0x04\n      tag_101\n      jump\t// in\n    tag_100:\n      tag_102\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2460:2692  function flashFee(address token, uint256 value) public view virtual returns (uint256) {... */\n    tag_22:\n      tag_40\n      tag_104\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_104:\n      tag_105\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_23:\n      tag_40\n      tag_108\n      calldatasize\n      0x04\n      tag_109\n      jump\t// in\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_38\n      tag_113\n      calldatasize\n      0x04\n      tag_68\n      jump\t// in\n    tag_113:\n      tag_114\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_116\n      swap1\n      tag_117\n      jump\t// in\n    tag_116:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_118\n      swap1\n      tag_117\n      jump\t// in\n    tag_118:\n      dup1\n      iszero\n      tag_119\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_120\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_119)\n    tag_120:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_121:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_121\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_119:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_125\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_126\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_122:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/TimeVillage/USDT.sol\":610:679  function mint() public {... */\n    tag_39:\n        /* \"contracts/TimeVillage/USDT.sol\":643:672  _mint(msg.sender, 1000 *1e18) */\n      tag_128\n        /* \"contracts/TimeVillage/USDT.sol\":649:659  msg.sender */\n      caller\n        /* \"contracts/TimeVillage/USDT.sol\":661:671  1000 *1e18 */\n      0x3635c9adc5dea00000\n        /* \"contracts/TimeVillage/USDT.sol\":643:648  _mint */\n      tag_129\n        /* \"contracts/TimeVillage/USDT.sol\":643:672  _mint(msg.sender, 1000 *1e18) */\n      jump\t// in\n    tag_128:\n        /* \"contracts/TimeVillage/USDT.sol\":610:679  function mint() public {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_133\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_134\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_133:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_135\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_136\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_135:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_54:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2715:2722  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      tag_139\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2759  _domainSeparatorV4 */\n      tag_140\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      jump\t// in\n    tag_139:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2734:2761  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_60:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      tag_142\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":692:697  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:677  _burn */\n      tag_144\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_142:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4784:5746  function flashLoan(... */\n    tag_64:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4948:4952  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4964:4979  uint256 maxLoan */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4982:5001  maxFlashLoan(token) */\n      tag_146\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4995:5000  token */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4982:4994  maxFlashLoan */\n      tag_69\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4982:5001  maxFlashLoan(token) */\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4964:5001  uint256 maxLoan = maxFlashLoan(token) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5023:5030  maxLoan */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5015:5020  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5015:5030  value > maxLoan */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5011:5095  if (value > maxLoan) {... */\n      iszero\n      tag_147\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5053:5084  ERC3156ExceededMaxLoan(maxLoan) */\n      mload(0x40)\n      shl(0xe0, 0xfd9a7609)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1490:1515   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5053:5084  ERC3156ExceededMaxLoan(maxLoan) */\n    tag_148:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5011:5095  if (value > maxLoan) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5104:5115  uint256 fee */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5118:5140  flashFee(token, value) */\n      tag_149\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5127:5132  token */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5134:5139  value */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5118:5126  flashFee */\n      tag_105\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5118:5140  flashFee(token, value) */\n      jump\t// in\n    tag_149:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5104:5140  uint256 fee = flashFee(token, value) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5150:5181  _mint(address(receiver), value) */\n      tag_150\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5164:5172  receiver */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5175:5180  value */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5150:5155  _mint */\n      tag_129\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5150:5181  _mint(address(receiver), value) */\n      jump\t// in\n    tag_150:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5195:5254  receiver.onFlashLoan(_msgSender(), token, value, fee, data) */\n      mload(0x40)\n      shl(0xe0, 0x23e30c8b)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":1038:1083  keccak256(\"ERC3156FlashBorrower.onFlashLoan\") */\n      0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5195:5215  receiver.onFlashLoan */\n      dup11\n      and\n      swap1\n      0x23e30c8b\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5195:5254  receiver.onFlashLoan(_msgSender(), token, value, fee, data) */\n      tag_152\n      swap1\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5230:5235  token */\n      dup13\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5237:5242  value */\n      dup13\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5244:5247  fee */\n      dup9\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5249:5253  data */\n      dup14\n      swap1\n      dup14\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5195:5254  receiver.onFlashLoan(_msgSender(), token, value, fee, data) */\n      0x04\n      add\n      tag_153\n      jump\t// in\n    tag_152:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_155\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_155:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_156\n      swap2\n      swap1\n      tag_157\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5195:5270  receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5191:5345  if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {... */\n      tag_158\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5293:5334  ERC3156InvalidReceiver(address(receiver)) */\n      mload(0x40)\n      shl(0xe8, 0x678c5b)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5317:5349   */\n      dup10\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5293:5334  ERC3156InvalidReceiver(address(receiver)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5293:5334  ERC3156InvalidReceiver(address(receiver)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5191:5345  if (receiver.onFlashLoan(_msgSender(), token, value, fee, data) != RETURN_VALUE) {... */\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5354:5378  address flashFeeReceiver */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5410:5472  _spendAllowance(address(receiver), address(this), value + fee) */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5434:5442  receiver */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5453:5457  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5460:5471  value + fee */\n      tag_163\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5468:5471  fee */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5460:5465  value */\n      dup12\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5460:5471  value + fee */\n      tag_164\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5410:5425  _spendAllowance */\n      tag_134\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5410:5472  _spendAllowance(address(receiver), address(this), value + fee) */\n      jump\t// in\n    tag_162:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5486:5494  fee == 0 */\n      dup2\n      iszero\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5486:5528  fee == 0 || flashFeeReceiver == address(0) */\n      tag_165\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5498:5528  flashFeeReceiver == address(0) */\n      dup2\n      and\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5486:5528  fee == 0 || flashFeeReceiver == address(0) */\n    tag_165:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5482:5719  if (fee == 0 || flashFeeReceiver == address(0)) {... */\n      iszero\n      tag_166\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5544:5581  _burn(address(receiver), value + fee) */\n      tag_167\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5558:5566  receiver */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5569:5580  value + fee */\n      tag_168\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5577:5580  fee */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5569:5574  value */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5569:5580  value + fee */\n      tag_164\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5544:5549  _burn */\n      tag_144\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5544:5581  _burn(address(receiver), value + fee) */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5482:5719  if (fee == 0 || flashFeeReceiver == address(0)) {... */\n      jump(tag_171)\n    tag_166:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5612:5643  _burn(address(receiver), value) */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5626:5634  receiver */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5637:5642  value */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5612:5617  _burn */\n      tag_144\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5612:5643  _burn(address(receiver), value) */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5657:5708  _transfer(address(receiver), flashFeeReceiver, fee) */\n      tag_171\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5675:5683  receiver */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5686:5702  flashFeeReceiver */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5704:5707  fee */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5657:5666  _transfer */\n      tag_136\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5657:5708  _transfer(address(receiver), flashFeeReceiver, fee) */\n      jump\t// in\n    tag_171:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":5735:5739  true */\n      0x01\n      swap9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":4784:5746  function flashLoan(... */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":1934:2095  function maxFlashLoan(address token) public view virtual returns (uint256) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2000:2007  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2026:2048  token == address(this) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2043:2047  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2026:2048  token == address(this) */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2026:2088  token == address(this) ? type(uint256).max - totalSupply() : 0 */\n      tag_173\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2087:2088  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2026:2088  token == address(this) ? type(uint256).max - totalSupply() : 0 */\n      jump(tag_122)\n    tag_173:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2051:2084  type(uint256).max - totalSupply() */\n      tag_122\n      swap1\n      not(0x00)\n      tag_177\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_180\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_181\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_180:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_184\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      tag_186\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1112:1119  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1135:1140  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1111  _spendAllowance */\n      tag_134\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_186:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      tag_188\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1157:1164  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1166:1171  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1156  _burn */\n      tag_144\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_82:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2497:2504  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x08\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2523:2542  super.nonces(owner) */\n      tag_122\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_85:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5242:5255  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5269:5287  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5301:5322  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5336:5351  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5365:5390  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5404:5416  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5430:5457  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      tag_193\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5544  _EIP712Name */\n      tag_194\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      tag_195\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5574  _EIP712Version */\n      tag_196\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      jump\t// in\n    tag_195:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      shl(0xf8, 0x0f)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap12\n      swap4\n      swap11\n      pop\n      swap2\n      swap9\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      chainid\n      swap8\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n      swap7\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_93:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_116\n      swap1\n      tag_117\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_125\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_136\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_102:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1901:1909  deadline */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1898  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1909  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n      iszero\n      tag_212\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      shl(0xe1, 0x313c8981)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1490:1515   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n      tag_148\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n    tag_212:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2004  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1022:1117  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2045:2050  owner */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2052:2059  spender */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2061:2066  value */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n      tag_214\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2078:2083  owner */\n      dup13\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      and\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":819:826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x08\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1137  _nonces[owner]++ */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n    tag_214:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":8919:8944   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":8980:9012   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":8960:8978   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":8953:9013   */\n      mstore\n        /* \"#utility.yul\":9049:9081   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":9029:9047   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":9022:9082   */\n      mstore\n        /* \"#utility.yul\":9098:9116   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":9091:9125   */\n      mstore\n        /* \"#utility.yul\":9141:9160   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":9134:9169   */\n      mstore\n        /* \"#utility.yul\":9185:9204   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":9178:9213   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":8891:8910   */\n      0xe0\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2007:2096  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2096  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2119  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      tag_218\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2149  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2138  _hashTypedDataV4 */\n      tag_219\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2150  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2175  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      tag_220\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2192:2196  hash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2198:2199  v */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2201:2202  r */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2204:2205  s */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2191  ECDSA.recover */\n      tag_221\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_220:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2206  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2230:2235  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2226  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n      tag_222\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      shl(0xe1, 0x25c00723)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":9416:9448   */\n      dup1\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":9398:9449   */\n      mstore\n        /* \"#utility.yul\":9485:9517   */\n      dup12\n      and\n        /* \"#utility.yul\":9465:9483   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9458:9518   */\n      mstore\n        /* \"#utility.yul\":9371:9389   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      tag_148\n        /* \"#utility.yul\":9224:9524   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      tag_225\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2323:2328  owner */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2330:2337  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2339:2344  value */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2322  _approve */\n      tag_126\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1869:2352  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2460:2692  function flashFee(address token, uint256 value) public view virtual returns (uint256) {... */\n    tag_105:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2537:2544  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2560:2582  token != address(this) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2577:2581  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2560:2582  token != address(this) */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2556:2646  if (token != address(this)) {... */\n      tag_227\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2605:2635  ERC3156UnsupportedToken(token) */\n      mload(0x40)\n      shl(0xe1, 0x5ad3edc9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5317:5349   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2605:2635  ERC3156UnsupportedToken(token) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2605:2635  ERC3156UnsupportedToken(token) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2556:2646  if (token != address(this)) {... */\n    tag_227:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":3160:3167  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2662:2685  _flashFee(token, value) */\n    tag_229:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2655:2685  return _flashFee(token, value) */\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":2460:2692  function flashFee(address token, uint256 value) public view virtual returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_114:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_233\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_181\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_233:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_235\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_235:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_142\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_184\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_126:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_240\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_240:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_243:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_188\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_134:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_253\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_250\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":9749:9781   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9731:9782   */\n      mstore\n        /* \"#utility.yul\":9798:9816   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":9791:9825   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":9841:9859   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":9834:9868   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":9704:9722   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_148\n        /* \"#utility.yul\":9529:9874   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_250:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_253\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_241\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_136:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_255\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_255:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_257:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_240\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_140:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3898:3905  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0x792a2e6eb073818f631b8730c6f5c8f313f41b3e47d43ad3e60a8d913c066c10\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_261\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      immutable(\"0xd9aba7337cd62c2de4497994379254cfeeaa8d475b90f4dd6b0a5b6e6e6272c4\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_261:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_262\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x7208d625e28adf61e4a9ff1c6f3a9f7b60db4e63d78e0871dbb03feed8f254c0\")\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_262:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      tag_139\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":10138:10163   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0x75bd60a6023702cd1e78e2a7954ec00cabb4a50c2e73f058af911e8e193d4722\")\n        /* \"#utility.yul\":10179:10197   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":10172:10206   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0xe04ac22115156093a270abc0b85befe2e076f498c2224d99a126a025ed2a7617\")\n        /* \"#utility.yul\":10222:10240   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":10215:10249   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"#utility.yul\":10265:10283   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":10258:10292   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n      address\n        /* \"#utility.yul\":10308:10327   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":10301:10362   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":10110:10129   */\n      0xc0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_144:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_267\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_267:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_188\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_246\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_181:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_184:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x05\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n    tag_194:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6067:6080  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_139\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0xd0a6af117abf9fe79cebb073effb96faaee53ca29b0e8ccb8ac0edbc977062ab\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6126:6139  _nameFallback */\n      0x06\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6125  _name.toStringWithFallback */\n      tag_281\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n    tag_196:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6522:6535  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_139\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0xa67a86f1b6fd7030f44a621eeec16b10146271ac9a57dcb159be5839331d96b2\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x07\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6583  _version.toStringWithFallback */\n      tag_281\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_219:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4994:5001  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_122\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_287\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5071  _domainSeparatorV4 */\n      tag_140\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      jump\t// in\n    tag_287:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5075:5085  structHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3555:3559  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3549:3560  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3573:3596  mstore(ptr, hex\"19_01\") */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3625:3629  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3616:3630  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3609:3648  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3677:3681  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3668:3682  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3661:3695  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3733:3737  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3718:3738  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6888:6895  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6908:6925  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6927:6945  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:6963  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      tag_290\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6978:6982  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6984:6985  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6987:6988  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6990:6991  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6977  tryRecover */\n      tag_291\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_290:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6907:6992  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      tag_292\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7014:7019  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7021:7029  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7013  _throwError */\n      tag_293\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      jump\t// in\n    tag_292:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7047:7056  recovered */\n      swap1\n      swap7\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_296\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_296:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_298\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5299:5350   */\n      mstore\n        /* \"#utility.yul\":5272:5290   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      tag_148\n        /* \"#utility.yul\":5153:5356   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_298:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_253\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_301\n      swap2\n        /* \"#utility.yul\":1490:1515   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1478:1480   */\n      0x20\n        /* \"#utility.yul\":1463:1481   */\n      add\n      swap1\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n    tag_301:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_246:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_303\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_304\n      swap2\n      swap1\n      tag_164\n      jump\t// in\n    tag_304:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_305\n      swap1\n      pop\n      jump\n    tag_303:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_306\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":9749:9781   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9731:9782   */\n      mstore\n        /* \"#utility.yul\":9798:9816   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":9791:9825   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":9841:9859   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":9834:9868   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":9704:9722   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_148\n        /* \"#utility.yul\":9529:9874   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_306:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_305:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_308\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_309)\n    tag_308:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_309:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_310\n      swap2\n        /* \"#utility.yul\":1490:1515   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1478:1480   */\n      0x20\n        /* \"#utility.yul\":1463:1481   */\n      add\n      swap1\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n    tag_310:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_281:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3479:3492  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup4\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_315\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_316\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3586:3591  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3585  toString */\n      tag_317\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      jump\t// in\n    tag_316:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3570:3592  return toString(value) */\n      swap1\n      pop\n      jump(tag_122)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_315:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3630:3635  store */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3623:3635  return store */\n      dup1\n      sload\n      tag_319\n      swap1\n      tag_117\n      jump\t// in\n    tag_319:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_320\n      swap1\n      tag_117\n      jump\t// in\n    tag_320:\n      dup1\n      iszero\n      tag_321\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_322\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_321)\n    tag_322:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_323:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_323\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_321:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      jump(tag_122)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_291:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5266:5273  address */\n      0x00\n      dup1\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_326\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6333:6334  s */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      jump(tag_325)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_326:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6454  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":10600:10625   */\n      dup11\n      swap1\n      mstore\n        /* \"#utility.yul\":10673:10677   */\n      0xff\n        /* \"#utility.yul\":10661:10678   */\n      dup10\n      and\n        /* \"#utility.yul\":10641:10659   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":10634:10679   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":10695:10713   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":10688:10722   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":10738:10756   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":10731:10765   */\n      dup7\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":10572:10591   */\n      0xa0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_330\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_330:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_331\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      0x00\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6551:6580  RecoverError.InvalidSignature */\n      0x01\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      dup3\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      jump(tag_325)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_331:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6622:6628  signer */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6630:6650  RecoverError.NoError */\n      0x00\n      swap2\n      pop\n      dup2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_325:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_293:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7291:7311  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7287  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_337\n      jumpi\n      tag_337\n      tag_335\n      jump\t// in\n    tag_337:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      tag_338\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n    tag_338:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7387:7416  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7383  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_343\n      jumpi\n      tag_343\n      tag_335\n      jump\t// in\n    tag_343:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n      tag_344\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7439:7462  ECDSAInvalidSignature() */\n      mload(0x40)\n      shl(0xe0, 0xf645eedf)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n    tag_344:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7492:7527  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7488  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_349\n      jumpi\n      tag_349\n      tag_335\n      jump\t// in\n    tag_349:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_350\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      shl(0xe0, 0xfce698f7)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1490:1515   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      tag_148\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_350:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7626:7656  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7622  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_356\n      jumpi\n      tag_356\n      tag_335\n      jump\t// in\n    tag_356:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      shl(0xe2, 0x35e2f383)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1490:1515   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1463:1481   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      tag_148\n        /* \"#utility.yul\":1344:1521   */\n      jump\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_317:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2137:2150  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2173  uint256 len */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      tag_360\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2187:2191  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2186  byteLength */\n      tag_361\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      jump\t// in\n    tag_360:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2192  uint256 len = byteLength(sstr) */\n      swap2\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2280:2297  string memory str */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2435:2439  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2426:2440  add(str, 0x20) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2419:2447  mstore(add(str, 0x20), sstr) */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2555:2800  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_361:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2616:2623  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      dup2\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      iszero\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:414   */\n    tag_367:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":146:147   */\n      0x00\n        /* \"#utility.yul\":156:295   */\n    tag_372:\n        /* \"#utility.yul\":170:176   */\n      dup2\n        /* \"#utility.yul\":167:168   */\n      dup2\n        /* \"#utility.yul\":164:177   */\n      lt\n        /* \"#utility.yul\":156:295   */\n      iszero\n      tag_374\n      jumpi\n        /* \"#utility.yul\":278:282   */\n      0x20\n        /* \"#utility.yul\":263:276   */\n      dup2\n      dup6\n      add\n        /* \"#utility.yul\":259:283   */\n      dup2\n      add\n        /* \"#utility.yul\":253:284   */\n      mload\n        /* \"#utility.yul\":233:244   */\n      dup7\n      dup4\n      add\n        /* \"#utility.yul\":229:251   */\n      dup3\n      add\n        /* \"#utility.yul\":222:285   */\n      mstore\n        /* \"#utility.yul\":185:197   */\n      add\n        /* \"#utility.yul\":156:295   */\n      jump(tag_372)\n    tag_374:\n        /* \"#utility.yul\":160:163   */\n      pop\n        /* \"#utility.yul\":340:341   */\n      0x00\n        /* \"#utility.yul\":333:337   */\n      0x20\n        /* \"#utility.yul\":324:330   */\n      dup3\n        /* \"#utility.yul\":319:322   */\n      dup7\n        /* \"#utility.yul\":315:331   */\n      add\n        /* \"#utility.yul\":311:338   */\n      add\n        /* \"#utility.yul\":304:342   */\n      mstore\n        /* \"#utility.yul\":403:407   */\n      0x20\n        /* \"#utility.yul\":396:398   */\n      0x1f\n        /* \"#utility.yul\":392:399   */\n      not\n        /* \"#utility.yul\":387:389   */\n      0x1f\n        /* \"#utility.yul\":379:385   */\n      dup4\n        /* \"#utility.yul\":375:390   */\n      add\n        /* \"#utility.yul\":371:400   */\n      and\n        /* \"#utility.yul\":366:369   */\n      dup6\n        /* \"#utility.yul\":362:401   */\n      add\n        /* \"#utility.yul\":358:408   */\n      add\n        /* \"#utility.yul\":351:408   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:414   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":419:639   */\n    tag_31:\n        /* \"#utility.yul\":568:570   */\n      0x20\n        /* \"#utility.yul\":557:566   */\n      dup2\n        /* \"#utility.yul\":550:571   */\n      mstore\n        /* \"#utility.yul\":531:535   */\n      0x00\n        /* \"#utility.yul\":588:633   */\n      tag_229\n        /* \"#utility.yul\":629:631   */\n      0x20\n        /* \"#utility.yul\":618:627   */\n      dup4\n        /* \"#utility.yul\":614:632   */\n      add\n        /* \"#utility.yul\":606:612   */\n      dup5\n        /* \"#utility.yul\":588:633   */\n      tag_367\n      jump\t// in\n        /* \"#utility.yul\":644:775   */\n    tag_368:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":719:750   */\n      dup2\n      and\n        /* \"#utility.yul\":709:751   */\n      dup2\n      eq\n        /* \"#utility.yul\":699:769   */\n      tag_142\n      jumpi\n        /* \"#utility.yul\":765:766   */\n      0x00\n        /* \"#utility.yul\":762:763   */\n      dup1\n        /* \"#utility.yul\":755:767   */\n      revert\n        /* \"#utility.yul\":780:1147   */\n    tag_34:\n        /* \"#utility.yul\":848:854   */\n      0x00\n        /* \"#utility.yul\":856:862   */\n      dup1\n        /* \"#utility.yul\":909:911   */\n      0x40\n        /* \"#utility.yul\":897:906   */\n      dup4\n        /* \"#utility.yul\":888:895   */\n      dup6\n        /* \"#utility.yul\":884:907   */\n      sub\n        /* \"#utility.yul\":880:912   */\n      slt\n        /* \"#utility.yul\":877:929   */\n      iszero\n      tag_380\n      jumpi\n        /* \"#utility.yul\":925:926   */\n      0x00\n        /* \"#utility.yul\":922:923   */\n      dup1\n        /* \"#utility.yul\":915:927   */\n      revert\n        /* \"#utility.yul\":877:929   */\n    tag_380:\n        /* \"#utility.yul\":964:973   */\n      dup3\n        /* \"#utility.yul\":951:974   */\n      calldataload\n        /* \"#utility.yul\":983:1014   */\n      tag_381\n        /* \"#utility.yul\":1008:1013   */\n      dup2\n        /* \"#utility.yul\":983:1014   */\n      tag_368\n      jump\t// in\n    tag_381:\n        /* \"#utility.yul\":1033:1038   */\n      swap5\n        /* \"#utility.yul\":1111:1113   */\n      0x20\n        /* \"#utility.yul\":1096:1114   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1083:1115   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":780:1147   */\n      jump\t// out\n        /* \"#utility.yul\":1526:2034   */\n    tag_46:\n        /* \"#utility.yul\":1603:1609   */\n      0x00\n        /* \"#utility.yul\":1611:1617   */\n      dup1\n        /* \"#utility.yul\":1619:1625   */\n      0x00\n        /* \"#utility.yul\":1672:1674   */\n      0x60\n        /* \"#utility.yul\":1660:1669   */\n      dup5\n        /* \"#utility.yul\":1651:1658   */\n      dup7\n        /* \"#utility.yul\":1647:1670   */\n      sub\n        /* \"#utility.yul\":1643:1675   */\n      slt\n        /* \"#utility.yul\":1640:1692   */\n      iszero\n      tag_385\n      jumpi\n        /* \"#utility.yul\":1688:1689   */\n      0x00\n        /* \"#utility.yul\":1685:1686   */\n      dup1\n        /* \"#utility.yul\":1678:1690   */\n      revert\n        /* \"#utility.yul\":1640:1692   */\n    tag_385:\n        /* \"#utility.yul\":1727:1736   */\n      dup4\n        /* \"#utility.yul\":1714:1737   */\n      calldataload\n        /* \"#utility.yul\":1746:1777   */\n      tag_386\n        /* \"#utility.yul\":1771:1776   */\n      dup2\n        /* \"#utility.yul\":1746:1777   */\n      tag_368\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":1796:1801   */\n      swap3\n      pop\n        /* \"#utility.yul\":1853:1855   */\n      0x20\n        /* \"#utility.yul\":1838:1856   */\n      dup5\n      add\n        /* \"#utility.yul\":1825:1857   */\n      calldataload\n        /* \"#utility.yul\":1866:1899   */\n      tag_387\n        /* \"#utility.yul\":1825:1857   */\n      dup2\n        /* \"#utility.yul\":1866:1899   */\n      tag_368\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":1526:2034   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1918:1925   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1998:2000   */\n      0x40\n        /* \"#utility.yul\":1983:2001   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1970:2002   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1526:2034   */\n      jump\t// out\n        /* \"#utility.yul\":2410:2636   */\n    tag_59:\n        /* \"#utility.yul\":2469:2475   */\n      0x00\n        /* \"#utility.yul\":2522:2524   */\n      0x20\n        /* \"#utility.yul\":2510:2519   */\n      dup3\n        /* \"#utility.yul\":2501:2508   */\n      dup5\n        /* \"#utility.yul\":2497:2520   */\n      sub\n        /* \"#utility.yul\":2493:2525   */\n      slt\n        /* \"#utility.yul\":2490:2542   */\n      iszero\n      tag_391\n      jumpi\n        /* \"#utility.yul\":2538:2539   */\n      0x00\n        /* \"#utility.yul\":2535:2536   */\n      dup1\n        /* \"#utility.yul\":2528:2540   */\n      revert\n        /* \"#utility.yul\":2490:2542   */\n    tag_391:\n      pop\n        /* \"#utility.yul\":2583:2606   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2410:2636   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2641:3653   */\n    tag_63:\n        /* \"#utility.yul\":2767:2773   */\n      0x00\n        /* \"#utility.yul\":2775:2781   */\n      dup1\n        /* \"#utility.yul\":2783:2789   */\n      0x00\n        /* \"#utility.yul\":2791:2797   */\n      dup1\n        /* \"#utility.yul\":2799:2805   */\n      0x00\n        /* \"#utility.yul\":2852:2855   */\n      0x80\n        /* \"#utility.yul\":2840:2849   */\n      dup7\n        /* \"#utility.yul\":2831:2838   */\n      dup9\n        /* \"#utility.yul\":2827:2850   */\n      sub\n        /* \"#utility.yul\":2823:2856   */\n      slt\n        /* \"#utility.yul\":2820:2873   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":2869:2870   */\n      0x00\n        /* \"#utility.yul\":2866:2867   */\n      dup1\n        /* \"#utility.yul\":2859:2871   */\n      revert\n        /* \"#utility.yul\":2820:2873   */\n    tag_393:\n        /* \"#utility.yul\":2908:2917   */\n      dup6\n        /* \"#utility.yul\":2895:2918   */\n      calldataload\n        /* \"#utility.yul\":2927:2958   */\n      tag_394\n        /* \"#utility.yul\":2952:2957   */\n      dup2\n        /* \"#utility.yul\":2927:2958   */\n      tag_368\n      jump\t// in\n    tag_394:\n        /* \"#utility.yul\":2977:2982   */\n      swap5\n      pop\n        /* \"#utility.yul\":3034:3036   */\n      0x20\n        /* \"#utility.yul\":3019:3037   */\n      dup7\n      add\n        /* \"#utility.yul\":3006:3038   */\n      calldataload\n        /* \"#utility.yul\":3047:3080   */\n      tag_395\n        /* \"#utility.yul\":3006:3038   */\n      dup2\n        /* \"#utility.yul\":3047:3080   */\n      tag_368\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":3099:3106   */\n      swap4\n      pop\n        /* \"#utility.yul\":3179:3181   */\n      0x40\n        /* \"#utility.yul\":3164:3182   */\n      dup7\n      add\n        /* \"#utility.yul\":3151:3183   */\n      calldataload\n      swap3\n      pop\n        /* \"#utility.yul\":3260:3262   */\n      0x60\n        /* \"#utility.yul\":3245:3263   */\n      dup7\n      add\n        /* \"#utility.yul\":3232:3264   */\n      calldataload\n        /* \"#utility.yul\":3287:3305   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3276:3306   */\n      dup2\n      gt\n        /* \"#utility.yul\":3273:3323   */\n      iszero\n      tag_396\n      jumpi\n        /* \"#utility.yul\":3319:3320   */\n      0x00\n        /* \"#utility.yul\":3316:3317   */\n      dup1\n        /* \"#utility.yul\":3309:3321   */\n      revert\n        /* \"#utility.yul\":3273:3323   */\n    tag_396:\n        /* \"#utility.yul\":3342:3364   */\n      dup7\n      add\n        /* \"#utility.yul\":3395:3399   */\n      0x1f\n        /* \"#utility.yul\":3387:3400   */\n      dup2\n      add\n        /* \"#utility.yul\":3383:3410   */\n      dup9\n      sgt\n        /* \"#utility.yul\":3373:3428   */\n      tag_397\n      jumpi\n        /* \"#utility.yul\":3424:3425   */\n      0x00\n        /* \"#utility.yul\":3421:3422   */\n      dup1\n        /* \"#utility.yul\":3414:3426   */\n      revert\n        /* \"#utility.yul\":3373:3428   */\n    tag_397:\n        /* \"#utility.yul\":3464:3466   */\n      dup1\n        /* \"#utility.yul\":3451:3467   */\n      calldataload\n        /* \"#utility.yul\":3490:3508   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3482:3488   */\n      dup2\n        /* \"#utility.yul\":3479:3509   */\n      gt\n        /* \"#utility.yul\":3476:3526   */\n      iszero\n      tag_398\n      jumpi\n        /* \"#utility.yul\":3522:3523   */\n      0x00\n        /* \"#utility.yul\":3519:3520   */\n      dup1\n        /* \"#utility.yul\":3512:3524   */\n      revert\n        /* \"#utility.yul\":3476:3526   */\n    tag_398:\n        /* \"#utility.yul\":3567:3574   */\n      dup9\n        /* \"#utility.yul\":3562:3564   */\n      0x20\n        /* \"#utility.yul\":3553:3559   */\n      dup3\n        /* \"#utility.yul\":3549:3551   */\n      dup5\n        /* \"#utility.yul\":3545:3560   */\n      add\n        /* \"#utility.yul\":3541:3565   */\n      add\n        /* \"#utility.yul\":3538:3575   */\n      gt\n        /* \"#utility.yul\":3535:3592   */\n      iszero\n      tag_399\n      jumpi\n        /* \"#utility.yul\":3588:3589   */\n      0x00\n        /* \"#utility.yul\":3585:3586   */\n      dup1\n        /* \"#utility.yul\":3578:3590   */\n      revert\n        /* \"#utility.yul\":3535:3592   */\n    tag_399:\n        /* \"#utility.yul\":2641:3653   */\n      swap6\n      swap9\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3619:3621   */\n      0x20\n        /* \"#utility.yul\":3611:3622   */\n      add\n      swap2\n        /* \"#utility.yul\":3641:3647   */\n      swap1\n        /* \"#utility.yul\":2641:3653   */\n      jump\t// out\n        /* \"#utility.yul\":3658:3905   */\n    tag_68:\n        /* \"#utility.yul\":3717:3723   */\n      0x00\n        /* \"#utility.yul\":3770:3772   */\n      0x20\n        /* \"#utility.yul\":3758:3767   */\n      dup3\n        /* \"#utility.yul\":3749:3756   */\n      dup5\n        /* \"#utility.yul\":3745:3768   */\n      sub\n        /* \"#utility.yul\":3741:3773   */\n      slt\n        /* \"#utility.yul\":3738:3790   */\n      iszero\n      tag_401\n      jumpi\n        /* \"#utility.yul\":3786:3787   */\n      0x00\n        /* \"#utility.yul\":3783:3784   */\n      dup1\n        /* \"#utility.yul\":3776:3788   */\n      revert\n        /* \"#utility.yul\":3738:3790   */\n    tag_401:\n        /* \"#utility.yul\":3825:3834   */\n      dup2\n        /* \"#utility.yul\":3812:3835   */\n      calldataload\n        /* \"#utility.yul\":3844:3875   */\n      tag_229\n        /* \"#utility.yul\":3869:3874   */\n      dup2\n        /* \"#utility.yul\":3844:3875   */\n      tag_368\n      jump\t// in\n        /* \"#utility.yul\":3910:5148   */\n    tag_87:\n        /* \"#utility.yul\":4316:4319   */\n      0xff\n        /* \"#utility.yul\":4311:4314   */\n      0xf8\n        /* \"#utility.yul\":4307:4320   */\n      shl\n        /* \"#utility.yul\":4299:4305   */\n      dup9\n        /* \"#utility.yul\":4295:4321   */\n      and\n        /* \"#utility.yul\":4284:4293   */\n      dup2\n        /* \"#utility.yul\":4277:4322   */\n      mstore\n        /* \"#utility.yul\":4358:4361   */\n      0xe0\n        /* \"#utility.yul\":4353:4355   */\n      0x20\n        /* \"#utility.yul\":4342:4351   */\n      dup3\n        /* \"#utility.yul\":4338:4356   */\n      add\n        /* \"#utility.yul\":4331:4362   */\n      mstore\n        /* \"#utility.yul\":4258:4262   */\n      0x00\n        /* \"#utility.yul\":4385:4431   */\n      tag_404\n        /* \"#utility.yul\":4426:4429   */\n      0xe0\n        /* \"#utility.yul\":4415:4424   */\n      dup4\n        /* \"#utility.yul\":4411:4430   */\n      add\n        /* \"#utility.yul\":4403:4409   */\n      dup10\n        /* \"#utility.yul\":4385:4431   */\n      tag_367\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":4479:4488   */\n      dup3\n        /* \"#utility.yul\":4471:4477   */\n      dup2\n        /* \"#utility.yul\":4467:4489   */\n      sub\n        /* \"#utility.yul\":4462:4464   */\n      0x40\n        /* \"#utility.yul\":4451:4460   */\n      dup5\n        /* \"#utility.yul\":4447:4465   */\n      add\n        /* \"#utility.yul\":4440:4490   */\n      mstore\n        /* \"#utility.yul\":4513:4546   */\n      tag_405\n        /* \"#utility.yul\":4539:4545   */\n      dup2\n        /* \"#utility.yul\":4531:4537   */\n      dup10\n        /* \"#utility.yul\":4513:4546   */\n      tag_367\n      jump\t// in\n    tag_405:\n        /* \"#utility.yul\":4577:4579   */\n      0x60\n        /* \"#utility.yul\":4562:4580   */\n      dup5\n      add\n        /* \"#utility.yul\":4555:4589   */\n      dup9\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":4626:4658   */\n      dup8\n      and\n        /* \"#utility.yul\":4620:4623   */\n      0x80\n        /* \"#utility.yul\":4605:4624   */\n      dup6\n      add\n        /* \"#utility.yul\":4598:4659   */\n      mstore\n        /* \"#utility.yul\":4646:4649   */\n      0xa0\n        /* \"#utility.yul\":4675:4694   */\n      dup5\n      add\n        /* \"#utility.yul\":4668:4703   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":4740:4762   */\n      dup4\n      dup2\n      sub\n        /* \"#utility.yul\":4734:4737   */\n      0xc0\n        /* \"#utility.yul\":4719:4738   */\n      dup6\n      add\n        /* \"#utility.yul\":4712:4763   */\n      mstore\n        /* \"#utility.yul\":4812:4825   */\n      dup5\n      mload\n        /* \"#utility.yul\":4834:4856   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4884:4886   */\n      0x20\n        /* \"#utility.yul\":4910:4925   */\n      dup1\n      dup8\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":4872:4887   */\n      swap1\n      swap2\n      add\n      swap1\n      0x00\n        /* \"#utility.yul\":4953:5122   */\n    tag_406:\n        /* \"#utility.yul\":4967:4973   */\n      dup2\n        /* \"#utility.yul\":4964:4965   */\n      dup2\n        /* \"#utility.yul\":4961:4974   */\n      lt\n        /* \"#utility.yul\":4953:5122   */\n      iszero\n      tag_408\n      jumpi\n        /* \"#utility.yul\":5028:5041   */\n      dup4\n      mload\n        /* \"#utility.yul\":5016:5042   */\n      dup4\n      mstore\n        /* \"#utility.yul\":5071:5073   */\n      0x20\n        /* \"#utility.yul\":5097:5112   */\n      swap4\n      dup5\n      add\n      swap4\n        /* \"#utility.yul\":5062:5074   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":4989:4990   */\n      0x01\n        /* \"#utility.yul\":4982:4991   */\n      add\n        /* \"#utility.yul\":4953:5122   */\n      jump(tag_406)\n    tag_408:\n      pop\n        /* \"#utility.yul\":5139:5142   */\n      swap1\n      swap12\n        /* \"#utility.yul\":3910:5148   */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5361:6398   */\n    tag_101:\n        /* \"#utility.yul\":5472:5478   */\n      0x00\n        /* \"#utility.yul\":5480:5486   */\n      dup1\n        /* \"#utility.yul\":5488:5494   */\n      0x00\n        /* \"#utility.yul\":5496:5502   */\n      dup1\n        /* \"#utility.yul\":5504:5510   */\n      0x00\n        /* \"#utility.yul\":5512:5518   */\n      dup1\n        /* \"#utility.yul\":5520:5526   */\n      0x00\n        /* \"#utility.yul\":5573:5576   */\n      0xe0\n        /* \"#utility.yul\":5561:5570   */\n      dup9\n        /* \"#utility.yul\":5552:5559   */\n      dup11\n        /* \"#utility.yul\":5548:5571   */\n      sub\n        /* \"#utility.yul\":5544:5577   */\n      slt\n        /* \"#utility.yul\":5541:5594   */\n      iszero\n      tag_411\n      jumpi\n        /* \"#utility.yul\":5590:5591   */\n      0x00\n        /* \"#utility.yul\":5587:5588   */\n      dup1\n        /* \"#utility.yul\":5580:5592   */\n      revert\n        /* \"#utility.yul\":5541:5594   */\n    tag_411:\n        /* \"#utility.yul\":5629:5638   */\n      dup8\n        /* \"#utility.yul\":5616:5639   */\n      calldataload\n        /* \"#utility.yul\":5648:5679   */\n      tag_412\n        /* \"#utility.yul\":5673:5678   */\n      dup2\n        /* \"#utility.yul\":5648:5679   */\n      tag_368\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":5698:5703   */\n      swap7\n      pop\n        /* \"#utility.yul\":5755:5757   */\n      0x20\n        /* \"#utility.yul\":5740:5758   */\n      dup9\n      add\n        /* \"#utility.yul\":5727:5759   */\n      calldataload\n        /* \"#utility.yul\":5768:5801   */\n      tag_413\n        /* \"#utility.yul\":5727:5759   */\n      dup2\n        /* \"#utility.yul\":5768:5801   */\n      tag_368\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":5820:5827   */\n      swap6\n      pop\n        /* \"#utility.yul\":5900:5902   */\n      0x40\n        /* \"#utility.yul\":5885:5903   */\n      dup9\n      add\n        /* \"#utility.yul\":5872:5904   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":6003:6005   */\n      0x60\n        /* \"#utility.yul\":5988:6006   */\n      dup9\n      add\n        /* \"#utility.yul\":5975:6007   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":6085:6088   */\n      0x80\n        /* \"#utility.yul\":6070:6089   */\n      dup9\n      add\n        /* \"#utility.yul\":6057:6090   */\n      calldataload\n        /* \"#utility.yul\":6134:6138   */\n      0xff\n        /* \"#utility.yul\":6121:6139   */\n      dup2\n      and\n        /* \"#utility.yul\":6109:6140   */\n      dup2\n      eq\n        /* \"#utility.yul\":6099:6158   */\n      tag_414\n      jumpi\n        /* \"#utility.yul\":6154:6155   */\n      0x00\n        /* \"#utility.yul\":6151:6152   */\n      dup1\n        /* \"#utility.yul\":6144:6156   */\n      revert\n        /* \"#utility.yul\":6099:6158   */\n    tag_414:\n        /* \"#utility.yul\":5361:6398   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":6177:6184   */\n      swap5\n        /* \"#utility.yul\":6257:6260   */\n      0xa0\n        /* \"#utility.yul\":6242:6261   */\n      dup5\n      add\n        /* \"#utility.yul\":6229:6262   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":6361:6364   */\n      0xc0\n        /* \"#utility.yul\":6346:6365   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":6333:6366   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":5361:6398   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6403:6791   */\n    tag_109:\n        /* \"#utility.yul\":6471:6477   */\n      0x00\n        /* \"#utility.yul\":6479:6485   */\n      dup1\n        /* \"#utility.yul\":6532:6534   */\n      0x40\n        /* \"#utility.yul\":6520:6529   */\n      dup4\n        /* \"#utility.yul\":6511:6518   */\n      dup6\n        /* \"#utility.yul\":6507:6530   */\n      sub\n        /* \"#utility.yul\":6503:6535   */\n      slt\n        /* \"#utility.yul\":6500:6552   */\n      iszero\n      tag_416\n      jumpi\n        /* \"#utility.yul\":6548:6549   */\n      0x00\n        /* \"#utility.yul\":6545:6546   */\n      dup1\n        /* \"#utility.yul\":6538:6550   */\n      revert\n        /* \"#utility.yul\":6500:6552   */\n    tag_416:\n        /* \"#utility.yul\":6587:6596   */\n      dup3\n        /* \"#utility.yul\":6574:6597   */\n      calldataload\n        /* \"#utility.yul\":6606:6637   */\n      tag_417\n        /* \"#utility.yul\":6631:6636   */\n      dup2\n        /* \"#utility.yul\":6606:6637   */\n      tag_368\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":6656:6661   */\n      swap2\n      pop\n        /* \"#utility.yul\":6713:6715   */\n      0x20\n        /* \"#utility.yul\":6698:6716   */\n      dup4\n      add\n        /* \"#utility.yul\":6685:6717   */\n      calldataload\n        /* \"#utility.yul\":6726:6759   */\n      tag_418\n        /* \"#utility.yul\":6685:6717   */\n      dup2\n        /* \"#utility.yul\":6726:6759   */\n      tag_368\n      jump\t// in\n    tag_418:\n        /* \"#utility.yul\":6778:6785   */\n      dup1\n        /* \"#utility.yul\":6768:6785   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":6403:6791   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6796:7176   */\n    tag_117:\n        /* \"#utility.yul\":6875:6876   */\n      0x01\n        /* \"#utility.yul\":6871:6883   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":6918:6930   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6939:7000   */\n      tag_420\n      jumpi\n        /* \"#utility.yul\":6993:6997   */\n      0x7f\n        /* \"#utility.yul\":6985:6991   */\n      dup3\n        /* \"#utility.yul\":6981:6998   */\n      and\n        /* \"#utility.yul\":6971:6998   */\n      swap2\n      pop\n        /* \"#utility.yul\":6939:7000   */\n    tag_420:\n        /* \"#utility.yul\":7046:7048   */\n      0x20\n        /* \"#utility.yul\":7038:7044   */\n      dup3\n        /* \"#utility.yul\":7035:7049   */\n      lt\n        /* \"#utility.yul\":7015:7033   */\n      dup2\n        /* \"#utility.yul\":7012:7050   */\n      sub\n        /* \"#utility.yul\":7009:7170   */\n      tag_421\n      jumpi\n        /* \"#utility.yul\":7092:7102   */\n      0x4e487b71\n        /* \"#utility.yul\":7087:7090   */\n      0xe0\n        /* \"#utility.yul\":7083:7103   */\n      shl\n        /* \"#utility.yul\":7080:7081   */\n      0x00\n        /* \"#utility.yul\":7073:7104   */\n      mstore\n        /* \"#utility.yul\":7127:7131   */\n      0x22\n        /* \"#utility.yul\":7124:7125   */\n      0x04\n        /* \"#utility.yul\":7117:7132   */\n      mstore\n        /* \"#utility.yul\":7155:7159   */\n      0x24\n        /* \"#utility.yul\":7152:7153   */\n      0x00\n        /* \"#utility.yul\":7145:7160   */\n      revert\n        /* \"#utility.yul\":7009:7170   */\n    tag_421:\n      pop\n        /* \"#utility.yul\":6796:7176   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7181:7911   */\n    tag_153:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7450:7482   */\n      dup8\n      dup2\n      and\n        /* \"#utility.yul\":7432:7483   */\n      dup3\n      mstore\n        /* \"#utility.yul\":7519:7551   */\n      dup7\n      and\n        /* \"#utility.yul\":7514:7516   */\n      0x20\n        /* \"#utility.yul\":7499:7517   */\n      dup3\n      add\n        /* \"#utility.yul\":7492:7552   */\n      mstore\n        /* \"#utility.yul\":7583:7585   */\n      0x40\n        /* \"#utility.yul\":7568:7586   */\n      dup2\n      add\n        /* \"#utility.yul\":7561:7595   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":7626:7628   */\n      0x60\n        /* \"#utility.yul\":7611:7629   */\n      dup2\n      add\n        /* \"#utility.yul\":7604:7638   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":7470:7473   */\n      0xa0\n        /* \"#utility.yul\":7669:7672   */\n      0x80\n        /* \"#utility.yul\":7654:7673   */\n      dup3\n      add\n        /* \"#utility.yul\":7647:7679   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":7695:7714   */\n      dup2\n      add\n        /* \"#utility.yul\":7688:7723   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":7716:7722   */\n      dup2\n        /* \"#utility.yul\":7766:7772   */\n      dup4\n        /* \"#utility.yul\":7760:7763   */\n      0xc0\n        /* \"#utility.yul\":7745:7764   */\n      dup4\n      add\n        /* \"#utility.yul\":7732:7781   */\n      calldatacopy\n        /* \"#utility.yul\":7831:7832   */\n      0x00\n        /* \"#utility.yul\":7801:7823   */\n      dup2\n      dup4\n      add\n        /* \"#utility.yul\":7825:7828   */\n      0xc0\n        /* \"#utility.yul\":7797:7829   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":7790:7833   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":7894:7896   */\n      0x1f\n        /* \"#utility.yul\":7873:7888   */\n      swap1\n      swap3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":7869:7898   */\n      and\n        /* \"#utility.yul\":7854:7899   */\n      add\n        /* \"#utility.yul\":7850:7905   */\n      add\n      swap6\n        /* \"#utility.yul\":7181:7911   */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7916:8100   */\n    tag_157:\n        /* \"#utility.yul\":7986:7992   */\n      0x00\n        /* \"#utility.yul\":8039:8041   */\n      0x20\n        /* \"#utility.yul\":8027:8036   */\n      dup3\n        /* \"#utility.yul\":8018:8025   */\n      dup5\n        /* \"#utility.yul\":8014:8037   */\n      sub\n        /* \"#utility.yul\":8010:8042   */\n      slt\n        /* \"#utility.yul\":8007:8059   */\n      iszero\n      tag_424\n      jumpi\n        /* \"#utility.yul\":8055:8056   */\n      0x00\n        /* \"#utility.yul\":8052:8053   */\n      dup1\n        /* \"#utility.yul\":8045:8057   */\n      revert\n        /* \"#utility.yul\":8007:8059   */\n    tag_424:\n      pop\n        /* \"#utility.yul\":8078:8094   */\n      mload\n      swap2\n        /* \"#utility.yul\":7916:8100   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8105:8232   */\n    tag_369:\n        /* \"#utility.yul\":8166:8176   */\n      0x4e487b71\n        /* \"#utility.yul\":8161:8164   */\n      0xe0\n        /* \"#utility.yul\":8157:8177   */\n      shl\n        /* \"#utility.yul\":8154:8155   */\n      0x00\n        /* \"#utility.yul\":8147:8178   */\n      mstore\n        /* \"#utility.yul\":8197:8201   */\n      0x11\n        /* \"#utility.yul\":8194:8195   */\n      0x04\n        /* \"#utility.yul\":8187:8202   */\n      mstore\n        /* \"#utility.yul\":8221:8225   */\n      0x24\n        /* \"#utility.yul\":8218:8219   */\n      0x00\n        /* \"#utility.yul\":8211:8226   */\n      revert\n        /* \"#utility.yul\":8237:8362   */\n    tag_164:\n        /* \"#utility.yul\":8302:8311   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8323:8333   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":8320:8356   */\n      iszero\n      tag_122\n      jumpi\n        /* \"#utility.yul\":8336:8354   */\n      tag_122\n      tag_369\n      jump\t// in\n        /* \"#utility.yul\":8367:8495   */\n    tag_177:\n        /* \"#utility.yul\":8434:8443   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":8455:8466   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":8452:8489   */\n      iszero\n      tag_122\n      jumpi\n        /* \"#utility.yul\":8469:8487   */\n      tag_122\n      tag_369\n      jump\t// in\n        /* \"#utility.yul\":10776:10903   */\n    tag_335:\n        /* \"#utility.yul\":10837:10847   */\n      0x4e487b71\n        /* \"#utility.yul\":10832:10835   */\n      0xe0\n        /* \"#utility.yul\":10828:10848   */\n      shl\n        /* \"#utility.yul\":10825:10826   */\n      0x00\n        /* \"#utility.yul\":10818:10849   */\n      mstore\n        /* \"#utility.yul\":10868:10872   */\n      0x21\n        /* \"#utility.yul\":10865:10866   */\n      0x04\n        /* \"#utility.yul\":10858:10873   */\n      mstore\n        /* \"#utility.yul\":10892:10896   */\n      0x24\n        /* \"#utility.yul\":10889:10890   */\n      0x00\n        /* \"#utility.yul\":10882:10897   */\n      revert\n\n    auxdata: 0xa2646970667358221220e8003806c664f973970dc26111efe79f5feae625b4fc2a953dcfbb809778228b64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1300": {
									"entryPoint": null,
									"id": 1300,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_2592": {
									"entryPoint": null,
									"id": 2592,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3988": {
									"entryPoint": null,
									"id": 3988,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_420": {
									"entryPoint": null,
									"id": 420,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2639": {
									"entryPoint": null,
									"id": 2639,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_146": {
									"entryPoint": 434,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getStringSlot_1869": {
									"entryPoint": null,
									"id": 1869,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1723": {
									"entryPoint": 516,
									"id": 1723,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1625": {
									"entryPoint": 567,
									"id": 1625,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 629,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1026,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 757,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 1104,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 836,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 699,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 677,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:4483:23",
										"nodeType": "YulBlock",
										"src": "0:4483:23",
										"statements": [
											{
												"nativeSrc": "6:3:23",
												"nodeType": "YulBlock",
												"src": "6:3:23",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "95:209:23",
													"nodeType": "YulBlock",
													"src": "95:209:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "141:16:23",
																"nodeType": "YulBlock",
																"src": "141:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "150:1:23",
																					"nodeType": "YulLiteral",
																					"src": "150:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "153:1:23",
																					"nodeType": "YulLiteral",
																					"src": "153:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "143:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:23"
																			},
																			"nativeSrc": "143:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:23"
																		},
																		"nativeSrc": "143:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "116:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "125:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "112:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:23"
																		},
																		"nativeSrc": "112:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "137:2:23",
																		"nodeType": "YulLiteral",
																		"src": "137:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "108:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:23"
																},
																"nativeSrc": "108:32:23",
																"nodeType": "YulFunctionCall",
																"src": "108:32:23"
															},
															"nativeSrc": "105:52:23",
															"nodeType": "YulIf",
															"src": "105:52:23"
														},
														{
															"nativeSrc": "166:29:23",
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "185:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "179:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:23"
																},
																"nativeSrc": "179:16:23",
																"nodeType": "YulFunctionCall",
																"src": "179:16:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "170:5:23",
																	"nodeType": "YulTypedName",
																	"src": "170:5:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "258:16:23",
																"nodeType": "YulBlock",
																"src": "258:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "267:1:23",
																					"nodeType": "YulLiteral",
																					"src": "267:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "270:1:23",
																					"nodeType": "YulLiteral",
																					"src": "270:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "260:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:23"
																			},
																			"nativeSrc": "260:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:23"
																		},
																		"nativeSrc": "260:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "217:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "228:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:23"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "243:3:23",
																										"nodeType": "YulLiteral",
																										"src": "243:3:23",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "248:1:23",
																										"nodeType": "YulLiteral",
																										"src": "248:1:23",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "239:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:23"
																								},
																								"nativeSrc": "239:11:23",
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "252:1:23",
																								"nodeType": "YulLiteral",
																								"src": "252:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "235:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:23"
																						},
																						"nativeSrc": "235:19:23",
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:23"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "224:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:23"
																				},
																				"nativeSrc": "224:31:23",
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "214:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:23"
																		},
																		"nativeSrc": "214:42:23",
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "207:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:23"
																},
																"nativeSrc": "207:50:23",
																"nodeType": "YulFunctionCall",
																"src": "207:50:23"
															},
															"nativeSrc": "204:70:23",
															"nodeType": "YulIf",
															"src": "204:70:23"
														},
														{
															"nativeSrc": "283:15:23",
															"nodeType": "YulAssignment",
															"src": "283:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "293:5:23",
																"nodeType": "YulIdentifier",
																"src": "293:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "283:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "14:290:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "61:9:23",
														"nodeType": "YulTypedName",
														"src": "61:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "72:7:23",
														"nodeType": "YulTypedName",
														"src": "72:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "84:6:23",
														"nodeType": "YulTypedName",
														"src": "84:6:23",
														"type": ""
													}
												],
												"src": "14:290:23"
											},
											{
												"body": {
													"nativeSrc": "341:95:23",
													"nodeType": "YulBlock",
													"src": "341:95:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "358:1:23",
																		"nodeType": "YulLiteral",
																		"src": "358:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "365:3:23",
																				"nodeType": "YulLiteral",
																				"src": "365:3:23",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "370:10:23",
																				"nodeType": "YulLiteral",
																				"src": "370:10:23",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "361:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "361:3:23"
																		},
																		"nativeSrc": "361:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "361:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "351:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "351:6:23"
																},
																"nativeSrc": "351:31:23",
																"nodeType": "YulFunctionCall",
																"src": "351:31:23"
															},
															"nativeSrc": "351:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "351:31:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "398:1:23",
																		"nodeType": "YulLiteral",
																		"src": "398:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "401:4:23",
																		"nodeType": "YulLiteral",
																		"src": "401:4:23",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "391:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "391:6:23"
																},
																"nativeSrc": "391:15:23",
																"nodeType": "YulFunctionCall",
																"src": "391:15:23"
															},
															"nativeSrc": "391:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "391:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "422:1:23",
																		"nodeType": "YulLiteral",
																		"src": "422:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "425:4:23",
																		"nodeType": "YulLiteral",
																		"src": "425:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "415:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "415:6:23"
																},
																"nativeSrc": "415:15:23",
																"nodeType": "YulFunctionCall",
																"src": "415:15:23"
															},
															"nativeSrc": "415:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "415:15:23"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "309:127:23",
												"nodeType": "YulFunctionDefinition",
												"src": "309:127:23"
											},
											{
												"body": {
													"nativeSrc": "496:325:23",
													"nodeType": "YulBlock",
													"src": "496:325:23",
													"statements": [
														{
															"nativeSrc": "506:22:23",
															"nodeType": "YulAssignment",
															"src": "506:22:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "520:1:23",
																		"nodeType": "YulLiteral",
																		"src": "520:1:23",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "523:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "523:4:23"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "516:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "516:3:23"
																},
																"nativeSrc": "516:12:23",
																"nodeType": "YulFunctionCall",
																"src": "516:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "506:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "506:6:23"
																}
															]
														},
														{
															"nativeSrc": "537:38:23",
															"nodeType": "YulVariableDeclaration",
															"src": "537:38:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "567:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "567:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "573:1:23",
																		"nodeType": "YulLiteral",
																		"src": "573:1:23",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "563:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "563:3:23"
																},
																"nativeSrc": "563:12:23",
																"nodeType": "YulFunctionCall",
																"src": "563:12:23"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "541:18:23",
																	"nodeType": "YulTypedName",
																	"src": "541:18:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "614:31:23",
																"nodeType": "YulBlock",
																"src": "614:31:23",
																"statements": [
																	{
																		"nativeSrc": "616:27:23",
																		"nodeType": "YulAssignment",
																		"src": "616:27:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "630:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "630:6:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "638:4:23",
																					"nodeType": "YulLiteral",
																					"src": "638:4:23",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "626:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "626:3:23"
																			},
																			"nativeSrc": "626:17:23",
																			"nodeType": "YulFunctionCall",
																			"src": "626:17:23"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "616:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "616:6:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "594:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "594:18:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "587:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "587:6:23"
																},
																"nativeSrc": "587:26:23",
																"nodeType": "YulFunctionCall",
																"src": "587:26:23"
															},
															"nativeSrc": "584:61:23",
															"nodeType": "YulIf",
															"src": "584:61:23"
														},
														{
															"body": {
																"nativeSrc": "704:111:23",
																"nodeType": "YulBlock",
																"src": "704:111:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "725:1:23",
																					"nodeType": "YulLiteral",
																					"src": "725:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "732:3:23",
																							"nodeType": "YulLiteral",
																							"src": "732:3:23",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "737:10:23",
																							"nodeType": "YulLiteral",
																							"src": "737:10:23",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "728:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "728:3:23"
																					},
																					"nativeSrc": "728:20:23",
																					"nodeType": "YulFunctionCall",
																					"src": "728:20:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "718:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "718:6:23"
																			},
																			"nativeSrc": "718:31:23",
																			"nodeType": "YulFunctionCall",
																			"src": "718:31:23"
																		},
																		"nativeSrc": "718:31:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "718:31:23"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "769:1:23",
																					"nodeType": "YulLiteral",
																					"src": "769:1:23",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "772:4:23",
																					"nodeType": "YulLiteral",
																					"src": "772:4:23",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "762:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "762:6:23"
																			},
																			"nativeSrc": "762:15:23",
																			"nodeType": "YulFunctionCall",
																			"src": "762:15:23"
																		},
																		"nativeSrc": "762:15:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "762:15:23"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "797:1:23",
																					"nodeType": "YulLiteral",
																					"src": "797:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "800:4:23",
																					"nodeType": "YulLiteral",
																					"src": "800:4:23",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "790:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "790:6:23"
																			},
																			"nativeSrc": "790:15:23",
																			"nodeType": "YulFunctionCall",
																			"src": "790:15:23"
																		},
																		"nativeSrc": "790:15:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "790:15:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "660:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "660:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "683:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "683:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "691:2:23",
																				"nodeType": "YulLiteral",
																				"src": "691:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "680:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "680:2:23"
																		},
																		"nativeSrc": "680:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "680:14:23"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "657:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "657:2:23"
																},
																"nativeSrc": "657:38:23",
																"nodeType": "YulFunctionCall",
																"src": "657:38:23"
															},
															"nativeSrc": "654:161:23",
															"nodeType": "YulIf",
															"src": "654:161:23"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "441:380:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "476:4:23",
														"nodeType": "YulTypedName",
														"src": "476:4:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "485:6:23",
														"nodeType": "YulTypedName",
														"src": "485:6:23",
														"type": ""
													}
												],
												"src": "441:380:23"
											},
											{
												"body": {
													"nativeSrc": "882:65:23",
													"nodeType": "YulBlock",
													"src": "882:65:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "899:1:23",
																		"nodeType": "YulLiteral",
																		"src": "899:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "902:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "902:3:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "892:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "892:6:23"
																},
																"nativeSrc": "892:14:23",
																"nodeType": "YulFunctionCall",
																"src": "892:14:23"
															},
															"nativeSrc": "892:14:23",
															"nodeType": "YulExpressionStatement",
															"src": "892:14:23"
														},
														{
															"nativeSrc": "915:26:23",
															"nodeType": "YulAssignment",
															"src": "915:26:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "933:1:23",
																		"nodeType": "YulLiteral",
																		"src": "933:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "936:4:23",
																		"nodeType": "YulLiteral",
																		"src": "936:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "923:9:23",
																	"nodeType": "YulIdentifier",
																	"src": "923:9:23"
																},
																"nativeSrc": "923:18:23",
																"nodeType": "YulFunctionCall",
																"src": "923:18:23"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "915:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "915:4:23"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "826:121:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "865:3:23",
														"nodeType": "YulTypedName",
														"src": "865:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "873:4:23",
														"nodeType": "YulTypedName",
														"src": "873:4:23",
														"type": ""
													}
												],
												"src": "826:121:23"
											},
											{
												"body": {
													"nativeSrc": "1033:437:23",
													"nodeType": "YulBlock",
													"src": "1033:437:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "1066:398:23",
																"nodeType": "YulBlock",
																"src": "1066:398:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1087:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1087:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "1090:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "1090:5:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "1080:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "1080:6:23"
																			},
																			"nativeSrc": "1080:16:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1080:16:23"
																		},
																		"nativeSrc": "1080:16:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1080:16:23"
																	},
																	{
																		"nativeSrc": "1109:30:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1109:30:23",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1131:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1131:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1134:4:23",
																					"nodeType": "YulLiteral",
																					"src": "1134:4:23",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "1121:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1121:9:23"
																			},
																			"nativeSrc": "1121:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1121:18:23"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "1113:4:23",
																				"nodeType": "YulTypedName",
																				"src": "1113:4:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1152:57:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1152:57:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1175:4:23",
																					"nodeType": "YulIdentifier",
																					"src": "1175:4:23"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1185:1:23",
																							"nodeType": "YulLiteral",
																							"src": "1185:1:23",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "1192:10:23",
																									"nodeType": "YulIdentifier",
																									"src": "1192:10:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1204:2:23",
																									"nodeType": "YulLiteral",
																									"src": "1204:2:23",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1188:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "1188:3:23"
																							},
																							"nativeSrc": "1188:19:23",
																							"nodeType": "YulFunctionCall",
																							"src": "1188:19:23"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1181:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "1181:3:23"
																					},
																					"nativeSrc": "1181:27:23",
																					"nodeType": "YulFunctionCall",
																					"src": "1181:27:23"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1171:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "1171:3:23"
																			},
																			"nativeSrc": "1171:38:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1171:38:23"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "1156:11:23",
																				"nodeType": "YulTypedName",
																				"src": "1156:11:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1246:23:23",
																			"nodeType": "YulBlock",
																			"src": "1246:23:23",
																			"statements": [
																				{
																					"nativeSrc": "1248:19:23",
																					"nodeType": "YulAssignment",
																					"src": "1248:19:23",
																					"value": {
																						"name": "data",
																						"nativeSrc": "1263:4:23",
																						"nodeType": "YulIdentifier",
																						"src": "1263:4:23"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "1248:11:23",
																							"nodeType": "YulIdentifier",
																							"src": "1248:11:23"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "1228:10:23",
																					"nodeType": "YulIdentifier",
																					"src": "1228:10:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1240:4:23",
																					"nodeType": "YulLiteral",
																					"src": "1240:4:23",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1225:2:23",
																				"nodeType": "YulIdentifier",
																				"src": "1225:2:23"
																			},
																			"nativeSrc": "1225:20:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1225:20:23"
																		},
																		"nativeSrc": "1222:47:23",
																		"nodeType": "YulIf",
																		"src": "1222:47:23"
																	},
																	{
																		"nativeSrc": "1282:41:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1282:41:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1296:4:23",
																					"nodeType": "YulIdentifier",
																					"src": "1296:4:23"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1306:1:23",
																							"nodeType": "YulLiteral",
																							"src": "1306:1:23",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "1313:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "1313:3:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1318:2:23",
																									"nodeType": "YulLiteral",
																									"src": "1318:2:23",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1309:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "1309:3:23"
																							},
																							"nativeSrc": "1309:12:23",
																							"nodeType": "YulFunctionCall",
																							"src": "1309:12:23"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1302:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "1302:3:23"
																					},
																					"nativeSrc": "1302:20:23",
																					"nodeType": "YulFunctionCall",
																					"src": "1302:20:23"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1292:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "1292:3:23"
																			},
																			"nativeSrc": "1292:31:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1292:31:23"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "1286:2:23",
																				"nodeType": "YulTypedName",
																				"src": "1286:2:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1336:24:23",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1336:24:23",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "1349:11:23",
																			"nodeType": "YulIdentifier",
																			"src": "1349:11:23"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "1340:5:23",
																				"nodeType": "YulTypedName",
																				"src": "1340:5:23",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1434:20:23",
																			"nodeType": "YulBlock",
																			"src": "1434:20:23",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1443:5:23",
																								"nodeType": "YulIdentifier",
																								"src": "1443:5:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1450:1:23",
																								"nodeType": "YulLiteral",
																								"src": "1450:1:23",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "1436:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "1436:6:23"
																						},
																						"nativeSrc": "1436:16:23",
																						"nodeType": "YulFunctionCall",
																						"src": "1436:16:23"
																					},
																					"nativeSrc": "1436:16:23",
																					"nodeType": "YulExpressionStatement",
																					"src": "1436:16:23"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "1384:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "1384:5:23"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "1391:2:23",
																					"nodeType": "YulIdentifier",
																					"src": "1391:2:23"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1381:2:23",
																				"nodeType": "YulIdentifier",
																				"src": "1381:2:23"
																			},
																			"nativeSrc": "1381:13:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1381:13:23"
																		},
																		"nativeSrc": "1373:81:23",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "1395:26:23",
																			"nodeType": "YulBlock",
																			"src": "1395:26:23",
																			"statements": [
																				{
																					"nativeSrc": "1397:22:23",
																					"nodeType": "YulAssignment",
																					"src": "1397:22:23",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1410:5:23",
																								"nodeType": "YulIdentifier",
																								"src": "1410:5:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1417:1:23",
																								"nodeType": "YulLiteral",
																								"src": "1417:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "1406:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "1406:3:23"
																						},
																						"nativeSrc": "1406:13:23",
																						"nodeType": "YulFunctionCall",
																						"src": "1406:13:23"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "1397:5:23",
																							"nodeType": "YulIdentifier",
																							"src": "1397:5:23"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "1377:3:23",
																			"nodeType": "YulBlock",
																			"src": "1377:3:23",
																			"statements": []
																		},
																		"src": "1373:81:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "1049:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "1049:3:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1054:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1054:2:23",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1046:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "1046:2:23"
																},
																"nativeSrc": "1046:11:23",
																"nodeType": "YulFunctionCall",
																"src": "1046:11:23"
															},
															"nativeSrc": "1043:421:23",
															"nodeType": "YulIf",
															"src": "1043:421:23"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "952:518:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "1005:5:23",
														"nodeType": "YulTypedName",
														"src": "1005:5:23",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1012:3:23",
														"nodeType": "YulTypedName",
														"src": "1012:3:23",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "1017:10:23",
														"nodeType": "YulTypedName",
														"src": "1017:10:23",
														"type": ""
													}
												],
												"src": "952:518:23"
											},
											{
												"body": {
													"nativeSrc": "1560:81:23",
													"nodeType": "YulBlock",
													"src": "1560:81:23",
													"statements": [
														{
															"nativeSrc": "1570:65:23",
															"nodeType": "YulAssignment",
															"src": "1570:65:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "1585:4:23",
																				"nodeType": "YulIdentifier",
																				"src": "1585:4:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1603:1:23",
																										"nodeType": "YulLiteral",
																										"src": "1603:1:23",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "1606:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "1606:3:23"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1599:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "1599:3:23"
																								},
																								"nativeSrc": "1599:11:23",
																								"nodeType": "YulFunctionCall",
																								"src": "1599:11:23"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1616:1:23",
																										"nodeType": "YulLiteral",
																										"src": "1616:1:23",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "1612:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "1612:3:23"
																								},
																								"nativeSrc": "1612:6:23",
																								"nodeType": "YulFunctionCall",
																								"src": "1612:6:23"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "1595:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "1595:3:23"
																						},
																						"nativeSrc": "1595:24:23",
																						"nodeType": "YulFunctionCall",
																						"src": "1595:24:23"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "1591:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "1591:3:23"
																				},
																				"nativeSrc": "1591:29:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1591:29:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1581:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1581:3:23"
																		},
																		"nativeSrc": "1581:40:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1581:40:23"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1627:1:23",
																				"nodeType": "YulLiteral",
																				"src": "1627:1:23",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "1630:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "1630:3:23"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1623:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1623:3:23"
																		},
																		"nativeSrc": "1623:11:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1623:11:23"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1578:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "1578:2:23"
																},
																"nativeSrc": "1578:57:23",
																"nodeType": "YulFunctionCall",
																"src": "1578:57:23"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "1570:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1570:4:23"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "1475:166:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1537:4:23",
														"nodeType": "YulTypedName",
														"src": "1537:4:23",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1543:3:23",
														"nodeType": "YulTypedName",
														"src": "1543:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "1551:4:23",
														"nodeType": "YulTypedName",
														"src": "1551:4:23",
														"type": ""
													}
												],
												"src": "1475:166:23"
											},
											{
												"body": {
													"nativeSrc": "1742:1203:23",
													"nodeType": "YulBlock",
													"src": "1742:1203:23",
													"statements": [
														{
															"nativeSrc": "1752:24:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1752:24:23",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "1772:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "1772:3:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1766:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "1766:5:23"
																},
																"nativeSrc": "1766:10:23",
																"nodeType": "YulFunctionCall",
																"src": "1766:10:23"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "1756:6:23",
																	"nodeType": "YulTypedName",
																	"src": "1756:6:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1819:22:23",
																"nodeType": "YulBlock",
																"src": "1819:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1821:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "1821:16:23"
																			},
																			"nativeSrc": "1821:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1821:18:23"
																		},
																		"nativeSrc": "1821:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1821:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1791:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1791:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1807:2:23",
																						"nodeType": "YulLiteral",
																						"src": "1807:2:23",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1811:1:23",
																						"nodeType": "YulLiteral",
																						"src": "1811:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1803:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "1803:3:23"
																				},
																				"nativeSrc": "1803:10:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1803:10:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1815:1:23",
																				"nodeType": "YulLiteral",
																				"src": "1815:1:23",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1799:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1799:3:23"
																		},
																		"nativeSrc": "1799:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1799:18:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1788:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "1788:2:23"
																},
																"nativeSrc": "1788:30:23",
																"nodeType": "YulFunctionCall",
																"src": "1788:30:23"
															},
															"nativeSrc": "1785:56:23",
															"nodeType": "YulIf",
															"src": "1785:56:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1894:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "1894:4:23"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "1932:4:23",
																						"nodeType": "YulIdentifier",
																						"src": "1932:4:23"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "1926:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "1926:5:23"
																				},
																				"nativeSrc": "1926:11:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1926:11:23"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "1900:25:23",
																			"nodeType": "YulIdentifier",
																			"src": "1900:25:23"
																		},
																		"nativeSrc": "1900:38:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1900:38:23"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "1940:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1940:6:23"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "1850:43:23",
																	"nodeType": "YulIdentifier",
																	"src": "1850:43:23"
																},
																"nativeSrc": "1850:97:23",
																"nodeType": "YulFunctionCall",
																"src": "1850:97:23"
															},
															"nativeSrc": "1850:97:23",
															"nodeType": "YulExpressionStatement",
															"src": "1850:97:23"
														},
														{
															"nativeSrc": "1956:18:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1956:18:23",
															"value": {
																"kind": "number",
																"nativeSrc": "1973:1:23",
																"nodeType": "YulLiteral",
																"src": "1973:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1960:9:23",
																	"nodeType": "YulTypedName",
																	"src": "1960:9:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1983:17:23",
															"nodeType": "YulAssignment",
															"src": "1983:17:23",
															"value": {
																"kind": "number",
																"nativeSrc": "1996:4:23",
																"nodeType": "YulLiteral",
																"src": "1996:4:23",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1983:9:23",
																	"nodeType": "YulIdentifier",
																	"src": "1983:9:23"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "2046:642:23",
																		"nodeType": "YulBlock",
																		"src": "2046:642:23",
																		"statements": [
																			{
																				"nativeSrc": "2060:35:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2060:35:23",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "2079:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "2079:6:23"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "2091:2:23",
																									"nodeType": "YulLiteral",
																									"src": "2091:2:23",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2087:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "2087:3:23"
																							},
																							"nativeSrc": "2087:7:23",
																							"nodeType": "YulFunctionCall",
																							"src": "2087:7:23"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "2075:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "2075:3:23"
																					},
																					"nativeSrc": "2075:20:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2075:20:23"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "2064:7:23",
																						"nodeType": "YulTypedName",
																						"src": "2064:7:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "2108:49:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2108:49:23",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2152:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "2152:4:23"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "2122:29:23",
																						"nodeType": "YulIdentifier",
																						"src": "2122:29:23"
																					},
																					"nativeSrc": "2122:35:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2122:35:23"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "2112:6:23",
																						"nodeType": "YulTypedName",
																						"src": "2112:6:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "2170:10:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2170:10:23",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2179:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2179:1:23",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "2174:1:23",
																						"nodeType": "YulTypedName",
																						"src": "2174:1:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2250:165:23",
																					"nodeType": "YulBlock",
																					"src": "2250:165:23",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2275:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "2275:6:23"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "2293:3:23",
																														"nodeType": "YulIdentifier",
																														"src": "2293:3:23"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "2298:9:23",
																														"nodeType": "YulIdentifier",
																														"src": "2298:9:23"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "2289:3:23",
																													"nodeType": "YulIdentifier",
																													"src": "2289:3:23"
																												},
																												"nativeSrc": "2289:19:23",
																												"nodeType": "YulFunctionCall",
																												"src": "2289:19:23"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "2283:5:23",
																											"nodeType": "YulIdentifier",
																											"src": "2283:5:23"
																										},
																										"nativeSrc": "2283:26:23",
																										"nodeType": "YulFunctionCall",
																										"src": "2283:26:23"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2268:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "2268:6:23"
																								},
																								"nativeSrc": "2268:42:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2268:42:23"
																							},
																							"nativeSrc": "2268:42:23",
																							"nodeType": "YulExpressionStatement",
																							"src": "2268:42:23"
																						},
																						{
																							"nativeSrc": "2327:24:23",
																							"nodeType": "YulAssignment",
																							"src": "2327:24:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2341:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "2341:6:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2349:1:23",
																										"nodeType": "YulLiteral",
																										"src": "2349:1:23",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2337:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "2337:3:23"
																								},
																								"nativeSrc": "2337:14:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2337:14:23"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "2327:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "2327:6:23"
																								}
																							]
																						},
																						{
																							"nativeSrc": "2368:33:23",
																							"nodeType": "YulAssignment",
																							"src": "2368:33:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "2385:9:23",
																										"nodeType": "YulIdentifier",
																										"src": "2385:9:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2396:4:23",
																										"nodeType": "YulLiteral",
																										"src": "2396:4:23",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2381:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "2381:3:23"
																								},
																								"nativeSrc": "2381:20:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2381:20:23"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2368:9:23",
																									"nodeType": "YulIdentifier",
																									"src": "2368:9:23"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "2204:1:23",
																							"nodeType": "YulIdentifier",
																							"src": "2204:1:23"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2207:7:23",
																							"nodeType": "YulIdentifier",
																							"src": "2207:7:23"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2201:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "2201:2:23"
																					},
																					"nativeSrc": "2201:14:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2201:14:23"
																				},
																				"nativeSrc": "2193:222:23",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "2216:21:23",
																					"nodeType": "YulBlock",
																					"src": "2216:21:23",
																					"statements": [
																						{
																							"nativeSrc": "2218:17:23",
																							"nodeType": "YulAssignment",
																							"src": "2218:17:23",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "2227:1:23",
																										"nodeType": "YulIdentifier",
																										"src": "2227:1:23"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2230:4:23",
																										"nodeType": "YulLiteral",
																										"src": "2230:4:23",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2223:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "2223:3:23"
																								},
																								"nativeSrc": "2223:12:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2223:12:23"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "2218:1:23",
																									"nodeType": "YulIdentifier",
																									"src": "2218:1:23"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "2197:3:23",
																					"nodeType": "YulBlock",
																					"src": "2197:3:23",
																					"statements": []
																				},
																				"src": "2193:222:23"
																			},
																			{
																				"body": {
																					"nativeSrc": "2463:166:23",
																					"nodeType": "YulBlock",
																					"src": "2463:166:23",
																					"statements": [
																						{
																							"nativeSrc": "2481:43:23",
																							"nodeType": "YulVariableDeclaration",
																							"src": "2481:43:23",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2508:3:23",
																												"nodeType": "YulIdentifier",
																												"src": "2508:3:23"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2513:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "2513:9:23"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2504:3:23",
																											"nodeType": "YulIdentifier",
																											"src": "2504:3:23"
																										},
																										"nativeSrc": "2504:19:23",
																										"nodeType": "YulFunctionCall",
																										"src": "2504:19:23"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2498:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "2498:5:23"
																								},
																								"nativeSrc": "2498:26:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2498:26:23"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "2485:9:23",
																									"nodeType": "YulTypedName",
																									"src": "2485:9:23",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2548:6:23",
																										"nodeType": "YulIdentifier",
																										"src": "2548:6:23"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "2560:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "2560:9:23"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "2587:1:23",
																																				"nodeType": "YulLiteral",
																																				"src": "2587:1:23",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "2590:6:23",
																																				"nodeType": "YulIdentifier",
																																				"src": "2590:6:23"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "2583:3:23",
																																			"nodeType": "YulIdentifier",
																																			"src": "2583:3:23"
																																		},
																																		"nativeSrc": "2583:14:23",
																																		"nodeType": "YulFunctionCall",
																																		"src": "2583:14:23"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2599:3:23",
																																		"nodeType": "YulLiteral",
																																		"src": "2599:3:23",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "2579:3:23",
																																	"nodeType": "YulIdentifier",
																																	"src": "2579:3:23"
																																},
																																"nativeSrc": "2579:24:23",
																																"nodeType": "YulFunctionCall",
																																"src": "2579:24:23"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2609:1:23",
																																		"nodeType": "YulLiteral",
																																		"src": "2609:1:23",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "2605:3:23",
																																	"nodeType": "YulIdentifier",
																																	"src": "2605:3:23"
																																},
																																"nativeSrc": "2605:6:23",
																																"nodeType": "YulFunctionCall",
																																"src": "2605:6:23"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "2575:3:23",
																															"nodeType": "YulIdentifier",
																															"src": "2575:3:23"
																														},
																														"nativeSrc": "2575:37:23",
																														"nodeType": "YulFunctionCall",
																														"src": "2575:37:23"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "2571:3:23",
																													"nodeType": "YulIdentifier",
																													"src": "2571:3:23"
																												},
																												"nativeSrc": "2571:42:23",
																												"nodeType": "YulFunctionCall",
																												"src": "2571:42:23"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "2556:3:23",
																											"nodeType": "YulIdentifier",
																											"src": "2556:3:23"
																										},
																										"nativeSrc": "2556:58:23",
																										"nodeType": "YulFunctionCall",
																										"src": "2556:58:23"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2541:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "2541:6:23"
																								},
																								"nativeSrc": "2541:74:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2541:74:23"
																							},
																							"nativeSrc": "2541:74:23",
																							"nodeType": "YulExpressionStatement",
																							"src": "2541:74:23"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2434:7:23",
																							"nodeType": "YulIdentifier",
																							"src": "2434:7:23"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "2443:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "2443:6:23"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2431:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "2431:2:23"
																					},
																					"nativeSrc": "2431:19:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2431:19:23"
																				},
																				"nativeSrc": "2428:201:23",
																				"nodeType": "YulIf",
																				"src": "2428:201:23"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2649:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "2649:4:23"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "2663:1:23",
																											"nodeType": "YulLiteral",
																											"src": "2663:1:23",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "2666:6:23",
																											"nodeType": "YulIdentifier",
																											"src": "2666:6:23"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "2659:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "2659:3:23"
																									},
																									"nativeSrc": "2659:14:23",
																									"nodeType": "YulFunctionCall",
																									"src": "2659:14:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2675:1:23",
																									"nodeType": "YulLiteral",
																									"src": "2675:1:23",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2655:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "2655:3:23"
																							},
																							"nativeSrc": "2655:22:23",
																							"nodeType": "YulFunctionCall",
																							"src": "2655:22:23"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2642:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "2642:6:23"
																					},
																					"nativeSrc": "2642:36:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2642:36:23"
																				},
																				"nativeSrc": "2642:36:23",
																				"nodeType": "YulExpressionStatement",
																				"src": "2642:36:23"
																			}
																		]
																	},
																	"nativeSrc": "2039:649:23",
																	"nodeType": "YulCase",
																	"src": "2039:649:23",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2044:1:23",
																		"nodeType": "YulLiteral",
																		"src": "2044:1:23",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "2705:234:23",
																		"nodeType": "YulBlock",
																		"src": "2705:234:23",
																		"statements": [
																			{
																				"nativeSrc": "2719:14:23",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2719:14:23",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2732:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2732:1:23",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "2723:5:23",
																						"nodeType": "YulTypedName",
																						"src": "2723:5:23",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2768:67:23",
																					"nodeType": "YulBlock",
																					"src": "2768:67:23",
																					"statements": [
																						{
																							"nativeSrc": "2786:35:23",
																							"nodeType": "YulAssignment",
																							"src": "2786:35:23",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2805:3:23",
																												"nodeType": "YulIdentifier",
																												"src": "2805:3:23"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2810:9:23",
																												"nodeType": "YulIdentifier",
																												"src": "2810:9:23"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2801:3:23",
																											"nodeType": "YulIdentifier",
																											"src": "2801:3:23"
																										},
																										"nativeSrc": "2801:19:23",
																										"nodeType": "YulFunctionCall",
																										"src": "2801:19:23"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2795:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "2795:5:23"
																								},
																								"nativeSrc": "2795:26:23",
																								"nodeType": "YulFunctionCall",
																								"src": "2795:26:23"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "2786:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "2786:5:23"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "2749:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "2749:6:23"
																				},
																				"nativeSrc": "2746:89:23",
																				"nodeType": "YulIf",
																				"src": "2746:89:23"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2855:4:23",
																							"nodeType": "YulIdentifier",
																							"src": "2855:4:23"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "2914:5:23",
																									"nodeType": "YulIdentifier",
																									"src": "2914:5:23"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "2921:6:23",
																									"nodeType": "YulIdentifier",
																									"src": "2921:6:23"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "2861:52:23",
																								"nodeType": "YulIdentifier",
																								"src": "2861:52:23"
																							},
																							"nativeSrc": "2861:67:23",
																							"nodeType": "YulFunctionCall",
																							"src": "2861:67:23"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2848:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "2848:6:23"
																					},
																					"nativeSrc": "2848:81:23",
																					"nodeType": "YulFunctionCall",
																					"src": "2848:81:23"
																				},
																				"nativeSrc": "2848:81:23",
																				"nodeType": "YulExpressionStatement",
																				"src": "2848:81:23"
																			}
																		]
																	},
																	"nativeSrc": "2697:242:23",
																	"nodeType": "YulCase",
																	"src": "2697:242:23",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "2019:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2019:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2027:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2027:2:23",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2016:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "2016:2:23"
																},
																"nativeSrc": "2016:14:23",
																"nodeType": "YulFunctionCall",
																"src": "2016:14:23"
															},
															"nativeSrc": "2009:930:23",
															"nodeType": "YulSwitch",
															"src": "2009:930:23"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "1646:1299:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "1727:4:23",
														"nodeType": "YulTypedName",
														"src": "1727:4:23",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "1733:3:23",
														"nodeType": "YulTypedName",
														"src": "1733:3:23",
														"type": ""
													}
												],
												"src": "1646:1299:23"
											},
											{
												"body": {
													"nativeSrc": "3051:102:23",
													"nodeType": "YulBlock",
													"src": "3051:102:23",
													"statements": [
														{
															"nativeSrc": "3061:26:23",
															"nodeType": "YulAssignment",
															"src": "3061:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3073:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3073:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3084:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3084:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3069:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3069:3:23"
																},
																"nativeSrc": "3069:18:23",
																"nodeType": "YulFunctionCall",
																"src": "3069:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3061:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "3061:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3103:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3103:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3118:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3118:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3134:3:23",
																								"nodeType": "YulLiteral",
																								"src": "3134:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3139:1:23",
																								"nodeType": "YulLiteral",
																								"src": "3139:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3130:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "3130:3:23"
																						},
																						"nativeSrc": "3130:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "3130:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3143:1:23",
																						"nodeType": "YulLiteral",
																						"src": "3143:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3126:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3126:3:23"
																				},
																				"nativeSrc": "3126:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3126:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3114:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3114:3:23"
																		},
																		"nativeSrc": "3114:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3114:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3096:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3096:6:23"
																},
																"nativeSrc": "3096:51:23",
																"nodeType": "YulFunctionCall",
																"src": "3096:51:23"
															},
															"nativeSrc": "3096:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "3096:51:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2950:203:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3020:9:23",
														"nodeType": "YulTypedName",
														"src": "3020:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3031:6:23",
														"nodeType": "YulTypedName",
														"src": "3031:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3042:4:23",
														"nodeType": "YulTypedName",
														"src": "3042:4:23",
														"type": ""
													}
												],
												"src": "2950:203:23"
											},
											{
												"body": {
													"nativeSrc": "3371:276:23",
													"nodeType": "YulBlock",
													"src": "3371:276:23",
													"statements": [
														{
															"nativeSrc": "3381:27:23",
															"nodeType": "YulAssignment",
															"src": "3381:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3393:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3393:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3404:3:23",
																		"nodeType": "YulLiteral",
																		"src": "3404:3:23",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3389:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3389:3:23"
																},
																"nativeSrc": "3389:19:23",
																"nodeType": "YulFunctionCall",
																"src": "3389:19:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3381:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "3381:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3424:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3424:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "3435:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3435:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3417:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3417:6:23"
																},
																"nativeSrc": "3417:25:23",
																"nodeType": "YulFunctionCall",
																"src": "3417:25:23"
															},
															"nativeSrc": "3417:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "3417:25:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3462:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3462:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3473:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3473:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3458:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3458:3:23"
																		},
																		"nativeSrc": "3458:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3458:18:23"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3478:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3478:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3451:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3451:6:23"
																},
																"nativeSrc": "3451:34:23",
																"nodeType": "YulFunctionCall",
																"src": "3451:34:23"
															},
															"nativeSrc": "3451:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "3451:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3505:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3505:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3516:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3516:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3501:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3501:3:23"
																		},
																		"nativeSrc": "3501:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3501:18:23"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "3521:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3521:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3494:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3494:6:23"
																},
																"nativeSrc": "3494:34:23",
																"nodeType": "YulFunctionCall",
																"src": "3494:34:23"
															},
															"nativeSrc": "3494:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "3494:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3548:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3548:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3559:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3559:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3544:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3544:3:23"
																		},
																		"nativeSrc": "3544:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3544:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "3564:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3564:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3537:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3537:6:23"
																},
																"nativeSrc": "3537:34:23",
																"nodeType": "YulFunctionCall",
																"src": "3537:34:23"
															},
															"nativeSrc": "3537:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "3537:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3591:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3591:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3602:3:23",
																				"nodeType": "YulLiteral",
																				"src": "3602:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3587:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3587:3:23"
																		},
																		"nativeSrc": "3587:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3587:19:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "3612:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3612:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3628:3:23",
																								"nodeType": "YulLiteral",
																								"src": "3628:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3633:1:23",
																								"nodeType": "YulLiteral",
																								"src": "3633:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3624:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "3624:3:23"
																						},
																						"nativeSrc": "3624:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "3624:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3637:1:23",
																						"nodeType": "YulLiteral",
																						"src": "3637:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3620:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3620:3:23"
																				},
																				"nativeSrc": "3620:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3620:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3608:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3608:3:23"
																		},
																		"nativeSrc": "3608:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3608:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3580:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3580:6:23"
																},
																"nativeSrc": "3580:61:23",
																"nodeType": "YulFunctionCall",
																"src": "3580:61:23"
															},
															"nativeSrc": "3580:61:23",
															"nodeType": "YulExpressionStatement",
															"src": "3580:61:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "3158:489:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3308:9:23",
														"nodeType": "YulTypedName",
														"src": "3308:9:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3319:6:23",
														"nodeType": "YulTypedName",
														"src": "3319:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3327:6:23",
														"nodeType": "YulTypedName",
														"src": "3327:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3335:6:23",
														"nodeType": "YulTypedName",
														"src": "3335:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3343:6:23",
														"nodeType": "YulTypedName",
														"src": "3343:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3351:6:23",
														"nodeType": "YulTypedName",
														"src": "3351:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3362:4:23",
														"nodeType": "YulTypedName",
														"src": "3362:4:23",
														"type": ""
													}
												],
												"src": "3158:489:23"
											},
											{
												"body": {
													"nativeSrc": "3773:406:23",
													"nodeType": "YulBlock",
													"src": "3773:406:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3790:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3790:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3801:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3801:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3783:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3783:6:23"
																},
																"nativeSrc": "3783:21:23",
																"nodeType": "YulFunctionCall",
																"src": "3783:21:23"
															},
															"nativeSrc": "3783:21:23",
															"nodeType": "YulExpressionStatement",
															"src": "3783:21:23"
														},
														{
															"nativeSrc": "3813:27:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3813:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3833:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3833:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3827:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "3827:5:23"
																},
																"nativeSrc": "3827:13:23",
																"nodeType": "YulFunctionCall",
																"src": "3827:13:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3817:6:23",
																	"nodeType": "YulTypedName",
																	"src": "3817:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3860:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3860:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3871:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3871:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3856:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3856:3:23"
																		},
																		"nativeSrc": "3856:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3856:18:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3876:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3876:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3849:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3849:6:23"
																},
																"nativeSrc": "3849:34:23",
																"nodeType": "YulFunctionCall",
																"src": "3849:34:23"
															},
															"nativeSrc": "3849:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "3849:34:23"
														},
														{
															"nativeSrc": "3892:10:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3892:10:23",
															"value": {
																"kind": "number",
																"nativeSrc": "3901:1:23",
																"nodeType": "YulLiteral",
																"src": "3901:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "3896:1:23",
																	"nodeType": "YulTypedName",
																	"src": "3896:1:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3961:90:23",
																"nodeType": "YulBlock",
																"src": "3961:90:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nativeSrc": "3990:9:23",
																									"nodeType": "YulIdentifier",
																									"src": "3990:9:23"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "4001:1:23",
																									"nodeType": "YulIdentifier",
																									"src": "4001:1:23"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "3986:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "3986:3:23"
																							},
																							"nativeSrc": "3986:17:23",
																							"nodeType": "YulFunctionCall",
																							"src": "3986:17:23"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4005:2:23",
																							"nodeType": "YulLiteral",
																							"src": "4005:2:23",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "3982:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "3982:3:23"
																					},
																					"nativeSrc": "3982:26:23",
																					"nodeType": "YulFunctionCall",
																					"src": "3982:26:23"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nativeSrc": "4024:6:23",
																											"nodeType": "YulIdentifier",
																											"src": "4024:6:23"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "4032:1:23",
																											"nodeType": "YulIdentifier",
																											"src": "4032:1:23"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "4020:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "4020:3:23"
																									},
																									"nativeSrc": "4020:14:23",
																									"nodeType": "YulFunctionCall",
																									"src": "4020:14:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4036:2:23",
																									"nodeType": "YulLiteral",
																									"src": "4036:2:23",
																									"type": "",
																									"value": "32"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4016:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "4016:3:23"
																							},
																							"nativeSrc": "4016:23:23",
																							"nodeType": "YulFunctionCall",
																							"src": "4016:23:23"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "4010:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "4010:5:23"
																					},
																					"nativeSrc": "4010:30:23",
																					"nodeType": "YulFunctionCall",
																					"src": "4010:30:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3975:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3975:6:23"
																			},
																			"nativeSrc": "3975:66:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3975:66:23"
																		},
																		"nativeSrc": "3975:66:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3975:66:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "3922:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "3922:1:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3925:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3925:6:23"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3919:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "3919:2:23"
																},
																"nativeSrc": "3919:13:23",
																"nodeType": "YulFunctionCall",
																"src": "3919:13:23"
															},
															"nativeSrc": "3911:140:23",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3933:19:23",
																"nodeType": "YulBlock",
																"src": "3933:19:23",
																"statements": [
																	{
																		"nativeSrc": "3935:15:23",
																		"nodeType": "YulAssignment",
																		"src": "3935:15:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "3944:1:23",
																					"nodeType": "YulIdentifier",
																					"src": "3944:1:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3947:2:23",
																					"nodeType": "YulLiteral",
																					"src": "3947:2:23",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3940:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "3940:3:23"
																			},
																			"nativeSrc": "3940:10:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3940:10:23"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "3935:1:23",
																				"nodeType": "YulIdentifier",
																				"src": "3935:1:23"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3915:3:23",
																"nodeType": "YulBlock",
																"src": "3915:3:23",
																"statements": []
															},
															"src": "3911:140:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4075:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "4075:9:23"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "4086:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "4086:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4071:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4071:3:23"
																				},
																				"nativeSrc": "4071:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4071:22:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4095:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4095:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4067:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4067:3:23"
																		},
																		"nativeSrc": "4067:31:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4067:31:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4100:1:23",
																		"nodeType": "YulLiteral",
																		"src": "4100:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4060:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4060:6:23"
																},
																"nativeSrc": "4060:42:23",
																"nodeType": "YulFunctionCall",
																"src": "4060:42:23"
															},
															"nativeSrc": "4060:42:23",
															"nodeType": "YulExpressionStatement",
															"src": "4060:42:23"
														},
														{
															"nativeSrc": "4111:62:23",
															"nodeType": "YulAssignment",
															"src": "4111:62:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4127:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4127:9:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "4146:6:23",
																								"nodeType": "YulIdentifier",
																								"src": "4146:6:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4154:2:23",
																								"nodeType": "YulLiteral",
																								"src": "4154:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "4142:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "4142:3:23"
																						},
																						"nativeSrc": "4142:15:23",
																						"nodeType": "YulFunctionCall",
																						"src": "4142:15:23"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4163:2:23",
																								"nodeType": "YulLiteral",
																								"src": "4163:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "4159:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "4159:3:23"
																						},
																						"nativeSrc": "4159:7:23",
																						"nodeType": "YulFunctionCall",
																						"src": "4159:7:23"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4138:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4138:3:23"
																				},
																				"nativeSrc": "4138:29:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4138:29:23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4123:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4123:3:23"
																		},
																		"nativeSrc": "4123:45:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4123:45:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4170:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4170:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4119:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4119:3:23"
																},
																"nativeSrc": "4119:54:23",
																"nodeType": "YulFunctionCall",
																"src": "4119:54:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4111:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "4111:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "3652:527:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3742:9:23",
														"nodeType": "YulTypedName",
														"src": "3742:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3753:6:23",
														"nodeType": "YulTypedName",
														"src": "3753:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3764:4:23",
														"nodeType": "YulTypedName",
														"src": "3764:4:23",
														"type": ""
													}
												],
												"src": "3652:527:23"
											},
											{
												"body": {
													"nativeSrc": "4278:203:23",
													"nodeType": "YulBlock",
													"src": "4278:203:23",
													"statements": [
														{
															"nativeSrc": "4288:26:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4288:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "4308:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "4308:5:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4302:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "4302:5:23"
																},
																"nativeSrc": "4302:12:23",
																"nodeType": "YulFunctionCall",
																"src": "4302:12:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "4292:6:23",
																	"nodeType": "YulTypedName",
																	"src": "4292:6:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4323:32:23",
															"nodeType": "YulAssignment",
															"src": "4323:32:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nativeSrc": "4342:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "4342:5:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4349:4:23",
																				"nodeType": "YulLiteral",
																				"src": "4349:4:23",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4338:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4338:3:23"
																		},
																		"nativeSrc": "4338:16:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4338:16:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4332:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "4332:5:23"
																},
																"nativeSrc": "4332:23:23",
																"nodeType": "YulFunctionCall",
																"src": "4332:23:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4323:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "4323:5:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4392:83:23",
																"nodeType": "YulBlock",
																"src": "4392:83:23",
																"statements": [
																	{
																		"nativeSrc": "4406:59:23",
																		"nodeType": "YulAssignment",
																		"src": "4406:59:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "4419:5:23",
																					"nodeType": "YulIdentifier",
																					"src": "4419:5:23"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "4434:1:23",
																									"nodeType": "YulLiteral",
																									"src": "4434:1:23",
																									"type": "",
																									"value": "3"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "4441:4:23",
																											"nodeType": "YulLiteral",
																											"src": "4441:4:23",
																											"type": "",
																											"value": "0x20"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "4447:6:23",
																											"nodeType": "YulIdentifier",
																											"src": "4447:6:23"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "4437:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "4437:3:23"
																									},
																									"nativeSrc": "4437:17:23",
																									"nodeType": "YulFunctionCall",
																									"src": "4437:17:23"
																								}
																							],
																							"functionName": {
																								"name": "shl",
																								"nativeSrc": "4430:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "4430:3:23"
																							},
																							"nativeSrc": "4430:25:23",
																							"nodeType": "YulFunctionCall",
																							"src": "4430:25:23"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "4461:1:23",
																									"nodeType": "YulLiteral",
																									"src": "4461:1:23",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "4457:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "4457:3:23"
																							},
																							"nativeSrc": "4457:6:23",
																							"nodeType": "YulFunctionCall",
																							"src": "4457:6:23"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4426:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "4426:3:23"
																					},
																					"nativeSrc": "4426:38:23",
																					"nodeType": "YulFunctionCall",
																					"src": "4426:38:23"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4415:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "4415:3:23"
																			},
																			"nativeSrc": "4415:50:23",
																			"nodeType": "YulFunctionCall",
																			"src": "4415:50:23"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "4406:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "4406:5:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "4370:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4370:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4378:4:23",
																		"nodeType": "YulLiteral",
																		"src": "4378:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4367:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "4367:2:23"
																},
																"nativeSrc": "4367:16:23",
																"nodeType": "YulFunctionCall",
																"src": "4367:16:23"
															},
															"nativeSrc": "4364:111:23",
															"nodeType": "YulIf",
															"src": "4364:111:23"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "4184:297:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "4258:5:23",
														"nodeType": "YulTypedName",
														"src": "4258:5:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "4268:5:23",
														"nodeType": "YulTypedName",
														"src": "4268:5:23",
														"type": ""
													}
												],
												"src": "4184:297:23"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), 32)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}",
									"id": 23,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1977 CODESIZE SUB DUP1 PUSH2 0x1977 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x275 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x1554D115 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x1554D1 PUSH1 0xEA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x1554D115 PUSH1 0xE2 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xB1 SWAP2 SWAP1 PUSH2 0x344 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0xBE DUP3 DUP3 PUSH2 0x344 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF9 DUP2 PUSH2 0x1B2 JUMP JUMPDEST POP PUSH2 0x105 DUP3 PUSH1 0x6 PUSH2 0x204 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0x114 DUP2 PUSH1 0x7 PUSH2 0x204 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x1A1 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH2 0x474 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x220 JUMPI PUSH2 0x219 DUP4 PUSH2 0x237 JUMP JUMPDEST SWAP1 POP PUSH2 0x231 JUMP JUMPDEST DUP2 PUSH2 0x22B DUP5 DUP3 PUSH2 0x344 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x262 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE7 SWAP2 SWAP1 PUSH2 0x402 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x26D DUP3 PUSH2 0x450 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x29E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2CF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2EF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x33F JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x31C JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x328 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x35D JUMPI PUSH2 0x35D PUSH2 0x2A5 JUMP JUMPDEST PUSH2 0x371 DUP2 PUSH2 0x36B DUP5 SLOAD PUSH2 0x2BB JUMP JUMPDEST DUP5 PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP4 ISZERO PUSH2 0x38D JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x33C JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3D5 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x3B5 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x3F3 JUMPI DUP7 DUP5 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x430 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0x40 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x413 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2EF JUMPI PUSH1 0x0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x14A9 PUSH2 0x4CE PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xB61 ADD MSTORE PUSH1 0x0 PUSH2 0xB34 ADD MSTORE PUSH1 0x0 PUSH2 0xA27 ADD MSTORE PUSH1 0x0 PUSH2 0x9FF ADD MSTORE PUSH1 0x0 PUSH2 0x95A ADD MSTORE PUSH1 0x0 PUSH2 0x984 ADD MSTORE PUSH1 0x0 PUSH2 0x9AE ADD MSTORE PUSH2 0x14A9 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xD9D98CE4 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x10C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x190 PUSH2 0x3CD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x196 PUSH2 0x406 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x415 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x116F JUMP JUMPDEST PUSH2 0x422 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH2 0x196 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x5C7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0x266 PUSH2 0x610 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x122D JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x656 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x7AD JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x330 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x35C SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x37E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x38C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C1 DUP2 DUP6 DUP6 PUSH2 0x828 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E0 CALLER PUSH9 0x3635C9ADC5DEA00000 PUSH2 0x83A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3F0 DUP6 DUP3 DUP6 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x3FB DUP6 DUP6 DUP6 PUSH2 0x8EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x410 PUSH2 0x94D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x41F CALLER DUP3 PUSH2 0xA78 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42E DUP7 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD9A7609 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x465 DUP8 DUP8 PUSH2 0x7AD JUMP JUMPDEST SWAP1 POP PUSH2 0x471 DUP9 DUP8 PUSH2 0x83A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x4C9 SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x13AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x50C SWAP2 SWAP1 PUSH2 0x1408 JUMP JUMPDEST EQ PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x678C5B PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP10 ADDRESS PUSH2 0x545 DUP6 DUP12 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x55E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x57B JUMPI PUSH2 0x576 DUP10 PUSH2 0x571 DUP5 DUP11 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH2 0x585 DUP10 DUP9 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x590 DUP10 DUP3 DUP5 PUSH2 0x8EE JUMP JUMPDEST POP PUSH1 0x1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x5B8 JUMPI PUSH1 0x0 PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x3C7 SWAP1 PUSH1 0x0 NOT PUSH2 0x144A JUMP JUMPDEST PUSH2 0x5CF PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x3E0 PUSH1 0x0 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x5E4 DUP3 CALLER DUP4 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x5EE DUP3 DUP3 PUSH2 0xA78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x624 PUSH2 0xB2D JUMP JUMPDEST PUSH2 0x62C PUSH2 0xB5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x330 SWAP1 PUSH2 0x1375 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C1 DUP2 DUP6 DUP6 PUSH2 0x8EE JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x697 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x6E4 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x73F DUP3 PUSH2 0xB87 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x74F DUP3 DUP8 DUP8 DUP8 PUSH2 0xBB4 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x7A1 DUP11 DUP11 DUP11 PUSH2 0x828 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AD3EDC9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7F5 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x81F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x41F DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x835 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBE2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x5EE PUSH1 0x0 DUP4 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x8E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x8E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0xBE2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x835 DUP4 DUP4 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x9A6 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x9D0 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x410 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x5EE DUP3 PUSH1 0x0 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x410 PUSH32 0x0 PUSH1 0x6 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x410 PUSH32 0x0 PUSH1 0x7 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7 PUSH2 0xB94 PUSH2 0x94D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xBC6 DUP9 DUP9 DUP9 DUP9 PUSH2 0xE8C JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xBD6 DUP3 DUP3 PUSH2 0xF5B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC36 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8E8 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xCA9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCE2 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0x1437 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xD54 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD70 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xDD4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xDFB JUMPI PUSH2 0xDF4 DUP4 PUSH2 0x1014 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C7 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xE07 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE33 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE80 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE55 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE80 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE63 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xEC7 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xF51 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF1B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF47 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF6F JUMPI PUSH2 0xF6F PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xF78 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF8C JUMPI PUSH2 0xF8C PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xFAA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFBE JUMPI PUSH2 0xFBE PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xFDF JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFF3 JUMPI PUSH2 0xFF3 PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1021 DUP4 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10A1 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1085 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1107 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x112A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1135 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1145 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1192 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x11A2 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E6 DUP2 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x124C PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x107B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x125E DUP2 DUP10 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12B4 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1296 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x12E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x12EB DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x12FB DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x135A DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x136A DUP2 PUSH2 0x10D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1389 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x13A9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE DUP2 DUP4 PUSH1 0xC0 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0xC0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x141A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x1421 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x1421 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 STOP CODESIZE MOD 0xC6 PUSH5 0xF973970DC2 PUSH2 0x11EF 0xE7 SWAP16 PUSH0 0xEA 0xE6 0x25 0xB4 0xFC 0x2A SWAP6 RETURNDATASIZE 0xCF 0xBB DUP1 SWAP8 PUSH25 0x228B64736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "392:289:22:-:0;;;477:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1574:52:9;;;;;;;;;;;;;-1:-1:-1;;;1574:52:9;;;1613:4;3328:431:18;;;;;;;;;;;;;-1:-1:-1;;;3328:431:18;;;556:12:22;1896:113:5;;;;;;;;;;;;;-1:-1:-1;;;1896:113:5;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:5;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:5;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;;;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;3096:51:23;3069:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;3401:45:18;:4;3432:13;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;3417:25:23;3458:18;;;3451:34;;;;3501:18;;;3494:34;4255:13:18;3544:18:23;;;3537:34;4278:4:18;3587:19:23;;;3580:61;4168:7:18;;3389:19:23;;4204:80:18;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:18;3725:27;;-1:-1:-1;392:289:22;;-1:-1:-1;392:289:22;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;2914:340:14:-;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:14;;-1:-1:-1;3033:215:14;2914:340;;;;:::o;1708:286::-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:14;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:14:o;14:290:23:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:23;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:23:o;309:127::-;370:10;365:3;361:20;358:1;351:31;401:4;398:1;391:15;425:4;422:1;415:15;441:380;520:1;516:12;;;;563;;;584:61;;638:4;630:6;626:17;616:27;;584:61;691:2;683:6;680:14;660:18;657:38;654:161;;737:10;732:3;728:20;725:1;718:31;772:4;769:1;762:15;800:4;797:1;790:15;654:161;;441:380;;;:::o;952:518::-;1054:2;1049:3;1046:11;1043:421;;;1090:5;1087:1;1080:16;1134:4;1131:1;1121:18;1204:2;1192:10;1188:19;1185:1;1181:27;1175:4;1171:38;1240:4;1228:10;1225:20;1222:47;;;-1:-1:-1;1263:4:23;1222:47;1318:2;1313:3;1309:12;1306:1;1302:20;1296:4;1292:31;1282:41;;1373:81;1391:2;1384:5;1381:13;1373:81;;;1450:1;1436:16;;1417:1;1406:13;1373:81;;;1377:3;;1043:421;952:518;;;:::o;1646:1299::-;1766:10;;-1:-1:-1;;;;;1788:30:23;;1785:56;;;1821:18;;:::i;:::-;1850:97;1940:6;1900:38;1932:4;1926:11;1900:38;:::i;:::-;1894:4;1850:97;:::i;:::-;1996:4;2027:2;2016:14;;2044:1;2039:649;;;;2732:1;2749:6;2746:89;;;-1:-1:-1;2801:19:23;;;2795:26;2746:89;-1:-1:-1;;1603:1:23;1599:11;;;1595:24;1591:29;1581:40;1627:1;1623:11;;;1578:57;2848:81;;2009:930;;2039:649;899:1;892:14;;;936:4;923:18;;-1:-1:-1;;2075:20:23;;;2193:222;2207:7;2204:1;2201:14;2193:222;;;2289:19;;;2283:26;2268:42;;2396:4;2381:20;;;;2349:1;2337:14;;;;2223:12;2193:222;;;2197:3;2443:6;2434:7;2431:19;2428:201;;;2504:19;;;2498:26;-1:-1:-1;;2587:1:23;2583:14;;;2599:3;2579:24;2575:37;2571:42;2556:58;2541:74;;2428:201;-1:-1:-1;;;;2675:1:23;2659:14;;;2655:22;2642:36;;-1:-1:-1;1646:1299:23:o;3652:527::-;3801:2;3790:9;3783:21;3764:4;3833:6;3827:13;3876:6;3871:2;3860:9;3856:18;3849:34;3901:1;3911:140;3925:6;3922:1;3919:13;3911:140;;;4036:2;4020:14;;;4016:23;;4010:30;4005:2;3986:17;;;3982:26;3975:66;3940:10;3911:140;;;3915:3;4100:1;4095:2;4086:6;4075:9;4071:22;4067:31;4060:42;4170:2;4163;4159:7;4154:2;4146:6;4142:15;4138:29;4127:9;4123:45;4119:54;4111:62;;;3652:527;;;;:::o;4184:297::-;4302:12;;4349:4;4338:16;;;4332:23;;4302:12;4367:16;;4364:111;;;-1:-1:-1;;4441:4:23;4437:17;;;;4434:1;4430:25;4426:38;4415:50;;4184:297;-1:-1:-1;4184:297:23:o;:::-;392:289:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1404": {
									"entryPoint": 1030,
									"id": 1404,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2709": {
									"entryPoint": 2861,
									"id": 2709,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2721": {
									"entryPoint": 2906,
									"id": 2721,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_774": {
									"entryPoint": 2088,
									"id": 774,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_834": {
									"entryPoint": 3042,
									"id": 834,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2639": {
									"entryPoint": null,
									"id": 2639,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_756": {
									"entryPoint": 2680,
									"id": 756,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 2734,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_2618": {
									"entryPoint": 2381,
									"id": 2618,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_flashFeeReceiver_1123": {
									"entryPoint": null,
									"id": 1123,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_flashFee_1111": {
									"entryPoint": null,
									"id": 1111,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2655": {
									"entryPoint": 2951,
									"id": 2655,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_723": {
									"entryPoint": 2106,
									"id": 723,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1479": {
									"entryPoint": null,
									"id": 1479,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_882": {
									"entryPoint": 2160,
									"id": 882,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2494": {
									"entryPoint": 3931,
									"id": 2494,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 2779,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_613": {
									"entryPoint": 2286,
									"id": 613,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_690": {
									"entryPoint": 3255,
									"id": 690,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1539": {
									"entryPoint": null,
									"id": 1539,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_510": {
									"entryPoint": null,
									"id": 510,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_534": {
									"entryPoint": 947,
									"id": 534,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_469": {
									"entryPoint": null,
									"id": 469,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_1006": {
									"entryPoint": 1497,
									"id": 1006,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_985": {
									"entryPoint": 1045,
									"id": 985,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@byteLength_1683": {
									"entryPoint": 4179,
									"id": 1683,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_447": {
									"entryPoint": null,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2697": {
									"entryPoint": 1552,
									"id": 2697,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@flashFee_1094": {
									"entryPoint": 1965,
									"id": 1094,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@flashLoan_1250": {
									"entryPoint": 1058,
									"id": 1250,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"@maxFlashLoan_1066": {
									"entryPoint": 1439,
									"id": 1066,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@mint_4000": {
									"entryPoint": 973,
									"id": 4000,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@name_429": {
									"entryPoint": 801,
									"id": 429,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1394": {
									"entryPoint": 1522,
									"id": 1394,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1524": {
									"entryPoint": null,
									"id": 1524,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1377": {
									"entryPoint": 1651,
									"id": 1377,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2445": {
									"entryPoint": 2996,
									"id": 2445,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 1479,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_438": {
									"entryPoint": 1622,
									"id": 438,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1750": {
									"entryPoint": 3553,
									"id": 1750,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1651": {
									"entryPoint": 4116,
									"id": 1651,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2795": {
									"entryPoint": null,
									"id": 2795,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_456": {
									"entryPoint": null,
									"id": 456,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_566": {
									"entryPoint": 994,
									"id": 566,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 2029,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_493": {
									"entryPoint": 1637,
									"id": 493,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2409": {
									"entryPoint": 3724,
									"id": 2409,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4624,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4924,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4373,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 4805,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4329,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 5128,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$167t_addresst_uint256t_bytes_calldata_ptr": {
									"entryPoint": 4463,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 5
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 4219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 5039,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 4653,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4289,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5175,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5194,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 4981,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5153,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 5213,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 4308,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:10905:23",
										"nodeType": "YulBlock",
										"src": "0:10905:23",
										"statements": [
											{
												"nativeSrc": "6:3:23",
												"nodeType": "YulBlock",
												"src": "6:3:23",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "64:350:23",
													"nodeType": "YulBlock",
													"src": "64:350:23",
													"statements": [
														{
															"nativeSrc": "74:26:23",
															"nodeType": "YulVariableDeclaration",
															"src": "74:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "94:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "94:5:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "88:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "88:5:23"
																},
																"nativeSrc": "88:12:23",
																"nodeType": "YulFunctionCall",
																"src": "88:12:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "78:6:23",
																	"nodeType": "YulTypedName",
																	"src": "78:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "116:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "116:3:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "121:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "121:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "109:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "109:6:23"
																},
																"nativeSrc": "109:19:23",
																"nodeType": "YulFunctionCall",
																"src": "109:19:23"
															},
															"nativeSrc": "109:19:23",
															"nodeType": "YulExpressionStatement",
															"src": "109:19:23"
														},
														{
															"nativeSrc": "137:10:23",
															"nodeType": "YulVariableDeclaration",
															"src": "137:10:23",
															"value": {
																"kind": "number",
																"nativeSrc": "146:1:23",
																"nodeType": "YulLiteral",
																"src": "146:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "141:1:23",
																	"nodeType": "YulTypedName",
																	"src": "141:1:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "208:87:23",
																"nodeType": "YulBlock",
																"src": "208:87:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "pos",
																									"nativeSrc": "237:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "237:3:23"
																								},
																								{
																									"name": "i",
																									"nativeSrc": "242:1:23",
																									"nodeType": "YulIdentifier",
																									"src": "242:1:23"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "233:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "233:3:23"
																							},
																							"nativeSrc": "233:11:23",
																							"nodeType": "YulFunctionCall",
																							"src": "233:11:23"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "246:4:23",
																							"nodeType": "YulLiteral",
																							"src": "246:4:23",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "229:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "229:3:23"
																					},
																					"nativeSrc": "229:22:23",
																					"nodeType": "YulFunctionCall",
																					"src": "229:22:23"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "267:5:23",
																											"nodeType": "YulIdentifier",
																											"src": "267:5:23"
																										},
																										{
																											"name": "i",
																											"nativeSrc": "274:1:23",
																											"nodeType": "YulIdentifier",
																											"src": "274:1:23"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nativeSrc": "263:3:23",
																										"nodeType": "YulIdentifier",
																										"src": "263:3:23"
																									},
																									"nativeSrc": "263:13:23",
																									"nodeType": "YulFunctionCall",
																									"src": "263:13:23"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "278:4:23",
																									"nodeType": "YulLiteral",
																									"src": "278:4:23",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "259:3:23",
																								"nodeType": "YulIdentifier",
																								"src": "259:3:23"
																							},
																							"nativeSrc": "259:24:23",
																							"nodeType": "YulFunctionCall",
																							"src": "259:24:23"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "253:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "253:5:23"
																					},
																					"nativeSrc": "253:31:23",
																					"nodeType": "YulFunctionCall",
																					"src": "253:31:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "222:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "222:6:23"
																			},
																			"nativeSrc": "222:63:23",
																			"nodeType": "YulFunctionCall",
																			"src": "222:63:23"
																		},
																		"nativeSrc": "222:63:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "222:63:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "167:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "167:1:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "170:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "170:6:23"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "164:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "164:2:23"
																},
																"nativeSrc": "164:13:23",
																"nodeType": "YulFunctionCall",
																"src": "164:13:23"
															},
															"nativeSrc": "156:139:23",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "178:21:23",
																"nodeType": "YulBlock",
																"src": "178:21:23",
																"statements": [
																	{
																		"nativeSrc": "180:17:23",
																		"nodeType": "YulAssignment",
																		"src": "180:17:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "189:1:23",
																					"nodeType": "YulIdentifier",
																					"src": "189:1:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "192:4:23",
																					"nodeType": "YulLiteral",
																					"src": "192:4:23",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "185:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "185:3:23"
																			},
																			"nativeSrc": "185:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "185:12:23"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "180:1:23",
																				"nodeType": "YulIdentifier",
																				"src": "180:1:23"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "160:3:23",
																"nodeType": "YulBlock",
																"src": "160:3:23",
																"statements": []
															},
															"src": "156:139:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nativeSrc": "319:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "319:3:23"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "324:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "324:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "315:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "315:3:23"
																				},
																				"nativeSrc": "315:16:23",
																				"nodeType": "YulFunctionCall",
																				"src": "315:16:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "333:4:23",
																				"nodeType": "YulLiteral",
																				"src": "333:4:23",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "311:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "311:3:23"
																		},
																		"nativeSrc": "311:27:23",
																		"nodeType": "YulFunctionCall",
																		"src": "311:27:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "340:1:23",
																		"nodeType": "YulLiteral",
																		"src": "340:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "304:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "304:6:23"
																},
																"nativeSrc": "304:38:23",
																"nodeType": "YulFunctionCall",
																"src": "304:38:23"
															},
															"nativeSrc": "304:38:23",
															"nodeType": "YulExpressionStatement",
															"src": "304:38:23"
														},
														{
															"nativeSrc": "351:57:23",
															"nodeType": "YulAssignment",
															"src": "351:57:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "366:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "366:3:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "379:6:23",
																								"nodeType": "YulIdentifier",
																								"src": "379:6:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "387:2:23",
																								"nodeType": "YulLiteral",
																								"src": "387:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "375:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "375:3:23"
																						},
																						"nativeSrc": "375:15:23",
																						"nodeType": "YulFunctionCall",
																						"src": "375:15:23"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "396:2:23",
																								"nodeType": "YulLiteral",
																								"src": "396:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "392:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "392:3:23"
																						},
																						"nativeSrc": "392:7:23",
																						"nodeType": "YulFunctionCall",
																						"src": "392:7:23"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "371:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "371:3:23"
																				},
																				"nativeSrc": "371:29:23",
																				"nodeType": "YulFunctionCall",
																				"src": "371:29:23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "362:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "362:3:23"
																		},
																		"nativeSrc": "362:39:23",
																		"nodeType": "YulFunctionCall",
																		"src": "362:39:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "403:4:23",
																		"nodeType": "YulLiteral",
																		"src": "403:4:23",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "358:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "358:3:23"
																},
																"nativeSrc": "358:50:23",
																"nodeType": "YulFunctionCall",
																"src": "358:50:23"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "351:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "351:3:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nativeSrc": "14:400:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "41:5:23",
														"nodeType": "YulTypedName",
														"src": "41:5:23",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "48:3:23",
														"nodeType": "YulTypedName",
														"src": "48:3:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "56:3:23",
														"nodeType": "YulTypedName",
														"src": "56:3:23",
														"type": ""
													}
												],
												"src": "14:400:23"
											},
											{
												"body": {
													"nativeSrc": "540:99:23",
													"nodeType": "YulBlock",
													"src": "540:99:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "557:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "557:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "568:2:23",
																		"nodeType": "YulLiteral",
																		"src": "568:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "550:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "550:6:23"
																},
																"nativeSrc": "550:21:23",
																"nodeType": "YulFunctionCall",
																"src": "550:21:23"
															},
															"nativeSrc": "550:21:23",
															"nodeType": "YulExpressionStatement",
															"src": "550:21:23"
														},
														{
															"nativeSrc": "580:53:23",
															"nodeType": "YulAssignment",
															"src": "580:53:23",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "606:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "606:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "618:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "618:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "629:2:23",
																				"nodeType": "YulLiteral",
																				"src": "629:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "614:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "614:3:23"
																		},
																		"nativeSrc": "614:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "614:18:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "588:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "588:17:23"
																},
																"nativeSrc": "588:45:23",
																"nodeType": "YulFunctionCall",
																"src": "588:45:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "580:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "580:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "419:220:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "509:9:23",
														"nodeType": "YulTypedName",
														"src": "509:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "520:6:23",
														"nodeType": "YulTypedName",
														"src": "520:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "531:4:23",
														"nodeType": "YulTypedName",
														"src": "531:4:23",
														"type": ""
													}
												],
												"src": "419:220:23"
											},
											{
												"body": {
													"nativeSrc": "689:86:23",
													"nodeType": "YulBlock",
													"src": "689:86:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "753:16:23",
																"nodeType": "YulBlock",
																"src": "753:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "762:1:23",
																					"nodeType": "YulLiteral",
																					"src": "762:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "765:1:23",
																					"nodeType": "YulLiteral",
																					"src": "765:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "755:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "755:6:23"
																			},
																			"nativeSrc": "755:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "755:12:23"
																		},
																		"nativeSrc": "755:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "755:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "712:5:23",
																				"nodeType": "YulIdentifier",
																				"src": "712:5:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "723:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "723:5:23"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "738:3:23",
																										"nodeType": "YulLiteral",
																										"src": "738:3:23",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "743:1:23",
																										"nodeType": "YulLiteral",
																										"src": "743:1:23",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "734:3:23",
																									"nodeType": "YulIdentifier",
																									"src": "734:3:23"
																								},
																								"nativeSrc": "734:11:23",
																								"nodeType": "YulFunctionCall",
																								"src": "734:11:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "747:1:23",
																								"nodeType": "YulLiteral",
																								"src": "747:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "730:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "730:3:23"
																						},
																						"nativeSrc": "730:19:23",
																						"nodeType": "YulFunctionCall",
																						"src": "730:19:23"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "719:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "719:3:23"
																				},
																				"nativeSrc": "719:31:23",
																				"nodeType": "YulFunctionCall",
																				"src": "719:31:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "709:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "709:2:23"
																		},
																		"nativeSrc": "709:42:23",
																		"nodeType": "YulFunctionCall",
																		"src": "709:42:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "702:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "702:6:23"
																},
																"nativeSrc": "702:50:23",
																"nodeType": "YulFunctionCall",
																"src": "702:50:23"
															},
															"nativeSrc": "699:70:23",
															"nodeType": "YulIf",
															"src": "699:70:23"
														}
													]
												},
												"name": "validator_revert_address",
												"nativeSrc": "644:131:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "678:5:23",
														"nodeType": "YulTypedName",
														"src": "678:5:23",
														"type": ""
													}
												],
												"src": "644:131:23"
											},
											{
												"body": {
													"nativeSrc": "867:280:23",
													"nodeType": "YulBlock",
													"src": "867:280:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "913:16:23",
																"nodeType": "YulBlock",
																"src": "913:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "922:1:23",
																					"nodeType": "YulLiteral",
																					"src": "922:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "925:1:23",
																					"nodeType": "YulLiteral",
																					"src": "925:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "915:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "915:6:23"
																			},
																			"nativeSrc": "915:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "915:12:23"
																		},
																		"nativeSrc": "915:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "915:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "888:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "888:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "897:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "897:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "884:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "884:3:23"
																		},
																		"nativeSrc": "884:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "884:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "909:2:23",
																		"nodeType": "YulLiteral",
																		"src": "909:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "880:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "880:3:23"
																},
																"nativeSrc": "880:32:23",
																"nodeType": "YulFunctionCall",
																"src": "880:32:23"
															},
															"nativeSrc": "877:52:23",
															"nodeType": "YulIf",
															"src": "877:52:23"
														},
														{
															"nativeSrc": "938:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "938:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "964:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "964:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "951:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "951:12:23"
																},
																"nativeSrc": "951:23:23",
																"nodeType": "YulFunctionCall",
																"src": "951:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "942:5:23",
																	"nodeType": "YulTypedName",
																	"src": "942:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1008:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1008:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "983:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "983:24:23"
																},
																"nativeSrc": "983:31:23",
																"nodeType": "YulFunctionCall",
																"src": "983:31:23"
															},
															"nativeSrc": "983:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "983:31:23"
														},
														{
															"nativeSrc": "1023:15:23",
															"nodeType": "YulAssignment",
															"src": "1023:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "1033:5:23",
																"nodeType": "YulIdentifier",
																"src": "1033:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1023:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1023:6:23"
																}
															]
														},
														{
															"nativeSrc": "1047:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1047:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "1062:1:23",
																"nodeType": "YulLiteral",
																"src": "1062:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "1051:7:23",
																	"nodeType": "YulTypedName",
																	"src": "1051:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1072:43:23",
															"nodeType": "YulAssignment",
															"src": "1072:43:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1100:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1100:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1111:2:23",
																				"nodeType": "YulLiteral",
																				"src": "1111:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1096:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1096:3:23"
																		},
																		"nativeSrc": "1096:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1096:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1083:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "1083:12:23"
																},
																"nativeSrc": "1083:32:23",
																"nodeType": "YulFunctionCall",
																"src": "1083:32:23"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "1072:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1072:7:23"
																}
															]
														},
														{
															"nativeSrc": "1124:17:23",
															"nodeType": "YulAssignment",
															"src": "1124:17:23",
															"value": {
																"name": "value_1",
																"nativeSrc": "1134:7:23",
																"nodeType": "YulIdentifier",
																"src": "1134:7:23"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1124:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1124:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "780:367:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "825:9:23",
														"nodeType": "YulTypedName",
														"src": "825:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "836:7:23",
														"nodeType": "YulTypedName",
														"src": "836:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "848:6:23",
														"nodeType": "YulTypedName",
														"src": "848:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "856:6:23",
														"nodeType": "YulTypedName",
														"src": "856:6:23",
														"type": ""
													}
												],
												"src": "780:367:23"
											},
											{
												"body": {
													"nativeSrc": "1247:92:23",
													"nodeType": "YulBlock",
													"src": "1247:92:23",
													"statements": [
														{
															"nativeSrc": "1257:26:23",
															"nodeType": "YulAssignment",
															"src": "1257:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1269:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1269:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1280:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1280:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1265:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1265:3:23"
																},
																"nativeSrc": "1265:18:23",
																"nodeType": "YulFunctionCall",
																"src": "1265:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1257:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1257:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1299:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1299:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1324:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "1324:6:23"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1317:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "1317:6:23"
																				},
																				"nativeSrc": "1317:14:23",
																				"nodeType": "YulFunctionCall",
																				"src": "1317:14:23"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1310:6:23",
																			"nodeType": "YulIdentifier",
																			"src": "1310:6:23"
																		},
																		"nativeSrc": "1310:22:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1310:22:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1292:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:23"
																},
																"nativeSrc": "1292:41:23",
																"nodeType": "YulFunctionCall",
																"src": "1292:41:23"
															},
															"nativeSrc": "1292:41:23",
															"nodeType": "YulExpressionStatement",
															"src": "1292:41:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1152:187:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1216:9:23",
														"nodeType": "YulTypedName",
														"src": "1216:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1227:6:23",
														"nodeType": "YulTypedName",
														"src": "1227:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1238:4:23",
														"nodeType": "YulTypedName",
														"src": "1238:4:23",
														"type": ""
													}
												],
												"src": "1152:187:23"
											},
											{
												"body": {
													"nativeSrc": "1445:76:23",
													"nodeType": "YulBlock",
													"src": "1445:76:23",
													"statements": [
														{
															"nativeSrc": "1455:26:23",
															"nodeType": "YulAssignment",
															"src": "1455:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1467:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1467:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1478:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1478:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1463:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1463:3:23"
																},
																"nativeSrc": "1463:18:23",
																"nodeType": "YulFunctionCall",
																"src": "1463:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1455:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "1455:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1497:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1497:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1508:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "1508:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1490:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1490:6:23"
																},
																"nativeSrc": "1490:25:23",
																"nodeType": "YulFunctionCall",
																"src": "1490:25:23"
															},
															"nativeSrc": "1490:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "1490:25:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1344:177:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1414:9:23",
														"nodeType": "YulTypedName",
														"src": "1414:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1425:6:23",
														"nodeType": "YulTypedName",
														"src": "1425:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1436:4:23",
														"nodeType": "YulTypedName",
														"src": "1436:4:23",
														"type": ""
													}
												],
												"src": "1344:177:23"
											},
											{
												"body": {
													"nativeSrc": "1630:404:23",
													"nodeType": "YulBlock",
													"src": "1630:404:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "1676:16:23",
																"nodeType": "YulBlock",
																"src": "1676:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1685:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1685:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1688:1:23",
																					"nodeType": "YulLiteral",
																					"src": "1688:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1678:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "1678:6:23"
																			},
																			"nativeSrc": "1678:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "1678:12:23"
																		},
																		"nativeSrc": "1678:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "1678:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1651:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "1651:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1660:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1660:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1647:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1647:3:23"
																		},
																		"nativeSrc": "1647:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1647:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1672:2:23",
																		"nodeType": "YulLiteral",
																		"src": "1672:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1643:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "1643:3:23"
																},
																"nativeSrc": "1643:32:23",
																"nodeType": "YulFunctionCall",
																"src": "1643:32:23"
															},
															"nativeSrc": "1640:52:23",
															"nodeType": "YulIf",
															"src": "1640:52:23"
														},
														{
															"nativeSrc": "1701:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1701:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1727:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "1727:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1714:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "1714:12:23"
																},
																"nativeSrc": "1714:23:23",
																"nodeType": "YulFunctionCall",
																"src": "1714:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1705:5:23",
																	"nodeType": "YulTypedName",
																	"src": "1705:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1771:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "1771:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "1746:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "1746:24:23"
																},
																"nativeSrc": "1746:31:23",
																"nodeType": "YulFunctionCall",
																"src": "1746:31:23"
															},
															"nativeSrc": "1746:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "1746:31:23"
														},
														{
															"nativeSrc": "1786:15:23",
															"nodeType": "YulAssignment",
															"src": "1786:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "1796:5:23",
																"nodeType": "YulIdentifier",
																"src": "1796:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1786:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1786:6:23"
																}
															]
														},
														{
															"nativeSrc": "1810:47:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1810:47:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1842:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1842:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1853:2:23",
																				"nodeType": "YulLiteral",
																				"src": "1853:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1838:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1838:3:23"
																		},
																		"nativeSrc": "1838:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1838:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1825:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "1825:12:23"
																},
																"nativeSrc": "1825:32:23",
																"nodeType": "YulFunctionCall",
																"src": "1825:32:23"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "1814:7:23",
																	"nodeType": "YulTypedName",
																	"src": "1814:7:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nativeSrc": "1891:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "1891:7:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "1866:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "1866:24:23"
																},
																"nativeSrc": "1866:33:23",
																"nodeType": "YulFunctionCall",
																"src": "1866:33:23"
															},
															"nativeSrc": "1866:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "1866:33:23"
														},
														{
															"nativeSrc": "1908:17:23",
															"nodeType": "YulAssignment",
															"src": "1908:17:23",
															"value": {
																"name": "value_1",
																"nativeSrc": "1918:7:23",
																"nodeType": "YulIdentifier",
																"src": "1918:7:23"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1908:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "1908:6:23"
																}
															]
														},
														{
															"nativeSrc": "1934:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "1934:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "1949:1:23",
																"nodeType": "YulLiteral",
																"src": "1949:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "1938:7:23",
																	"nodeType": "YulTypedName",
																	"src": "1938:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1959:43:23",
															"nodeType": "YulAssignment",
															"src": "1959:43:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1987:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "1987:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1998:2:23",
																				"nodeType": "YulLiteral",
																				"src": "1998:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1983:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "1983:3:23"
																		},
																		"nativeSrc": "1983:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "1983:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1970:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "1970:12:23"
																},
																"nativeSrc": "1970:32:23",
																"nodeType": "YulFunctionCall",
																"src": "1970:32:23"
															},
															"variableNames": [
																{
																	"name": "value_2",
																	"nativeSrc": "1959:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "1959:7:23"
																}
															]
														},
														{
															"nativeSrc": "2011:17:23",
															"nodeType": "YulAssignment",
															"src": "2011:17:23",
															"value": {
																"name": "value_2",
																"nativeSrc": "2021:7:23",
																"nodeType": "YulIdentifier",
																"src": "2021:7:23"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "2011:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2011:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1526:508:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1580:9:23",
														"nodeType": "YulTypedName",
														"src": "1580:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1591:7:23",
														"nodeType": "YulTypedName",
														"src": "1591:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1603:6:23",
														"nodeType": "YulTypedName",
														"src": "1603:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1611:6:23",
														"nodeType": "YulTypedName",
														"src": "1611:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1619:6:23",
														"nodeType": "YulTypedName",
														"src": "1619:6:23",
														"type": ""
													}
												],
												"src": "1526:508:23"
											},
											{
												"body": {
													"nativeSrc": "2136:87:23",
													"nodeType": "YulBlock",
													"src": "2136:87:23",
													"statements": [
														{
															"nativeSrc": "2146:26:23",
															"nodeType": "YulAssignment",
															"src": "2146:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2158:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2158:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2169:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2169:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2154:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2154:3:23"
																},
																"nativeSrc": "2154:18:23",
																"nodeType": "YulFunctionCall",
																"src": "2154:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2146:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "2146:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2188:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2188:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2203:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2203:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2211:4:23",
																				"nodeType": "YulLiteral",
																				"src": "2211:4:23",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2199:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2199:3:23"
																		},
																		"nativeSrc": "2199:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2199:17:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2181:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2181:6:23"
																},
																"nativeSrc": "2181:36:23",
																"nodeType": "YulFunctionCall",
																"src": "2181:36:23"
															},
															"nativeSrc": "2181:36:23",
															"nodeType": "YulExpressionStatement",
															"src": "2181:36:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "2039:184:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2105:9:23",
														"nodeType": "YulTypedName",
														"src": "2105:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2116:6:23",
														"nodeType": "YulTypedName",
														"src": "2116:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2127:4:23",
														"nodeType": "YulTypedName",
														"src": "2127:4:23",
														"type": ""
													}
												],
												"src": "2039:184:23"
											},
											{
												"body": {
													"nativeSrc": "2329:76:23",
													"nodeType": "YulBlock",
													"src": "2329:76:23",
													"statements": [
														{
															"nativeSrc": "2339:26:23",
															"nodeType": "YulAssignment",
															"src": "2339:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2351:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2351:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2362:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2362:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2347:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2347:3:23"
																},
																"nativeSrc": "2347:18:23",
																"nodeType": "YulFunctionCall",
																"src": "2347:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2339:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "2339:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2381:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2381:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2392:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "2392:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2374:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2374:6:23"
																},
																"nativeSrc": "2374:25:23",
																"nodeType": "YulFunctionCall",
																"src": "2374:25:23"
															},
															"nativeSrc": "2374:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "2374:25:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "2228:177:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2298:9:23",
														"nodeType": "YulTypedName",
														"src": "2298:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2309:6:23",
														"nodeType": "YulTypedName",
														"src": "2309:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2320:4:23",
														"nodeType": "YulTypedName",
														"src": "2320:4:23",
														"type": ""
													}
												],
												"src": "2228:177:23"
											},
											{
												"body": {
													"nativeSrc": "2480:156:23",
													"nodeType": "YulBlock",
													"src": "2480:156:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "2526:16:23",
																"nodeType": "YulBlock",
																"src": "2526:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2535:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2535:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2538:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2538:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2528:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2528:6:23"
																			},
																			"nativeSrc": "2528:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2528:12:23"
																		},
																		"nativeSrc": "2528:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2528:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2501:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "2501:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2510:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "2510:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2497:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2497:3:23"
																		},
																		"nativeSrc": "2497:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2497:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2522:2:23",
																		"nodeType": "YulLiteral",
																		"src": "2522:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2493:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2493:3:23"
																},
																"nativeSrc": "2493:32:23",
																"nodeType": "YulFunctionCall",
																"src": "2493:32:23"
															},
															"nativeSrc": "2490:52:23",
															"nodeType": "YulIf",
															"src": "2490:52:23"
														},
														{
															"nativeSrc": "2551:14:23",
															"nodeType": "YulVariableDeclaration",
															"src": "2551:14:23",
															"value": {
																"kind": "number",
																"nativeSrc": "2564:1:23",
																"nodeType": "YulLiteral",
																"src": "2564:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2555:5:23",
																	"nodeType": "YulTypedName",
																	"src": "2555:5:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2574:32:23",
															"nodeType": "YulAssignment",
															"src": "2574:32:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2596:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2596:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2583:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "2583:12:23"
																},
																"nativeSrc": "2583:23:23",
																"nodeType": "YulFunctionCall",
																"src": "2583:23:23"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2574:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "2574:5:23"
																}
															]
														},
														{
															"nativeSrc": "2615:15:23",
															"nodeType": "YulAssignment",
															"src": "2615:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "2625:5:23",
																"nodeType": "YulIdentifier",
																"src": "2625:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2615:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2615:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2410:226:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2446:9:23",
														"nodeType": "YulTypedName",
														"src": "2446:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2457:7:23",
														"nodeType": "YulTypedName",
														"src": "2457:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2469:6:23",
														"nodeType": "YulTypedName",
														"src": "2469:6:23",
														"type": ""
													}
												],
												"src": "2410:226:23"
											},
											{
												"body": {
													"nativeSrc": "2810:843:23",
													"nodeType": "YulBlock",
													"src": "2810:843:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "2857:16:23",
																"nodeType": "YulBlock",
																"src": "2857:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2866:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2866:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2869:1:23",
																					"nodeType": "YulLiteral",
																					"src": "2869:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2859:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "2859:6:23"
																			},
																			"nativeSrc": "2859:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "2859:12:23"
																		},
																		"nativeSrc": "2859:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "2859:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2831:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "2831:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2840:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "2840:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2827:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "2827:3:23"
																		},
																		"nativeSrc": "2827:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "2827:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2852:3:23",
																		"nodeType": "YulLiteral",
																		"src": "2852:3:23",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2823:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "2823:3:23"
																},
																"nativeSrc": "2823:33:23",
																"nodeType": "YulFunctionCall",
																"src": "2823:33:23"
															},
															"nativeSrc": "2820:53:23",
															"nodeType": "YulIf",
															"src": "2820:53:23"
														},
														{
															"nativeSrc": "2882:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "2882:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2908:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "2908:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2895:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "2895:12:23"
																},
																"nativeSrc": "2895:23:23",
																"nodeType": "YulFunctionCall",
																"src": "2895:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2886:5:23",
																	"nodeType": "YulTypedName",
																	"src": "2886:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2952:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "2952:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "2927:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "2927:24:23"
																},
																"nativeSrc": "2927:31:23",
																"nodeType": "YulFunctionCall",
																"src": "2927:31:23"
															},
															"nativeSrc": "2927:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "2927:31:23"
														},
														{
															"nativeSrc": "2967:15:23",
															"nodeType": "YulAssignment",
															"src": "2967:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "2977:5:23",
																"nodeType": "YulIdentifier",
																"src": "2977:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2967:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "2967:6:23"
																}
															]
														},
														{
															"nativeSrc": "2991:47:23",
															"nodeType": "YulVariableDeclaration",
															"src": "2991:47:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3023:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3023:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3034:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3034:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3019:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3019:3:23"
																		},
																		"nativeSrc": "3019:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3019:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3006:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "3006:12:23"
																},
																"nativeSrc": "3006:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3006:32:23"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "2995:7:23",
																	"nodeType": "YulTypedName",
																	"src": "2995:7:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nativeSrc": "3072:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "3072:7:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "3047:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "3047:24:23"
																},
																"nativeSrc": "3047:33:23",
																"nodeType": "YulFunctionCall",
																"src": "3047:33:23"
															},
															"nativeSrc": "3047:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "3047:33:23"
														},
														{
															"nativeSrc": "3089:17:23",
															"nodeType": "YulAssignment",
															"src": "3089:17:23",
															"value": {
																"name": "value_1",
																"nativeSrc": "3099:7:23",
																"nodeType": "YulIdentifier",
																"src": "3099:7:23"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "3089:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3089:6:23"
																}
															]
														},
														{
															"nativeSrc": "3115:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3115:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "3130:1:23",
																"nodeType": "YulLiteral",
																"src": "3130:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "3119:7:23",
																	"nodeType": "YulTypedName",
																	"src": "3119:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3140:43:23",
															"nodeType": "YulAssignment",
															"src": "3140:43:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3168:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3168:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3179:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3179:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3164:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3164:3:23"
																		},
																		"nativeSrc": "3164:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3164:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3151:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "3151:12:23"
																},
																"nativeSrc": "3151:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3151:32:23"
															},
															"variableNames": [
																{
																	"name": "value_2",
																	"nativeSrc": "3140:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "3140:7:23"
																}
															]
														},
														{
															"nativeSrc": "3192:17:23",
															"nodeType": "YulAssignment",
															"src": "3192:17:23",
															"value": {
																"name": "value_2",
																"nativeSrc": "3202:7:23",
																"nodeType": "YulIdentifier",
																"src": "3202:7:23"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "3192:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3192:6:23"
																}
															]
														},
														{
															"nativeSrc": "3218:46:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3218:46:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3249:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3249:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3260:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3260:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3245:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3245:3:23"
																		},
																		"nativeSrc": "3245:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3245:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3232:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "3232:12:23"
																},
																"nativeSrc": "3232:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3232:32:23"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "3222:6:23",
																	"nodeType": "YulTypedName",
																	"src": "3222:6:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3307:16:23",
																"nodeType": "YulBlock",
																"src": "3307:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3316:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3316:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3319:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3319:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3309:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3309:6:23"
																			},
																			"nativeSrc": "3309:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3309:12:23"
																		},
																		"nativeSrc": "3309:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3309:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "3279:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3279:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3287:18:23",
																		"nodeType": "YulLiteral",
																		"src": "3287:18:23",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3276:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "3276:2:23"
																},
																"nativeSrc": "3276:30:23",
																"nodeType": "YulFunctionCall",
																"src": "3276:30:23"
															},
															"nativeSrc": "3273:50:23",
															"nodeType": "YulIf",
															"src": "3273:50:23"
														},
														{
															"nativeSrc": "3332:32:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3332:32:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3346:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3346:9:23"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "3357:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3357:6:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3342:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3342:3:23"
																},
																"nativeSrc": "3342:22:23",
																"nodeType": "YulFunctionCall",
																"src": "3342:22:23"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "3336:2:23",
																	"nodeType": "YulTypedName",
																	"src": "3336:2:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3412:16:23",
																"nodeType": "YulBlock",
																"src": "3412:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3421:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3421:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3424:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3424:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3414:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3414:6:23"
																			},
																			"nativeSrc": "3414:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3414:12:23"
																		},
																		"nativeSrc": "3414:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3414:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "3391:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "3391:2:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3395:4:23",
																						"nodeType": "YulLiteral",
																						"src": "3395:4:23",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3387:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3387:3:23"
																				},
																				"nativeSrc": "3387:13:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3387:13:23"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3402:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3402:7:23"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "3383:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3383:3:23"
																		},
																		"nativeSrc": "3383:27:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3383:27:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3376:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3376:6:23"
																},
																"nativeSrc": "3376:35:23",
																"nodeType": "YulFunctionCall",
																"src": "3376:35:23"
															},
															"nativeSrc": "3373:55:23",
															"nodeType": "YulIf",
															"src": "3373:55:23"
														},
														{
															"nativeSrc": "3437:30:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3437:30:23",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "3464:2:23",
																		"nodeType": "YulIdentifier",
																		"src": "3464:2:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3451:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "3451:12:23"
																},
																"nativeSrc": "3451:16:23",
																"nodeType": "YulFunctionCall",
																"src": "3451:16:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3441:6:23",
																	"nodeType": "YulTypedName",
																	"src": "3441:6:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3510:16:23",
																"nodeType": "YulBlock",
																"src": "3510:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3519:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3519:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3522:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3522:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3512:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3512:6:23"
																			},
																			"nativeSrc": "3512:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3512:12:23"
																		},
																		"nativeSrc": "3512:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3512:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "3482:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "3482:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3490:18:23",
																		"nodeType": "YulLiteral",
																		"src": "3490:18:23",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3479:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "3479:2:23"
																},
																"nativeSrc": "3479:30:23",
																"nodeType": "YulFunctionCall",
																"src": "3479:30:23"
															},
															"nativeSrc": "3476:50:23",
															"nodeType": "YulIf",
															"src": "3476:50:23"
														},
														{
															"body": {
																"nativeSrc": "3576:16:23",
																"nodeType": "YulBlock",
																"src": "3576:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3585:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3585:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3588:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3588:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3578:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3578:6:23"
																			},
																			"nativeSrc": "3578:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3578:12:23"
																		},
																		"nativeSrc": "3578:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3578:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "3549:2:23",
																						"nodeType": "YulIdentifier",
																						"src": "3549:2:23"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "3553:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "3553:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "3545:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "3545:3:23"
																				},
																				"nativeSrc": "3545:15:23",
																				"nodeType": "YulFunctionCall",
																				"src": "3545:15:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3562:2:23",
																				"nodeType": "YulLiteral",
																				"src": "3562:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3541:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3541:3:23"
																		},
																		"nativeSrc": "3541:24:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3541:24:23"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "3567:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "3567:7:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3538:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "3538:2:23"
																},
																"nativeSrc": "3538:37:23",
																"nodeType": "YulFunctionCall",
																"src": "3538:37:23"
															},
															"nativeSrc": "3535:57:23",
															"nodeType": "YulIf",
															"src": "3535:57:23"
														},
														{
															"nativeSrc": "3601:21:23",
															"nodeType": "YulAssignment",
															"src": "3601:21:23",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "3615:2:23",
																		"nodeType": "YulIdentifier",
																		"src": "3615:2:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3619:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3619:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3611:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3611:3:23"
																},
																"nativeSrc": "3611:11:23",
																"nodeType": "YulFunctionCall",
																"src": "3611:11:23"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "3601:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3601:6:23"
																}
															]
														},
														{
															"nativeSrc": "3631:16:23",
															"nodeType": "YulAssignment",
															"src": "3631:16:23",
															"value": {
																"name": "length",
																"nativeSrc": "3641:6:23",
																"nodeType": "YulIdentifier",
																"src": "3641:6:23"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "3631:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3631:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$167t_addresst_uint256t_bytes_calldata_ptr",
												"nativeSrc": "2641:1012:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2744:9:23",
														"nodeType": "YulTypedName",
														"src": "2744:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2755:7:23",
														"nodeType": "YulTypedName",
														"src": "2755:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2767:6:23",
														"nodeType": "YulTypedName",
														"src": "2767:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2775:6:23",
														"nodeType": "YulTypedName",
														"src": "2775:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2783:6:23",
														"nodeType": "YulTypedName",
														"src": "2783:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2791:6:23",
														"nodeType": "YulTypedName",
														"src": "2791:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "2799:6:23",
														"nodeType": "YulTypedName",
														"src": "2799:6:23",
														"type": ""
													}
												],
												"src": "2641:1012:23"
											},
											{
												"body": {
													"nativeSrc": "3728:177:23",
													"nodeType": "YulBlock",
													"src": "3728:177:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "3774:16:23",
																"nodeType": "YulBlock",
																"src": "3774:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3783:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3783:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3786:1:23",
																					"nodeType": "YulLiteral",
																					"src": "3786:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3776:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "3776:6:23"
																			},
																			"nativeSrc": "3776:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "3776:12:23"
																		},
																		"nativeSrc": "3776:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "3776:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3749:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "3749:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3758:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "3758:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3745:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "3745:3:23"
																		},
																		"nativeSrc": "3745:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "3745:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3770:2:23",
																		"nodeType": "YulLiteral",
																		"src": "3770:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3741:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "3741:3:23"
																},
																"nativeSrc": "3741:32:23",
																"nodeType": "YulFunctionCall",
																"src": "3741:32:23"
															},
															"nativeSrc": "3738:52:23",
															"nodeType": "YulIf",
															"src": "3738:52:23"
														},
														{
															"nativeSrc": "3799:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "3799:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3825:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "3825:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3812:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "3812:12:23"
																},
																"nativeSrc": "3812:23:23",
																"nodeType": "YulFunctionCall",
																"src": "3812:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "3803:5:23",
																	"nodeType": "YulTypedName",
																	"src": "3803:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "3869:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "3869:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "3844:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "3844:24:23"
																},
																"nativeSrc": "3844:31:23",
																"nodeType": "YulFunctionCall",
																"src": "3844:31:23"
															},
															"nativeSrc": "3844:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "3844:31:23"
														},
														{
															"nativeSrc": "3884:15:23",
															"nodeType": "YulAssignment",
															"src": "3884:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "3894:5:23",
																"nodeType": "YulIdentifier",
																"src": "3894:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3884:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "3884:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "3658:247:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3694:9:23",
														"nodeType": "YulTypedName",
														"src": "3694:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3705:7:23",
														"nodeType": "YulTypedName",
														"src": "3705:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3717:6:23",
														"nodeType": "YulTypedName",
														"src": "3717:6:23",
														"type": ""
													}
												],
												"src": "3658:247:23"
											},
											{
												"body": {
													"nativeSrc": "4267:881:23",
													"nodeType": "YulBlock",
													"src": "4267:881:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4284:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "4284:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "4299:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4299:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4311:3:23",
																						"nodeType": "YulLiteral",
																						"src": "4311:3:23",
																						"type": "",
																						"value": "248"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4316:3:23",
																						"nodeType": "YulLiteral",
																						"src": "4316:3:23",
																						"type": "",
																						"value": "255"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "4307:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4307:3:23"
																				},
																				"nativeSrc": "4307:13:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4307:13:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4295:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4295:3:23"
																		},
																		"nativeSrc": "4295:26:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4295:26:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4277:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4277:6:23"
																},
																"nativeSrc": "4277:45:23",
																"nodeType": "YulFunctionCall",
																"src": "4277:45:23"
															},
															"nativeSrc": "4277:45:23",
															"nodeType": "YulExpressionStatement",
															"src": "4277:45:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4342:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4342:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4353:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4353:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4338:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4338:3:23"
																		},
																		"nativeSrc": "4338:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4338:18:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4358:3:23",
																		"nodeType": "YulLiteral",
																		"src": "4358:3:23",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4331:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4331:6:23"
																},
																"nativeSrc": "4331:31:23",
																"nodeType": "YulFunctionCall",
																"src": "4331:31:23"
															},
															"nativeSrc": "4331:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "4331:31:23"
														},
														{
															"nativeSrc": "4371:60:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4371:60:23",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "4403:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4403:6:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4415:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4415:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4426:3:23",
																				"nodeType": "YulLiteral",
																				"src": "4426:3:23",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4411:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4411:3:23"
																		},
																		"nativeSrc": "4411:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4411:19:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "4385:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "4385:17:23"
																},
																"nativeSrc": "4385:46:23",
																"nodeType": "YulFunctionCall",
																"src": "4385:46:23"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nativeSrc": "4375:6:23",
																	"nodeType": "YulTypedName",
																	"src": "4375:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4451:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4451:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4462:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4462:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4447:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4447:3:23"
																		},
																		"nativeSrc": "4447:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4447:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nativeSrc": "4471:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4471:6:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4479:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4479:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4467:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4467:3:23"
																		},
																		"nativeSrc": "4467:22:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4467:22:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4440:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4440:6:23"
																},
																"nativeSrc": "4440:50:23",
																"nodeType": "YulFunctionCall",
																"src": "4440:50:23"
															},
															"nativeSrc": "4440:50:23",
															"nodeType": "YulExpressionStatement",
															"src": "4440:50:23"
														},
														{
															"nativeSrc": "4499:47:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4499:47:23",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "4531:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4531:6:23"
																	},
																	{
																		"name": "tail_1",
																		"nativeSrc": "4539:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4539:6:23"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "4513:17:23",
																	"nodeType": "YulIdentifier",
																	"src": "4513:17:23"
																},
																"nativeSrc": "4513:33:23",
																"nodeType": "YulFunctionCall",
																"src": "4513:33:23"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nativeSrc": "4503:6:23",
																	"nodeType": "YulTypedName",
																	"src": "4503:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4566:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4566:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4577:2:23",
																				"nodeType": "YulLiteral",
																				"src": "4577:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4562:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4562:3:23"
																		},
																		"nativeSrc": "4562:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4562:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "4582:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4582:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4555:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4555:6:23"
																},
																"nativeSrc": "4555:34:23",
																"nodeType": "YulFunctionCall",
																"src": "4555:34:23"
															},
															"nativeSrc": "4555:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "4555:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4609:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4609:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4620:3:23",
																				"nodeType": "YulLiteral",
																				"src": "4620:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4605:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4605:3:23"
																		},
																		"nativeSrc": "4605:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4605:19:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "4630:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4630:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4646:3:23",
																								"nodeType": "YulLiteral",
																								"src": "4646:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4651:1:23",
																								"nodeType": "YulLiteral",
																								"src": "4651:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "4642:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "4642:3:23"
																						},
																						"nativeSrc": "4642:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "4642:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4655:1:23",
																						"nodeType": "YulLiteral",
																						"src": "4655:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4638:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "4638:3:23"
																				},
																				"nativeSrc": "4638:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "4638:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4626:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4626:3:23"
																		},
																		"nativeSrc": "4626:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4626:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4598:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4598:6:23"
																},
																"nativeSrc": "4598:61:23",
																"nodeType": "YulFunctionCall",
																"src": "4598:61:23"
															},
															"nativeSrc": "4598:61:23",
															"nodeType": "YulExpressionStatement",
															"src": "4598:61:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4679:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4679:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4690:3:23",
																				"nodeType": "YulLiteral",
																				"src": "4690:3:23",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4675:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4675:3:23"
																		},
																		"nativeSrc": "4675:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4675:19:23"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "4696:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4696:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4668:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4668:6:23"
																},
																"nativeSrc": "4668:35:23",
																"nodeType": "YulFunctionCall",
																"src": "4668:35:23"
															},
															"nativeSrc": "4668:35:23",
															"nodeType": "YulExpressionStatement",
															"src": "4668:35:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4723:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4723:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4734:3:23",
																				"nodeType": "YulLiteral",
																				"src": "4734:3:23",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4719:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4719:3:23"
																		},
																		"nativeSrc": "4719:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4719:19:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nativeSrc": "4744:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "4744:6:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4752:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "4752:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4740:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "4740:3:23"
																		},
																		"nativeSrc": "4740:22:23",
																		"nodeType": "YulFunctionCall",
																		"src": "4740:22:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4712:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4712:6:23"
																},
																"nativeSrc": "4712:51:23",
																"nodeType": "YulFunctionCall",
																"src": "4712:51:23"
															},
															"nativeSrc": "4712:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "4712:51:23"
														},
														{
															"nativeSrc": "4772:17:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4772:17:23",
															"value": {
																"name": "tail_2",
																"nativeSrc": "4783:6:23",
																"nodeType": "YulIdentifier",
																"src": "4783:6:23"
															},
															"variables": [
																{
																	"name": "pos",
																	"nativeSrc": "4776:3:23",
																	"nodeType": "YulTypedName",
																	"src": "4776:3:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4798:27:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4798:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "4818:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4818:6:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4812:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "4812:5:23"
																},
																"nativeSrc": "4812:13:23",
																"nodeType": "YulFunctionCall",
																"src": "4812:13:23"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "4802:6:23",
																	"nodeType": "YulTypedName",
																	"src": "4802:6:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "4841:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4841:6:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "4849:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4849:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4834:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "4834:6:23"
																},
																"nativeSrc": "4834:22:23",
																"nodeType": "YulFunctionCall",
																"src": "4834:22:23"
															},
															"nativeSrc": "4834:22:23",
															"nodeType": "YulExpressionStatement",
															"src": "4834:22:23"
														},
														{
															"nativeSrc": "4865:22:23",
															"nodeType": "YulAssignment",
															"src": "4865:22:23",
															"value": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "4876:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4876:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4884:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4884:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4872:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4872:3:23"
																},
																"nativeSrc": "4872:15:23",
																"nodeType": "YulFunctionCall",
																"src": "4872:15:23"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "4865:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4865:3:23"
																}
															]
														},
														{
															"nativeSrc": "4896:29:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4896:29:23",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "4914:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4914:6:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4922:2:23",
																		"nodeType": "YulLiteral",
																		"src": "4922:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4910:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "4910:3:23"
																},
																"nativeSrc": "4910:15:23",
																"nodeType": "YulFunctionCall",
																"src": "4910:15:23"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "4900:6:23",
																	"nodeType": "YulTypedName",
																	"src": "4900:6:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4934:10:23",
															"nodeType": "YulVariableDeclaration",
															"src": "4934:10:23",
															"value": {
																"kind": "number",
																"nativeSrc": "4943:1:23",
																"nodeType": "YulLiteral",
																"src": "4943:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "4938:1:23",
																	"nodeType": "YulTypedName",
																	"src": "4938:1:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5002:120:23",
																"nodeType": "YulBlock",
																"src": "5002:120:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "5023:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5023:3:23"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nativeSrc": "5034:6:23",
																							"nodeType": "YulIdentifier",
																							"src": "5034:6:23"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "5028:5:23",
																						"nodeType": "YulIdentifier",
																						"src": "5028:5:23"
																					},
																					"nativeSrc": "5028:13:23",
																					"nodeType": "YulFunctionCall",
																					"src": "5028:13:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5016:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "5016:6:23"
																			},
																			"nativeSrc": "5016:26:23",
																			"nodeType": "YulFunctionCall",
																			"src": "5016:26:23"
																		},
																		"nativeSrc": "5016:26:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "5016:26:23"
																	},
																	{
																		"nativeSrc": "5055:19:23",
																		"nodeType": "YulAssignment",
																		"src": "5055:19:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "5066:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5066:3:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5071:2:23",
																					"nodeType": "YulLiteral",
																					"src": "5071:2:23",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5062:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "5062:3:23"
																			},
																			"nativeSrc": "5062:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "5062:12:23"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "5055:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "5055:3:23"
																			}
																		]
																	},
																	{
																		"nativeSrc": "5087:25:23",
																		"nodeType": "YulAssignment",
																		"src": "5087:25:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "5101:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "5101:6:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5109:2:23",
																					"nodeType": "YulLiteral",
																					"src": "5109:2:23",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "5097:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "5097:3:23"
																			},
																			"nativeSrc": "5097:15:23",
																			"nodeType": "YulFunctionCall",
																			"src": "5097:15:23"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "5087:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "5087:6:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "4964:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "4964:1:23"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "4967:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "4967:6:23"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "4961:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "4961:2:23"
																},
																"nativeSrc": "4961:13:23",
																"nodeType": "YulFunctionCall",
																"src": "4961:13:23"
															},
															"nativeSrc": "4953:169:23",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "4975:18:23",
																"nodeType": "YulBlock",
																"src": "4975:18:23",
																"statements": [
																	{
																		"nativeSrc": "4977:14:23",
																		"nodeType": "YulAssignment",
																		"src": "4977:14:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "4986:1:23",
																					"nodeType": "YulIdentifier",
																					"src": "4986:1:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4989:1:23",
																					"nodeType": "YulLiteral",
																					"src": "4989:1:23",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4982:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "4982:3:23"
																			},
																			"nativeSrc": "4982:9:23",
																			"nodeType": "YulFunctionCall",
																			"src": "4982:9:23"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "4977:1:23",
																				"nodeType": "YulIdentifier",
																				"src": "4977:1:23"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "4957:3:23",
																"nodeType": "YulBlock",
																"src": "4957:3:23",
																"statements": []
															},
															"src": "4953:169:23"
														},
														{
															"nativeSrc": "5131:11:23",
															"nodeType": "YulAssignment",
															"src": "5131:11:23",
															"value": {
																"name": "pos",
																"nativeSrc": "5139:3:23",
																"nodeType": "YulIdentifier",
																"src": "5139:3:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5131:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "5131:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "3910:1238:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4188:9:23",
														"nodeType": "YulTypedName",
														"src": "4188:9:23",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "4199:6:23",
														"nodeType": "YulTypedName",
														"src": "4199:6:23",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "4207:6:23",
														"nodeType": "YulTypedName",
														"src": "4207:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4215:6:23",
														"nodeType": "YulTypedName",
														"src": "4215:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4223:6:23",
														"nodeType": "YulTypedName",
														"src": "4223:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4231:6:23",
														"nodeType": "YulTypedName",
														"src": "4231:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4239:6:23",
														"nodeType": "YulTypedName",
														"src": "4239:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4247:6:23",
														"nodeType": "YulTypedName",
														"src": "4247:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4258:4:23",
														"nodeType": "YulTypedName",
														"src": "4258:4:23",
														"type": ""
													}
												],
												"src": "3910:1238:23"
											},
											{
												"body": {
													"nativeSrc": "5254:102:23",
													"nodeType": "YulBlock",
													"src": "5254:102:23",
													"statements": [
														{
															"nativeSrc": "5264:26:23",
															"nodeType": "YulAssignment",
															"src": "5264:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5276:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5276:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5287:2:23",
																		"nodeType": "YulLiteral",
																		"src": "5287:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5272:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5272:3:23"
																},
																"nativeSrc": "5272:18:23",
																"nodeType": "YulFunctionCall",
																"src": "5272:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5264:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "5264:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5306:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5306:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5321:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "5321:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5337:3:23",
																								"nodeType": "YulLiteral",
																								"src": "5337:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5342:1:23",
																								"nodeType": "YulLiteral",
																								"src": "5342:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5333:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "5333:3:23"
																						},
																						"nativeSrc": "5333:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "5333:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5346:1:23",
																						"nodeType": "YulLiteral",
																						"src": "5346:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5329:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "5329:3:23"
																				},
																				"nativeSrc": "5329:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "5329:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5317:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5317:3:23"
																		},
																		"nativeSrc": "5317:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5317:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5299:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5299:6:23"
																},
																"nativeSrc": "5299:51:23",
																"nodeType": "YulFunctionCall",
																"src": "5299:51:23"
															},
															"nativeSrc": "5299:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "5299:51:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "5153:203:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5223:9:23",
														"nodeType": "YulTypedName",
														"src": "5223:9:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5234:6:23",
														"nodeType": "YulTypedName",
														"src": "5234:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5245:4:23",
														"nodeType": "YulTypedName",
														"src": "5245:4:23",
														"type": ""
													}
												],
												"src": "5153:203:23"
											},
											{
												"body": {
													"nativeSrc": "5531:867:23",
													"nodeType": "YulBlock",
													"src": "5531:867:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "5578:16:23",
																"nodeType": "YulBlock",
																"src": "5578:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5587:1:23",
																					"nodeType": "YulLiteral",
																					"src": "5587:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5590:1:23",
																					"nodeType": "YulLiteral",
																					"src": "5590:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5580:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "5580:6:23"
																			},
																			"nativeSrc": "5580:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "5580:12:23"
																		},
																		"nativeSrc": "5580:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "5580:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5552:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "5552:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5561:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5561:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5548:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5548:3:23"
																		},
																		"nativeSrc": "5548:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5548:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5573:3:23",
																		"nodeType": "YulLiteral",
																		"src": "5573:3:23",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5544:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "5544:3:23"
																},
																"nativeSrc": "5544:33:23",
																"nodeType": "YulFunctionCall",
																"src": "5544:33:23"
															},
															"nativeSrc": "5541:53:23",
															"nodeType": "YulIf",
															"src": "5541:53:23"
														},
														{
															"nativeSrc": "5603:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5603:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5629:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "5629:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "5616:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "5616:12:23"
																},
																"nativeSrc": "5616:23:23",
																"nodeType": "YulFunctionCall",
																"src": "5616:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "5607:5:23",
																	"nodeType": "YulTypedName",
																	"src": "5607:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5673:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "5673:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "5648:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "5648:24:23"
																},
																"nativeSrc": "5648:31:23",
																"nodeType": "YulFunctionCall",
																"src": "5648:31:23"
															},
															"nativeSrc": "5648:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "5648:31:23"
														},
														{
															"nativeSrc": "5688:15:23",
															"nodeType": "YulAssignment",
															"src": "5688:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "5698:5:23",
																"nodeType": "YulIdentifier",
																"src": "5698:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "5688:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5688:6:23"
																}
															]
														},
														{
															"nativeSrc": "5712:47:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5712:47:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5744:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5744:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5755:2:23",
																				"nodeType": "YulLiteral",
																				"src": "5755:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5740:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5740:3:23"
																		},
																		"nativeSrc": "5740:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5740:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "5727:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "5727:12:23"
																},
																"nativeSrc": "5727:32:23",
																"nodeType": "YulFunctionCall",
																"src": "5727:32:23"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "5716:7:23",
																	"nodeType": "YulTypedName",
																	"src": "5716:7:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nativeSrc": "5793:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "5793:7:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "5768:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "5768:24:23"
																},
																"nativeSrc": "5768:33:23",
																"nodeType": "YulFunctionCall",
																"src": "5768:33:23"
															},
															"nativeSrc": "5768:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "5768:33:23"
														},
														{
															"nativeSrc": "5810:17:23",
															"nodeType": "YulAssignment",
															"src": "5810:17:23",
															"value": {
																"name": "value_1",
																"nativeSrc": "5820:7:23",
																"nodeType": "YulIdentifier",
																"src": "5820:7:23"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "5810:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5810:6:23"
																}
															]
														},
														{
															"nativeSrc": "5836:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5836:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "5851:1:23",
																"nodeType": "YulLiteral",
																"src": "5851:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "5840:7:23",
																	"nodeType": "YulTypedName",
																	"src": "5840:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5861:43:23",
															"nodeType": "YulAssignment",
															"src": "5861:43:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5889:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5889:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5900:2:23",
																				"nodeType": "YulLiteral",
																				"src": "5900:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5885:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5885:3:23"
																		},
																		"nativeSrc": "5885:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5885:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "5872:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "5872:12:23"
																},
																"nativeSrc": "5872:32:23",
																"nodeType": "YulFunctionCall",
																"src": "5872:32:23"
															},
															"variableNames": [
																{
																	"name": "value_2",
																	"nativeSrc": "5861:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "5861:7:23"
																}
															]
														},
														{
															"nativeSrc": "5913:17:23",
															"nodeType": "YulAssignment",
															"src": "5913:17:23",
															"value": {
																"name": "value_2",
																"nativeSrc": "5923:7:23",
																"nodeType": "YulIdentifier",
																"src": "5923:7:23"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "5913:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "5913:6:23"
																}
															]
														},
														{
															"nativeSrc": "5939:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "5939:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "5954:1:23",
																"nodeType": "YulLiteral",
																"src": "5954:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_3",
																	"nativeSrc": "5943:7:23",
																	"nodeType": "YulTypedName",
																	"src": "5943:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5964:43:23",
															"nodeType": "YulAssignment",
															"src": "5964:43:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5992:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "5992:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6003:2:23",
																				"nodeType": "YulLiteral",
																				"src": "6003:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5988:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "5988:3:23"
																		},
																		"nativeSrc": "5988:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "5988:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "5975:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "5975:12:23"
																},
																"nativeSrc": "5975:32:23",
																"nodeType": "YulFunctionCall",
																"src": "5975:32:23"
															},
															"variableNames": [
																{
																	"name": "value_3",
																	"nativeSrc": "5964:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "5964:7:23"
																}
															]
														},
														{
															"nativeSrc": "6016:17:23",
															"nodeType": "YulAssignment",
															"src": "6016:17:23",
															"value": {
																"name": "value_3",
																"nativeSrc": "6026:7:23",
																"nodeType": "YulIdentifier",
																"src": "6026:7:23"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "6016:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6016:6:23"
																}
															]
														},
														{
															"nativeSrc": "6042:48:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6042:48:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6074:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "6074:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6085:3:23",
																				"nodeType": "YulLiteral",
																				"src": "6085:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6070:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6070:3:23"
																		},
																		"nativeSrc": "6070:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6070:19:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "6057:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "6057:12:23"
																},
																"nativeSrc": "6057:33:23",
																"nodeType": "YulFunctionCall",
																"src": "6057:33:23"
															},
															"variables": [
																{
																	"name": "value_4",
																	"nativeSrc": "6046:7:23",
																	"nodeType": "YulTypedName",
																	"src": "6046:7:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6142:16:23",
																"nodeType": "YulBlock",
																"src": "6142:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6151:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6151:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6154:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6154:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6144:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6144:6:23"
																			},
																			"nativeSrc": "6144:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6144:12:23"
																		},
																		"nativeSrc": "6144:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "6144:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_4",
																				"nativeSrc": "6112:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "6112:7:23"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_4",
																						"nativeSrc": "6125:7:23",
																						"nodeType": "YulIdentifier",
																						"src": "6125:7:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6134:4:23",
																						"nodeType": "YulLiteral",
																						"src": "6134:4:23",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "6121:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "6121:3:23"
																				},
																				"nativeSrc": "6121:18:23",
																				"nodeType": "YulFunctionCall",
																				"src": "6121:18:23"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "6109:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "6109:2:23"
																		},
																		"nativeSrc": "6109:31:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6109:31:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "6102:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6102:6:23"
																},
																"nativeSrc": "6102:39:23",
																"nodeType": "YulFunctionCall",
																"src": "6102:39:23"
															},
															"nativeSrc": "6099:59:23",
															"nodeType": "YulIf",
															"src": "6099:59:23"
														},
														{
															"nativeSrc": "6167:17:23",
															"nodeType": "YulAssignment",
															"src": "6167:17:23",
															"value": {
																"name": "value_4",
																"nativeSrc": "6177:7:23",
																"nodeType": "YulIdentifier",
																"src": "6177:7:23"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "6167:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6167:6:23"
																}
															]
														},
														{
															"nativeSrc": "6193:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6193:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "6208:1:23",
																"nodeType": "YulLiteral",
																"src": "6208:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_5",
																	"nativeSrc": "6197:7:23",
																	"nodeType": "YulTypedName",
																	"src": "6197:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "6218:44:23",
															"nodeType": "YulAssignment",
															"src": "6218:44:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6246:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "6246:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6257:3:23",
																				"nodeType": "YulLiteral",
																				"src": "6257:3:23",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6242:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6242:3:23"
																		},
																		"nativeSrc": "6242:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6242:19:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "6229:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "6229:12:23"
																},
																"nativeSrc": "6229:33:23",
																"nodeType": "YulFunctionCall",
																"src": "6229:33:23"
															},
															"variableNames": [
																{
																	"name": "value_5",
																	"nativeSrc": "6218:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "6218:7:23"
																}
															]
														},
														{
															"nativeSrc": "6271:17:23",
															"nodeType": "YulAssignment",
															"src": "6271:17:23",
															"value": {
																"name": "value_5",
																"nativeSrc": "6281:7:23",
																"nodeType": "YulIdentifier",
																"src": "6281:7:23"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "6271:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6271:6:23"
																}
															]
														},
														{
															"nativeSrc": "6297:16:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6297:16:23",
															"value": {
																"kind": "number",
																"nativeSrc": "6312:1:23",
																"nodeType": "YulLiteral",
																"src": "6312:1:23",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_6",
																	"nativeSrc": "6301:7:23",
																	"nodeType": "YulTypedName",
																	"src": "6301:7:23",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "6322:44:23",
															"nodeType": "YulAssignment",
															"src": "6322:44:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6350:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "6350:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6361:3:23",
																				"nodeType": "YulLiteral",
																				"src": "6361:3:23",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6346:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6346:3:23"
																		},
																		"nativeSrc": "6346:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6346:19:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "6333:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "6333:12:23"
																},
																"nativeSrc": "6333:33:23",
																"nodeType": "YulFunctionCall",
																"src": "6333:33:23"
															},
															"variableNames": [
																{
																	"name": "value_6",
																	"nativeSrc": "6322:7:23",
																	"nodeType": "YulIdentifier",
																	"src": "6322:7:23"
																}
															]
														},
														{
															"nativeSrc": "6375:17:23",
															"nodeType": "YulAssignment",
															"src": "6375:17:23",
															"value": {
																"name": "value_6",
																"nativeSrc": "6385:7:23",
																"nodeType": "YulIdentifier",
																"src": "6385:7:23"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nativeSrc": "6375:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6375:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "5361:1037:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5449:9:23",
														"nodeType": "YulTypedName",
														"src": "5449:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5460:7:23",
														"nodeType": "YulTypedName",
														"src": "5460:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5472:6:23",
														"nodeType": "YulTypedName",
														"src": "5472:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5480:6:23",
														"nodeType": "YulTypedName",
														"src": "5480:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5488:6:23",
														"nodeType": "YulTypedName",
														"src": "5488:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "5496:6:23",
														"nodeType": "YulTypedName",
														"src": "5496:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "5504:6:23",
														"nodeType": "YulTypedName",
														"src": "5504:6:23",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "5512:6:23",
														"nodeType": "YulTypedName",
														"src": "5512:6:23",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "5520:6:23",
														"nodeType": "YulTypedName",
														"src": "5520:6:23",
														"type": ""
													}
												],
												"src": "5361:1037:23"
											},
											{
												"body": {
													"nativeSrc": "6490:301:23",
													"nodeType": "YulBlock",
													"src": "6490:301:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "6536:16:23",
																"nodeType": "YulBlock",
																"src": "6536:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "6545:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6545:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6548:1:23",
																					"nodeType": "YulLiteral",
																					"src": "6548:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6538:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6538:6:23"
																			},
																			"nativeSrc": "6538:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6538:12:23"
																		},
																		"nativeSrc": "6538:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "6538:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "6511:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "6511:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "6520:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "6520:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "6507:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6507:3:23"
																		},
																		"nativeSrc": "6507:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6507:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6532:2:23",
																		"nodeType": "YulLiteral",
																		"src": "6532:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "6503:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6503:3:23"
																},
																"nativeSrc": "6503:32:23",
																"nodeType": "YulFunctionCall",
																"src": "6503:32:23"
															},
															"nativeSrc": "6500:52:23",
															"nodeType": "YulIf",
															"src": "6500:52:23"
														},
														{
															"nativeSrc": "6561:36:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6561:36:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6587:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "6587:9:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "6574:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "6574:12:23"
																},
																"nativeSrc": "6574:23:23",
																"nodeType": "YulFunctionCall",
																"src": "6574:23:23"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "6565:5:23",
																	"nodeType": "YulTypedName",
																	"src": "6565:5:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6631:5:23",
																		"nodeType": "YulIdentifier",
																		"src": "6631:5:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "6606:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "6606:24:23"
																},
																"nativeSrc": "6606:31:23",
																"nodeType": "YulFunctionCall",
																"src": "6606:31:23"
															},
															"nativeSrc": "6606:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "6606:31:23"
														},
														{
															"nativeSrc": "6646:15:23",
															"nodeType": "YulAssignment",
															"src": "6646:15:23",
															"value": {
																"name": "value",
																"nativeSrc": "6656:5:23",
																"nodeType": "YulIdentifier",
																"src": "6656:5:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "6646:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6646:6:23"
																}
															]
														},
														{
															"nativeSrc": "6670:47:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6670:47:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6702:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "6702:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6713:2:23",
																				"nodeType": "YulLiteral",
																				"src": "6713:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6698:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "6698:3:23"
																		},
																		"nativeSrc": "6698:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "6698:18:23"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "6685:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "6685:12:23"
																},
																"nativeSrc": "6685:32:23",
																"nodeType": "YulFunctionCall",
																"src": "6685:32:23"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "6674:7:23",
																	"nodeType": "YulTypedName",
																	"src": "6674:7:23",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nativeSrc": "6751:7:23",
																		"nodeType": "YulIdentifier",
																		"src": "6751:7:23"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nativeSrc": "6726:24:23",
																	"nodeType": "YulIdentifier",
																	"src": "6726:24:23"
																},
																"nativeSrc": "6726:33:23",
																"nodeType": "YulFunctionCall",
																"src": "6726:33:23"
															},
															"nativeSrc": "6726:33:23",
															"nodeType": "YulExpressionStatement",
															"src": "6726:33:23"
														},
														{
															"nativeSrc": "6768:17:23",
															"nodeType": "YulAssignment",
															"src": "6768:17:23",
															"value": {
																"name": "value_1",
																"nativeSrc": "6778:7:23",
																"nodeType": "YulIdentifier",
																"src": "6778:7:23"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "6768:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6768:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "6403:388:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6448:9:23",
														"nodeType": "YulTypedName",
														"src": "6448:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "6459:7:23",
														"nodeType": "YulTypedName",
														"src": "6459:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "6471:6:23",
														"nodeType": "YulTypedName",
														"src": "6471:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6479:6:23",
														"nodeType": "YulTypedName",
														"src": "6479:6:23",
														"type": ""
													}
												],
												"src": "6403:388:23"
											},
											{
												"body": {
													"nativeSrc": "6851:325:23",
													"nodeType": "YulBlock",
													"src": "6851:325:23",
													"statements": [
														{
															"nativeSrc": "6861:22:23",
															"nodeType": "YulAssignment",
															"src": "6861:22:23",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6875:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6875:1:23",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "6878:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "6878:4:23"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "6871:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6871:3:23"
																},
																"nativeSrc": "6871:12:23",
																"nodeType": "YulFunctionCall",
																"src": "6871:12:23"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6861:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6861:6:23"
																}
															]
														},
														{
															"nativeSrc": "6892:38:23",
															"nodeType": "YulVariableDeclaration",
															"src": "6892:38:23",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "6922:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "6922:4:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6928:1:23",
																		"nodeType": "YulLiteral",
																		"src": "6928:1:23",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "6918:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "6918:3:23"
																},
																"nativeSrc": "6918:12:23",
																"nodeType": "YulFunctionCall",
																"src": "6918:12:23"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "6896:18:23",
																	"nodeType": "YulTypedName",
																	"src": "6896:18:23",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6969:31:23",
																"nodeType": "YulBlock",
																"src": "6969:31:23",
																"statements": [
																	{
																		"nativeSrc": "6971:27:23",
																		"nodeType": "YulAssignment",
																		"src": "6971:27:23",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "6985:6:23",
																					"nodeType": "YulIdentifier",
																					"src": "6985:6:23"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "6993:4:23",
																					"nodeType": "YulLiteral",
																					"src": "6993:4:23",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "6981:3:23",
																				"nodeType": "YulIdentifier",
																				"src": "6981:3:23"
																			},
																			"nativeSrc": "6981:17:23",
																			"nodeType": "YulFunctionCall",
																			"src": "6981:17:23"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "6971:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "6971:6:23"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "6949:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "6949:18:23"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "6942:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "6942:6:23"
																},
																"nativeSrc": "6942:26:23",
																"nodeType": "YulFunctionCall",
																"src": "6942:26:23"
															},
															"nativeSrc": "6939:61:23",
															"nodeType": "YulIf",
															"src": "6939:61:23"
														},
														{
															"body": {
																"nativeSrc": "7059:111:23",
																"nodeType": "YulBlock",
																"src": "7059:111:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7080:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7080:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7087:3:23",
																							"nodeType": "YulLiteral",
																							"src": "7087:3:23",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "7092:10:23",
																							"nodeType": "YulLiteral",
																							"src": "7092:10:23",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "7083:3:23",
																						"nodeType": "YulIdentifier",
																						"src": "7083:3:23"
																					},
																					"nativeSrc": "7083:20:23",
																					"nodeType": "YulFunctionCall",
																					"src": "7083:20:23"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7073:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7073:6:23"
																			},
																			"nativeSrc": "7073:31:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7073:31:23"
																		},
																		"nativeSrc": "7073:31:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7073:31:23"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7124:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7124:1:23",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7127:4:23",
																					"nodeType": "YulLiteral",
																					"src": "7127:4:23",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7117:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7117:6:23"
																			},
																			"nativeSrc": "7117:15:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7117:15:23"
																		},
																		"nativeSrc": "7117:15:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7117:15:23"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7152:1:23",
																					"nodeType": "YulLiteral",
																					"src": "7152:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7155:4:23",
																					"nodeType": "YulLiteral",
																					"src": "7155:4:23",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7145:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7145:6:23"
																			},
																			"nativeSrc": "7145:15:23",
																			"nodeType": "YulFunctionCall",
																			"src": "7145:15:23"
																		},
																		"nativeSrc": "7145:15:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "7145:15:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "7015:18:23",
																		"nodeType": "YulIdentifier",
																		"src": "7015:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "7038:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7038:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7046:2:23",
																				"nodeType": "YulLiteral",
																				"src": "7046:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "7035:2:23",
																			"nodeType": "YulIdentifier",
																			"src": "7035:2:23"
																		},
																		"nativeSrc": "7035:14:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7035:14:23"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "7012:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "7012:2:23"
																},
																"nativeSrc": "7012:38:23",
																"nodeType": "YulFunctionCall",
																"src": "7012:38:23"
															},
															"nativeSrc": "7009:161:23",
															"nodeType": "YulIf",
															"src": "7009:161:23"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "6796:380:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "6831:4:23",
														"nodeType": "YulTypedName",
														"src": "6831:4:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6840:6:23",
														"nodeType": "YulTypedName",
														"src": "6840:6:23",
														"type": ""
													}
												],
												"src": "6796:380:23"
											},
											{
												"body": {
													"nativeSrc": "7422:489:23",
													"nodeType": "YulBlock",
													"src": "7422:489:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7439:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "7439:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "7454:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7454:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7470:3:23",
																								"nodeType": "YulLiteral",
																								"src": "7470:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7475:1:23",
																								"nodeType": "YulLiteral",
																								"src": "7475:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7466:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "7466:3:23"
																						},
																						"nativeSrc": "7466:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "7466:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7479:1:23",
																						"nodeType": "YulLiteral",
																						"src": "7479:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7462:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7462:3:23"
																				},
																				"nativeSrc": "7462:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7462:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7450:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7450:3:23"
																		},
																		"nativeSrc": "7450:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7450:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7432:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7432:6:23"
																},
																"nativeSrc": "7432:51:23",
																"nodeType": "YulFunctionCall",
																"src": "7432:51:23"
															},
															"nativeSrc": "7432:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "7432:51:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7503:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7503:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7514:2:23",
																				"nodeType": "YulLiteral",
																				"src": "7514:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7499:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7499:3:23"
																		},
																		"nativeSrc": "7499:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7499:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "7523:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "7523:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7539:3:23",
																								"nodeType": "YulLiteral",
																								"src": "7539:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7544:1:23",
																								"nodeType": "YulLiteral",
																								"src": "7544:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7535:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "7535:3:23"
																						},
																						"nativeSrc": "7535:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "7535:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7548:1:23",
																						"nodeType": "YulLiteral",
																						"src": "7548:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7531:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7531:3:23"
																				},
																				"nativeSrc": "7531:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7531:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7519:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7519:3:23"
																		},
																		"nativeSrc": "7519:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7519:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7492:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7492:6:23"
																},
																"nativeSrc": "7492:60:23",
																"nodeType": "YulFunctionCall",
																"src": "7492:60:23"
															},
															"nativeSrc": "7492:60:23",
															"nodeType": "YulExpressionStatement",
															"src": "7492:60:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7572:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7572:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7583:2:23",
																				"nodeType": "YulLiteral",
																				"src": "7583:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7568:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7568:3:23"
																		},
																		"nativeSrc": "7568:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7568:18:23"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7588:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7588:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7561:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7561:6:23"
																},
																"nativeSrc": "7561:34:23",
																"nodeType": "YulFunctionCall",
																"src": "7561:34:23"
															},
															"nativeSrc": "7561:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "7561:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7615:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7615:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7626:2:23",
																				"nodeType": "YulLiteral",
																				"src": "7626:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7611:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7611:3:23"
																		},
																		"nativeSrc": "7611:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7611:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "7631:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7631:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7604:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7604:6:23"
																},
																"nativeSrc": "7604:34:23",
																"nodeType": "YulFunctionCall",
																"src": "7604:34:23"
															},
															"nativeSrc": "7604:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "7604:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7658:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7658:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7669:3:23",
																				"nodeType": "YulLiteral",
																				"src": "7669:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7654:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7654:3:23"
																		},
																		"nativeSrc": "7654:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7654:19:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7675:3:23",
																		"nodeType": "YulLiteral",
																		"src": "7675:3:23",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7647:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7647:6:23"
																},
																"nativeSrc": "7647:32:23",
																"nodeType": "YulFunctionCall",
																"src": "7647:32:23"
															},
															"nativeSrc": "7647:32:23",
															"nodeType": "YulExpressionStatement",
															"src": "7647:32:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7699:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7699:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7710:3:23",
																				"nodeType": "YulLiteral",
																				"src": "7710:3:23",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7695:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7695:3:23"
																		},
																		"nativeSrc": "7695:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7695:19:23"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "7716:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7716:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7688:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7688:6:23"
																},
																"nativeSrc": "7688:35:23",
																"nodeType": "YulFunctionCall",
																"src": "7688:35:23"
															},
															"nativeSrc": "7688:35:23",
															"nodeType": "YulExpressionStatement",
															"src": "7688:35:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7749:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7749:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7760:3:23",
																				"nodeType": "YulLiteral",
																				"src": "7760:3:23",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7745:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7745:3:23"
																		},
																		"nativeSrc": "7745:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7745:19:23"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "7766:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7766:6:23"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "7774:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "7774:6:23"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "7732:12:23",
																	"nodeType": "YulIdentifier",
																	"src": "7732:12:23"
																},
																"nativeSrc": "7732:49:23",
																"nodeType": "YulFunctionCall",
																"src": "7732:49:23"
															},
															"nativeSrc": "7732:49:23",
															"nodeType": "YulExpressionStatement",
															"src": "7732:49:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "7805:9:23",
																						"nodeType": "YulIdentifier",
																						"src": "7805:9:23"
																					},
																					{
																						"name": "value5",
																						"nativeSrc": "7816:6:23",
																						"nodeType": "YulIdentifier",
																						"src": "7816:6:23"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "7801:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7801:3:23"
																				},
																				"nativeSrc": "7801:22:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7801:22:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7825:3:23",
																				"nodeType": "YulLiteral",
																				"src": "7825:3:23",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7797:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7797:3:23"
																		},
																		"nativeSrc": "7797:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7797:32:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7831:1:23",
																		"nodeType": "YulLiteral",
																		"src": "7831:1:23",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7790:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "7790:6:23"
																},
																"nativeSrc": "7790:43:23",
																"nodeType": "YulFunctionCall",
																"src": "7790:43:23"
															},
															"nativeSrc": "7790:43:23",
															"nodeType": "YulExpressionStatement",
															"src": "7790:43:23"
														},
														{
															"nativeSrc": "7842:63:23",
															"nodeType": "YulAssignment",
															"src": "7842:63:23",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7858:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "7858:9:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value5",
																								"nativeSrc": "7877:6:23",
																								"nodeType": "YulIdentifier",
																								"src": "7877:6:23"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7885:2:23",
																								"nodeType": "YulLiteral",
																								"src": "7885:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "7873:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "7873:3:23"
																						},
																						"nativeSrc": "7873:15:23",
																						"nodeType": "YulFunctionCall",
																						"src": "7873:15:23"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7894:2:23",
																								"nodeType": "YulLiteral",
																								"src": "7894:2:23",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "7890:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "7890:3:23"
																						},
																						"nativeSrc": "7890:7:23",
																						"nodeType": "YulFunctionCall",
																						"src": "7890:7:23"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "7869:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "7869:3:23"
																				},
																				"nativeSrc": "7869:29:23",
																				"nodeType": "YulFunctionCall",
																				"src": "7869:29:23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7854:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "7854:3:23"
																		},
																		"nativeSrc": "7854:45:23",
																		"nodeType": "YulFunctionCall",
																		"src": "7854:45:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7901:3:23",
																		"nodeType": "YulLiteral",
																		"src": "7901:3:23",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7850:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "7850:3:23"
																},
																"nativeSrc": "7850:55:23",
																"nodeType": "YulFunctionCall",
																"src": "7850:55:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7842:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "7842:4:23"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nativeSrc": "7181:730:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7351:9:23",
														"nodeType": "YulTypedName",
														"src": "7351:9:23",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "7362:6:23",
														"nodeType": "YulTypedName",
														"src": "7362:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7370:6:23",
														"nodeType": "YulTypedName",
														"src": "7370:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7378:6:23",
														"nodeType": "YulTypedName",
														"src": "7378:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7386:6:23",
														"nodeType": "YulTypedName",
														"src": "7386:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7394:6:23",
														"nodeType": "YulTypedName",
														"src": "7394:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7402:6:23",
														"nodeType": "YulTypedName",
														"src": "7402:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7413:4:23",
														"nodeType": "YulTypedName",
														"src": "7413:4:23",
														"type": ""
													}
												],
												"src": "7181:730:23"
											},
											{
												"body": {
													"nativeSrc": "7997:103:23",
													"nodeType": "YulBlock",
													"src": "7997:103:23",
													"statements": [
														{
															"body": {
																"nativeSrc": "8043:16:23",
																"nodeType": "YulBlock",
																"src": "8043:16:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8052:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8052:1:23",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8055:1:23",
																					"nodeType": "YulLiteral",
																					"src": "8055:1:23",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8045:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "8045:6:23"
																			},
																			"nativeSrc": "8045:12:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8045:12:23"
																		},
																		"nativeSrc": "8045:12:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8045:12:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "8018:7:23",
																				"nodeType": "YulIdentifier",
																				"src": "8018:7:23"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8027:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "8027:9:23"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8014:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "8014:3:23"
																		},
																		"nativeSrc": "8014:23:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8014:23:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8039:2:23",
																		"nodeType": "YulLiteral",
																		"src": "8039:2:23",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "8010:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8010:3:23"
																},
																"nativeSrc": "8010:32:23",
																"nodeType": "YulFunctionCall",
																"src": "8010:32:23"
															},
															"nativeSrc": "8007:52:23",
															"nodeType": "YulIf",
															"src": "8007:52:23"
														},
														{
															"nativeSrc": "8068:26:23",
															"nodeType": "YulAssignment",
															"src": "8068:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8084:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "8084:9:23"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8078:5:23",
																	"nodeType": "YulIdentifier",
																	"src": "8078:5:23"
																},
																"nativeSrc": "8078:16:23",
																"nodeType": "YulFunctionCall",
																"src": "8078:16:23"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "8068:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8068:6:23"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nativeSrc": "7916:184:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7963:9:23",
														"nodeType": "YulTypedName",
														"src": "7963:9:23",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "7974:7:23",
														"nodeType": "YulTypedName",
														"src": "7974:7:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "7986:6:23",
														"nodeType": "YulTypedName",
														"src": "7986:6:23",
														"type": ""
													}
												],
												"src": "7916:184:23"
											},
											{
												"body": {
													"nativeSrc": "8137:95:23",
													"nodeType": "YulBlock",
													"src": "8137:95:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8154:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8154:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8161:3:23",
																				"nodeType": "YulLiteral",
																				"src": "8161:3:23",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8166:10:23",
																				"nodeType": "YulLiteral",
																				"src": "8166:10:23",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "8157:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "8157:3:23"
																		},
																		"nativeSrc": "8157:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8157:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8147:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8147:6:23"
																},
																"nativeSrc": "8147:31:23",
																"nodeType": "YulFunctionCall",
																"src": "8147:31:23"
															},
															"nativeSrc": "8147:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "8147:31:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8194:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8194:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8197:4:23",
																		"nodeType": "YulLiteral",
																		"src": "8197:4:23",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8187:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8187:6:23"
																},
																"nativeSrc": "8187:15:23",
																"nodeType": "YulFunctionCall",
																"src": "8187:15:23"
															},
															"nativeSrc": "8187:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "8187:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8218:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8218:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8221:4:23",
																		"nodeType": "YulLiteral",
																		"src": "8221:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8211:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8211:6:23"
																},
																"nativeSrc": "8211:15:23",
																"nodeType": "YulFunctionCall",
																"src": "8211:15:23"
															},
															"nativeSrc": "8211:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "8211:15:23"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "8105:127:23",
												"nodeType": "YulFunctionDefinition",
												"src": "8105:127:23"
											},
											{
												"body": {
													"nativeSrc": "8285:77:23",
													"nodeType": "YulBlock",
													"src": "8285:77:23",
													"statements": [
														{
															"nativeSrc": "8295:16:23",
															"nodeType": "YulAssignment",
															"src": "8295:16:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8306:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8306:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8309:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8309:1:23"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8302:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8302:3:23"
																},
																"nativeSrc": "8302:9:23",
																"nodeType": "YulFunctionCall",
																"src": "8302:9:23"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "8295:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8295:3:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8334:22:23",
																"nodeType": "YulBlock",
																"src": "8334:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8336:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "8336:16:23"
																			},
																			"nativeSrc": "8336:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8336:18:23"
																		},
																		"nativeSrc": "8336:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8336:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8326:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8326:1:23"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "8329:3:23",
																		"nodeType": "YulIdentifier",
																		"src": "8329:3:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8323:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "8323:2:23"
																},
																"nativeSrc": "8323:10:23",
																"nodeType": "YulFunctionCall",
																"src": "8323:10:23"
															},
															"nativeSrc": "8320:36:23",
															"nodeType": "YulIf",
															"src": "8320:36:23"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "8237:125:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8268:1:23",
														"nodeType": "YulTypedName",
														"src": "8268:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8271:1:23",
														"nodeType": "YulTypedName",
														"src": "8271:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "8277:3:23",
														"nodeType": "YulTypedName",
														"src": "8277:3:23",
														"type": ""
													}
												],
												"src": "8237:125:23"
											},
											{
												"body": {
													"nativeSrc": "8416:79:23",
													"nodeType": "YulBlock",
													"src": "8416:79:23",
													"statements": [
														{
															"nativeSrc": "8426:17:23",
															"nodeType": "YulAssignment",
															"src": "8426:17:23",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "8438:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8438:1:23"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "8441:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8441:1:23"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nativeSrc": "8434:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8434:3:23"
																},
																"nativeSrc": "8434:9:23",
																"nodeType": "YulFunctionCall",
																"src": "8434:9:23"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nativeSrc": "8426:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "8426:4:23"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8467:22:23",
																"nodeType": "YulBlock",
																"src": "8467:22:23",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "8469:16:23",
																				"nodeType": "YulIdentifier",
																				"src": "8469:16:23"
																			},
																			"nativeSrc": "8469:18:23",
																			"nodeType": "YulFunctionCall",
																			"src": "8469:18:23"
																		},
																		"nativeSrc": "8469:18:23",
																		"nodeType": "YulExpressionStatement",
																		"src": "8469:18:23"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nativeSrc": "8458:4:23",
																		"nodeType": "YulIdentifier",
																		"src": "8458:4:23"
																	},
																	{
																		"name": "x",
																		"nativeSrc": "8464:1:23",
																		"nodeType": "YulIdentifier",
																		"src": "8464:1:23"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "8455:2:23",
																	"nodeType": "YulIdentifier",
																	"src": "8455:2:23"
																},
																"nativeSrc": "8455:11:23",
																"nodeType": "YulFunctionCall",
																"src": "8455:11:23"
															},
															"nativeSrc": "8452:37:23",
															"nodeType": "YulIf",
															"src": "8452:37:23"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nativeSrc": "8367:128:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "8398:1:23",
														"nodeType": "YulTypedName",
														"src": "8398:1:23",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "8401:1:23",
														"nodeType": "YulTypedName",
														"src": "8401:1:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nativeSrc": "8407:4:23",
														"nodeType": "YulTypedName",
														"src": "8407:4:23",
														"type": ""
													}
												],
												"src": "8367:128:23"
											},
											{
												"body": {
													"nativeSrc": "8532:95:23",
													"nodeType": "YulBlock",
													"src": "8532:95:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8549:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8549:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8556:3:23",
																				"nodeType": "YulLiteral",
																				"src": "8556:3:23",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8561:10:23",
																				"nodeType": "YulLiteral",
																				"src": "8561:10:23",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "8552:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "8552:3:23"
																		},
																		"nativeSrc": "8552:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8552:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8542:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8542:6:23"
																},
																"nativeSrc": "8542:31:23",
																"nodeType": "YulFunctionCall",
																"src": "8542:31:23"
															},
															"nativeSrc": "8542:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "8542:31:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8589:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8589:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8592:4:23",
																		"nodeType": "YulLiteral",
																		"src": "8592:4:23",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8582:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8582:6:23"
																},
																"nativeSrc": "8582:15:23",
																"nodeType": "YulFunctionCall",
																"src": "8582:15:23"
															},
															"nativeSrc": "8582:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "8582:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:23",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:23",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8606:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8606:6:23"
																},
																"nativeSrc": "8606:15:23",
																"nodeType": "YulFunctionCall",
																"src": "8606:15:23"
															},
															"nativeSrc": "8606:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "8606:15:23"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "8500:127:23",
												"nodeType": "YulFunctionDefinition",
												"src": "8500:127:23"
											},
											{
												"body": {
													"nativeSrc": "8873:346:23",
													"nodeType": "YulBlock",
													"src": "8873:346:23",
													"statements": [
														{
															"nativeSrc": "8883:27:23",
															"nodeType": "YulAssignment",
															"src": "8883:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8895:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "8895:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8906:3:23",
																		"nodeType": "YulLiteral",
																		"src": "8906:3:23",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8891:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "8891:3:23"
																},
																"nativeSrc": "8891:19:23",
																"nodeType": "YulFunctionCall",
																"src": "8891:19:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8883:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "8883:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8926:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "8926:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "8937:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "8937:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8919:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8919:6:23"
																},
																"nativeSrc": "8919:25:23",
																"nodeType": "YulFunctionCall",
																"src": "8919:25:23"
															},
															"nativeSrc": "8919:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "8919:25:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8964:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "8964:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8975:2:23",
																				"nodeType": "YulLiteral",
																				"src": "8975:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8960:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "8960:3:23"
																		},
																		"nativeSrc": "8960:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8960:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "8984:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "8984:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9000:3:23",
																								"nodeType": "YulLiteral",
																								"src": "9000:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9005:1:23",
																								"nodeType": "YulLiteral",
																								"src": "9005:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "8996:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "8996:3:23"
																						},
																						"nativeSrc": "8996:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "8996:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9009:1:23",
																						"nodeType": "YulLiteral",
																						"src": "9009:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "8992:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "8992:3:23"
																				},
																				"nativeSrc": "8992:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "8992:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "8980:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "8980:3:23"
																		},
																		"nativeSrc": "8980:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "8980:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8953:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "8953:6:23"
																},
																"nativeSrc": "8953:60:23",
																"nodeType": "YulFunctionCall",
																"src": "8953:60:23"
															},
															"nativeSrc": "8953:60:23",
															"nodeType": "YulExpressionStatement",
															"src": "8953:60:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9033:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9033:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9044:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9044:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9029:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9029:3:23"
																		},
																		"nativeSrc": "9029:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9029:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "9053:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9053:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9069:3:23",
																								"nodeType": "YulLiteral",
																								"src": "9069:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9074:1:23",
																								"nodeType": "YulLiteral",
																								"src": "9074:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "9065:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "9065:3:23"
																						},
																						"nativeSrc": "9065:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "9065:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9078:1:23",
																						"nodeType": "YulLiteral",
																						"src": "9078:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "9061:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9061:3:23"
																				},
																				"nativeSrc": "9061:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9061:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9049:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9049:3:23"
																		},
																		"nativeSrc": "9049:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9049:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9022:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9022:6:23"
																},
																"nativeSrc": "9022:60:23",
																"nodeType": "YulFunctionCall",
																"src": "9022:60:23"
															},
															"nativeSrc": "9022:60:23",
															"nodeType": "YulExpressionStatement",
															"src": "9022:60:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9102:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9102:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9113:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9113:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9098:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9098:3:23"
																		},
																		"nativeSrc": "9098:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9098:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "9118:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9118:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9091:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9091:6:23"
																},
																"nativeSrc": "9091:34:23",
																"nodeType": "YulFunctionCall",
																"src": "9091:34:23"
															},
															"nativeSrc": "9091:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "9091:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9145:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9145:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9156:3:23",
																				"nodeType": "YulLiteral",
																				"src": "9156:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9141:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9141:3:23"
																		},
																		"nativeSrc": "9141:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9141:19:23"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "9162:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9162:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9134:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9134:6:23"
																},
																"nativeSrc": "9134:35:23",
																"nodeType": "YulFunctionCall",
																"src": "9134:35:23"
															},
															"nativeSrc": "9134:35:23",
															"nodeType": "YulExpressionStatement",
															"src": "9134:35:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9189:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9189:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9200:3:23",
																				"nodeType": "YulLiteral",
																				"src": "9200:3:23",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9185:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9185:3:23"
																		},
																		"nativeSrc": "9185:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9185:19:23"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "9206:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9206:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9178:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9178:6:23"
																},
																"nativeSrc": "9178:35:23",
																"nodeType": "YulFunctionCall",
																"src": "9178:35:23"
															},
															"nativeSrc": "9178:35:23",
															"nodeType": "YulExpressionStatement",
															"src": "9178:35:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "8632:587:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8802:9:23",
														"nodeType": "YulTypedName",
														"src": "8802:9:23",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "8813:6:23",
														"nodeType": "YulTypedName",
														"src": "8813:6:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "8821:6:23",
														"nodeType": "YulTypedName",
														"src": "8821:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "8829:6:23",
														"nodeType": "YulTypedName",
														"src": "8829:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8837:6:23",
														"nodeType": "YulTypedName",
														"src": "8837:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8845:6:23",
														"nodeType": "YulTypedName",
														"src": "8845:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8853:6:23",
														"nodeType": "YulTypedName",
														"src": "8853:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8864:4:23",
														"nodeType": "YulTypedName",
														"src": "8864:4:23",
														"type": ""
													}
												],
												"src": "8632:587:23"
											},
											{
												"body": {
													"nativeSrc": "9353:171:23",
													"nodeType": "YulBlock",
													"src": "9353:171:23",
													"statements": [
														{
															"nativeSrc": "9363:26:23",
															"nodeType": "YulAssignment",
															"src": "9363:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9375:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "9375:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9386:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9386:2:23",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9371:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9371:3:23"
																},
																"nativeSrc": "9371:18:23",
																"nodeType": "YulFunctionCall",
																"src": "9371:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9363:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "9363:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9405:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "9405:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "9420:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9420:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9436:3:23",
																								"nodeType": "YulLiteral",
																								"src": "9436:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9441:1:23",
																								"nodeType": "YulLiteral",
																								"src": "9441:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "9432:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "9432:3:23"
																						},
																						"nativeSrc": "9432:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "9432:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9445:1:23",
																						"nodeType": "YulLiteral",
																						"src": "9445:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "9428:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9428:3:23"
																				},
																				"nativeSrc": "9428:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9428:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9416:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9416:3:23"
																		},
																		"nativeSrc": "9416:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9416:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9398:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9398:6:23"
																},
																"nativeSrc": "9398:51:23",
																"nodeType": "YulFunctionCall",
																"src": "9398:51:23"
															},
															"nativeSrc": "9398:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "9398:51:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9469:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9469:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9480:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9480:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9465:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9465:3:23"
																		},
																		"nativeSrc": "9465:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9465:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "9489:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9489:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9505:3:23",
																								"nodeType": "YulLiteral",
																								"src": "9505:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9510:1:23",
																								"nodeType": "YulLiteral",
																								"src": "9510:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "9501:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "9501:3:23"
																						},
																						"nativeSrc": "9501:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "9501:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9514:1:23",
																						"nodeType": "YulLiteral",
																						"src": "9514:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "9497:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9497:3:23"
																				},
																				"nativeSrc": "9497:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9497:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9485:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9485:3:23"
																		},
																		"nativeSrc": "9485:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9485:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9458:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9458:6:23"
																},
																"nativeSrc": "9458:60:23",
																"nodeType": "YulFunctionCall",
																"src": "9458:60:23"
															},
															"nativeSrc": "9458:60:23",
															"nodeType": "YulExpressionStatement",
															"src": "9458:60:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "9224:300:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9314:9:23",
														"nodeType": "YulTypedName",
														"src": "9314:9:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9325:6:23",
														"nodeType": "YulTypedName",
														"src": "9325:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9333:6:23",
														"nodeType": "YulTypedName",
														"src": "9333:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9344:4:23",
														"nodeType": "YulTypedName",
														"src": "9344:4:23",
														"type": ""
													}
												],
												"src": "9224:300:23"
											},
											{
												"body": {
													"nativeSrc": "9686:188:23",
													"nodeType": "YulBlock",
													"src": "9686:188:23",
													"statements": [
														{
															"nativeSrc": "9696:26:23",
															"nodeType": "YulAssignment",
															"src": "9696:26:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9708:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "9708:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9719:2:23",
																		"nodeType": "YulLiteral",
																		"src": "9719:2:23",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9704:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "9704:3:23"
																},
																"nativeSrc": "9704:18:23",
																"nodeType": "YulFunctionCall",
																"src": "9704:18:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9696:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "9696:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9738:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "9738:9:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "9753:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "9753:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "9769:3:23",
																								"nodeType": "YulLiteral",
																								"src": "9769:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "9774:1:23",
																								"nodeType": "YulLiteral",
																								"src": "9774:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "9765:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "9765:3:23"
																						},
																						"nativeSrc": "9765:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "9765:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "9778:1:23",
																						"nodeType": "YulLiteral",
																						"src": "9778:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "9761:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "9761:3:23"
																				},
																				"nativeSrc": "9761:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "9761:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "9749:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9749:3:23"
																		},
																		"nativeSrc": "9749:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9749:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9731:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9731:6:23"
																},
																"nativeSrc": "9731:51:23",
																"nodeType": "YulFunctionCall",
																"src": "9731:51:23"
															},
															"nativeSrc": "9731:51:23",
															"nodeType": "YulExpressionStatement",
															"src": "9731:51:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9802:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9802:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9813:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9813:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9798:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9798:3:23"
																		},
																		"nativeSrc": "9798:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9798:18:23"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "9818:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9818:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9791:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9791:6:23"
																},
																"nativeSrc": "9791:34:23",
																"nodeType": "YulFunctionCall",
																"src": "9791:34:23"
															},
															"nativeSrc": "9791:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "9791:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9845:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "9845:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9856:2:23",
																				"nodeType": "YulLiteral",
																				"src": "9856:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9841:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "9841:3:23"
																		},
																		"nativeSrc": "9841:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "9841:18:23"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "9861:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "9861:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "9834:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "9834:6:23"
																},
																"nativeSrc": "9834:34:23",
																"nodeType": "YulFunctionCall",
																"src": "9834:34:23"
															},
															"nativeSrc": "9834:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "9834:34:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "9529:345:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9639:9:23",
														"nodeType": "YulTypedName",
														"src": "9639:9:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9650:6:23",
														"nodeType": "YulTypedName",
														"src": "9650:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9658:6:23",
														"nodeType": "YulTypedName",
														"src": "9658:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9666:6:23",
														"nodeType": "YulTypedName",
														"src": "9666:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9677:4:23",
														"nodeType": "YulTypedName",
														"src": "9677:4:23",
														"type": ""
													}
												],
												"src": "9529:345:23"
											},
											{
												"body": {
													"nativeSrc": "10092:276:23",
													"nodeType": "YulBlock",
													"src": "10092:276:23",
													"statements": [
														{
															"nativeSrc": "10102:27:23",
															"nodeType": "YulAssignment",
															"src": "10102:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10114:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "10114:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10125:3:23",
																		"nodeType": "YulLiteral",
																		"src": "10125:3:23",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10110:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10110:3:23"
																},
																"nativeSrc": "10110:19:23",
																"nodeType": "YulFunctionCall",
																"src": "10110:19:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10102:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "10102:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10145:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "10145:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "10156:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10156:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10138:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10138:6:23"
																},
																"nativeSrc": "10138:25:23",
																"nodeType": "YulFunctionCall",
																"src": "10138:25:23"
															},
															"nativeSrc": "10138:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "10138:25:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10183:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10183:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10194:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10194:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10179:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10179:3:23"
																		},
																		"nativeSrc": "10179:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10179:18:23"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "10199:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10199:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10172:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10172:6:23"
																},
																"nativeSrc": "10172:34:23",
																"nodeType": "YulFunctionCall",
																"src": "10172:34:23"
															},
															"nativeSrc": "10172:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "10172:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10226:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10226:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10237:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10237:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10222:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10222:3:23"
																		},
																		"nativeSrc": "10222:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10222:18:23"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "10242:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10242:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10215:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10215:6:23"
																},
																"nativeSrc": "10215:34:23",
																"nodeType": "YulFunctionCall",
																"src": "10215:34:23"
															},
															"nativeSrc": "10215:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "10215:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10269:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10269:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10280:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10280:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10265:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10265:3:23"
																		},
																		"nativeSrc": "10265:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10265:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "10285:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10285:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10258:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10258:6:23"
																},
																"nativeSrc": "10258:34:23",
																"nodeType": "YulFunctionCall",
																"src": "10258:34:23"
															},
															"nativeSrc": "10258:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "10258:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10312:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10312:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10323:3:23",
																				"nodeType": "YulLiteral",
																				"src": "10323:3:23",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10308:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10308:3:23"
																		},
																		"nativeSrc": "10308:19:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10308:19:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "10333:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "10333:6:23"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "10349:3:23",
																								"nodeType": "YulLiteral",
																								"src": "10349:3:23",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "10354:1:23",
																								"nodeType": "YulLiteral",
																								"src": "10354:1:23",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "10345:3:23",
																							"nodeType": "YulIdentifier",
																							"src": "10345:3:23"
																						},
																						"nativeSrc": "10345:11:23",
																						"nodeType": "YulFunctionCall",
																						"src": "10345:11:23"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "10358:1:23",
																						"nodeType": "YulLiteral",
																						"src": "10358:1:23",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "10341:3:23",
																					"nodeType": "YulIdentifier",
																					"src": "10341:3:23"
																				},
																				"nativeSrc": "10341:19:23",
																				"nodeType": "YulFunctionCall",
																				"src": "10341:19:23"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "10329:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10329:3:23"
																		},
																		"nativeSrc": "10329:32:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10329:32:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10301:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10301:6:23"
																},
																"nativeSrc": "10301:61:23",
																"nodeType": "YulFunctionCall",
																"src": "10301:61:23"
															},
															"nativeSrc": "10301:61:23",
															"nodeType": "YulExpressionStatement",
															"src": "10301:61:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "9879:489:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10029:9:23",
														"nodeType": "YulTypedName",
														"src": "10029:9:23",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "10040:6:23",
														"nodeType": "YulTypedName",
														"src": "10040:6:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "10048:6:23",
														"nodeType": "YulTypedName",
														"src": "10048:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "10056:6:23",
														"nodeType": "YulTypedName",
														"src": "10056:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "10064:6:23",
														"nodeType": "YulTypedName",
														"src": "10064:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "10072:6:23",
														"nodeType": "YulTypedName",
														"src": "10072:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10083:4:23",
														"nodeType": "YulTypedName",
														"src": "10083:4:23",
														"type": ""
													}
												],
												"src": "9879:489:23"
											},
											{
												"body": {
													"nativeSrc": "10554:217:23",
													"nodeType": "YulBlock",
													"src": "10554:217:23",
													"statements": [
														{
															"nativeSrc": "10564:27:23",
															"nodeType": "YulAssignment",
															"src": "10564:27:23",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10576:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "10576:9:23"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10587:3:23",
																		"nodeType": "YulLiteral",
																		"src": "10587:3:23",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "10572:3:23",
																	"nodeType": "YulIdentifier",
																	"src": "10572:3:23"
																},
																"nativeSrc": "10572:19:23",
																"nodeType": "YulFunctionCall",
																"src": "10572:19:23"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "10564:4:23",
																	"nodeType": "YulIdentifier",
																	"src": "10564:4:23"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "10607:9:23",
																		"nodeType": "YulIdentifier",
																		"src": "10607:9:23"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "10618:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10618:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10600:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10600:6:23"
																},
																"nativeSrc": "10600:25:23",
																"nodeType": "YulFunctionCall",
																"src": "10600:25:23"
															},
															"nativeSrc": "10600:25:23",
															"nodeType": "YulExpressionStatement",
															"src": "10600:25:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10645:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10645:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10656:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10656:2:23",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10641:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10641:3:23"
																		},
																		"nativeSrc": "10641:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10641:18:23"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "10665:6:23",
																				"nodeType": "YulIdentifier",
																				"src": "10665:6:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10673:4:23",
																				"nodeType": "YulLiteral",
																				"src": "10673:4:23",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "10661:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10661:3:23"
																		},
																		"nativeSrc": "10661:17:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10661:17:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10634:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10634:6:23"
																},
																"nativeSrc": "10634:45:23",
																"nodeType": "YulFunctionCall",
																"src": "10634:45:23"
															},
															"nativeSrc": "10634:45:23",
															"nodeType": "YulExpressionStatement",
															"src": "10634:45:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10699:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10699:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10710:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10710:2:23",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10695:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10695:3:23"
																		},
																		"nativeSrc": "10695:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10695:18:23"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "10715:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10715:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10688:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10688:6:23"
																},
																"nativeSrc": "10688:34:23",
																"nodeType": "YulFunctionCall",
																"src": "10688:34:23"
															},
															"nativeSrc": "10688:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "10688:34:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "10742:9:23",
																				"nodeType": "YulIdentifier",
																				"src": "10742:9:23"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10753:2:23",
																				"nodeType": "YulLiteral",
																				"src": "10753:2:23",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "10738:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10738:3:23"
																		},
																		"nativeSrc": "10738:18:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10738:18:23"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "10758:6:23",
																		"nodeType": "YulIdentifier",
																		"src": "10758:6:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10731:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10731:6:23"
																},
																"nativeSrc": "10731:34:23",
																"nodeType": "YulFunctionCall",
																"src": "10731:34:23"
															},
															"nativeSrc": "10731:34:23",
															"nodeType": "YulExpressionStatement",
															"src": "10731:34:23"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "10373:398:23",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "10499:9:23",
														"nodeType": "YulTypedName",
														"src": "10499:9:23",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "10510:6:23",
														"nodeType": "YulTypedName",
														"src": "10510:6:23",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "10518:6:23",
														"nodeType": "YulTypedName",
														"src": "10518:6:23",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "10526:6:23",
														"nodeType": "YulTypedName",
														"src": "10526:6:23",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "10534:6:23",
														"nodeType": "YulTypedName",
														"src": "10534:6:23",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "10545:4:23",
														"nodeType": "YulTypedName",
														"src": "10545:4:23",
														"type": ""
													}
												],
												"src": "10373:398:23"
											},
											{
												"body": {
													"nativeSrc": "10808:95:23",
													"nodeType": "YulBlock",
													"src": "10808:95:23",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10825:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10825:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "10832:3:23",
																				"nodeType": "YulLiteral",
																				"src": "10832:3:23",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "10837:10:23",
																				"nodeType": "YulLiteral",
																				"src": "10837:10:23",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "10828:3:23",
																			"nodeType": "YulIdentifier",
																			"src": "10828:3:23"
																		},
																		"nativeSrc": "10828:20:23",
																		"nodeType": "YulFunctionCall",
																		"src": "10828:20:23"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10818:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10818:6:23"
																},
																"nativeSrc": "10818:31:23",
																"nodeType": "YulFunctionCall",
																"src": "10818:31:23"
															},
															"nativeSrc": "10818:31:23",
															"nodeType": "YulExpressionStatement",
															"src": "10818:31:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10865:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10865:1:23",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10868:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10868:4:23",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "10858:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10858:6:23"
																},
																"nativeSrc": "10858:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10858:15:23"
															},
															"nativeSrc": "10858:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10858:15:23"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "10889:1:23",
																		"nodeType": "YulLiteral",
																		"src": "10889:1:23",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10892:4:23",
																		"nodeType": "YulLiteral",
																		"src": "10892:4:23",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "10882:6:23",
																	"nodeType": "YulIdentifier",
																	"src": "10882:6:23"
																},
																"nativeSrc": "10882:15:23",
																"nodeType": "YulFunctionCall",
																"src": "10882:15:23"
															},
															"nativeSrc": "10882:15:23",
															"nodeType": "YulExpressionStatement",
															"src": "10882:15:23"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "10776:127:23",
												"nodeType": "YulFunctionDefinition",
												"src": "10776:127:23"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(add(pos, i), 0x20), mload(add(add(value, i), 0x20)))\n        }\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC3156FlashBorrower_$167t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_1, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 96))\n        value3 := value_3\n        let value_4 := calldataload(add(headStart, 128))\n        if iszero(eq(value_4, and(value_4, 0xff))) { revert(0, 0) }\n        value4 := value_4\n        let value_5 := 0\n        value_5 := calldataload(add(headStart, 160))\n        value5 := value_5\n        let value_6 := 0\n        value_6 := calldataload(add(headStart, 192))\n        value6 := value_6\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        mstore(add(headStart, 160), value5)\n        calldatacopy(add(headStart, 192), value4, value5)\n        mstore(add(add(headStart, value5), 192), 0)\n        tail := add(add(headStart, and(add(value5, 31), not(31))), 192)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
									"id": 23,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2516": [
									{
										"length": 32,
										"start": 2478
									}
								],
								"2518": [
									{
										"length": 32,
										"start": 2436
									}
								],
								"2520": [
									{
										"length": 32,
										"start": 2394
									}
								],
								"2522": [
									{
										"length": 32,
										"start": 2559
									}
								],
								"2524": [
									{
										"length": 32,
										"start": 2599
									}
								],
								"2527": [
									{
										"length": 32,
										"start": 2868
									}
								],
								"2530": [
									{
										"length": 32,
										"start": 2913
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b857806395d89b411161007c57806395d89b4114610294578063a9059cbb1461029c578063d505accf146102af578063d9d98ce4146102c2578063dd62ed3e146102d5578063f2fde38b1461030e57600080fd5b8063715018a61461023057806379cc6790146102385780637ecebe001461024b57806384b0196e1461025e5780638da5cb5b1461027957600080fd5b8063313ce5671161010a578063313ce567146101b75780633644e515146101c657806342966c68146101ce5780635cffe9de146101e1578063613255ab146101f457806370a082311461020757600080fd5b806306fdde0314610147578063095ea7b3146101655780631249c58b1461018857806318160ddd1461019257806323b872dd146101a4575b600080fd5b61014f610321565b60405161015c91906110c1565b60405180910390f35b6101786101733660046110e9565b6103b3565b604051901515815260200161015c565b6101906103cd565b005b6002545b60405190815260200161015c565b6101786101b2366004611115565b6103e2565b6040516012815260200161015c565b610196610406565b6101906101dc366004611156565b610415565b6101786101ef36600461116f565b610422565b610196610202366004611210565b61059f565b610196610215366004611210565b6001600160a01b031660009081526020819052604090205490565b6101906105c7565b6101906102463660046110e9565b6105d9565b610196610259366004611210565b6105f2565b610266610610565b60405161015c979695949392919061122d565b6005546040516001600160a01b03909116815260200161015c565b61014f610656565b6101786102aa3660046110e9565b610665565b6101906102bd3660046112c5565b610673565b6101966102d03660046110e9565b6107ad565b6101966102e336600461133c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61019061031c366004611210565b6107ed565b60606003805461033090611375565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90611375565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b5050505050905090565b6000336103c1818585610828565b60019150505b92915050565b6103e033683635c9adc5dea0000061083a565b565b6000336103f0858285610870565b6103fb8585856108ee565b506001949350505050565b600061041061094d565b905090565b61041f3382610a78565b50565b60008061042e8661059f565b9050808511156104595760405163fd9a760960e01b8152600481018290526024015b60405180910390fd5b600061046587876107ad565b9050610471888761083a565b6040516323e30c8b60e01b81527f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9906001600160a01b038a16906323e30c8b906104c99033908c908c9088908d908d906004016113af565b6020604051808303816000875af11580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190611408565b146105345760405162678c5b60e81b81526001600160a01b0389166004820152602401610450565b600061054a8930610545858b611437565b610870565b81158061055e57506001600160a01b038116155b1561057b5761057689610571848a611437565b610a78565b610590565b6105858988610a78565b6105908982846108ee565b50600198975050505050505050565b60006001600160a01b03821630146105b85760006103c7565b6002546103c79060001961144a565b6105cf610aae565b6103e06000610adb565b6105e4823383610870565b6105ee8282610a78565b5050565b6001600160a01b0381166000908152600860205260408120546103c7565b600060608060008060006060610624610b2d565b61062c610b5a565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461033090611375565b6000336103c18185856108ee565b834211156106975760405163313c898160e11b815260048101859052602401610450565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886106e48c6001600160a01b0316600090815260086020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061073f82610b87565b9050600061074f82878787610bb4565b9050896001600160a01b0316816001600160a01b031614610796576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610450565b6107a18a8a8a610828565b50505050505050505050565b60006001600160a01b03831630146107e357604051635ad3edc960e11b81526001600160a01b0384166004820152602401610450565b60005b9392505050565b6107f5610aae565b6001600160a01b03811661081f57604051631e4fbdf760e01b815260006004820152602401610450565b61041f81610adb565b6108358383836001610be2565b505050565b6001600160a01b0382166108645760405163ec442f0560e01b815260006004820152602401610450565b6105ee60008383610cb7565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146108e857818110156108d957604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610450565b6108e884848484036000610be2565b50505050565b6001600160a01b03831661091857604051634b637e8f60e11b815260006004820152602401610450565b6001600160a01b0382166109425760405163ec442f0560e01b815260006004820152602401610450565b610835838383610cb7565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156109a657507f000000000000000000000000000000000000000000000000000000000000000046145b156109d057507f000000000000000000000000000000000000000000000000000000000000000090565b610410604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6001600160a01b038216610aa257604051634b637e8f60e11b815260006004820152602401610450565b6105ee82600083610cb7565b6005546001600160a01b031633146103e05760405163118cdaa760e01b8152336004820152602401610450565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606104107f00000000000000000000000000000000000000000000000000000000000000006006610de1565b60606104107f00000000000000000000000000000000000000000000000000000000000000006007610de1565b60006103c7610b9461094d565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080610bc688888888610e8c565b925092509250610bd68282610f5b565b50909695505050505050565b6001600160a01b038416610c0c5760405163e602df0560e01b815260006004820152602401610450565b6001600160a01b038316610c3657604051634a1406b160e11b815260006004820152602401610450565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156108e857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ca991815260200190565b60405180910390a350505050565b6001600160a01b038316610ce2578060026000828254610cd79190611437565b90915550610d549050565b6001600160a01b03831660009081526020819052604090205481811015610d355760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610450565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610d7057600280548290039055610d8f565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610dd491815260200190565b60405180910390a3505050565b606060ff8314610dfb57610df483611014565b90506103c7565b818054610e0790611375565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3390611375565b8015610e805780601f10610e5557610100808354040283529160200191610e80565b820191906000526020600020905b815481529060010190602001808311610e6357829003601f168201915b505050505090506103c7565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610ec75750600091506003905082610f51565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610f1b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f4757506000925060019150829050610f51565b9250600091508190505b9450945094915050565b6000826003811115610f6f57610f6f61145d565b03610f78575050565b6001826003811115610f8c57610f8c61145d565b03610faa5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610fbe57610fbe61145d565b03610fdf5760405163fce698f760e01b815260048101829052602401610450565b6003826003811115610ff357610ff361145d565b036105ee576040516335e2f38360e21b815260048101829052602401610450565b6060600061102183611053565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156103c757604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b818110156110a157602081850181015186830182015201611085565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006107e6602083018461107b565b6001600160a01b038116811461041f57600080fd5b600080604083850312156110fc57600080fd5b8235611107816110d4565b946020939093013593505050565b60008060006060848603121561112a57600080fd5b8335611135816110d4565b92506020840135611145816110d4565b929592945050506040919091013590565b60006020828403121561116857600080fd5b5035919050565b60008060008060006080868803121561118757600080fd5b8535611192816110d4565b945060208601356111a2816110d4565b935060408601359250606086013567ffffffffffffffff8111156111c557600080fd5b8601601f810188136111d657600080fd5b803567ffffffffffffffff8111156111ed57600080fd5b8860208284010111156111ff57600080fd5b959894975092955050506020019190565b60006020828403121561122257600080fd5b81356107e6816110d4565b60ff60f81b8816815260e06020820152600061124c60e083018961107b565b828103604084015261125e818961107b565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b818110156112b4578351835260209384019390920191600101611296565b50909b9a5050505050505050505050565b600080600080600080600060e0888a0312156112e057600080fd5b87356112eb816110d4565b965060208801356112fb816110d4565b95506040880135945060608801359350608088013560ff8116811461131f57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561134f57600080fd5b823561135a816110d4565b9150602083013561136a816110d4565b809150509250929050565b600181811c9082168061138957607f821691505b6020821081036113a957634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a0608082018190528101829052818360c0830137600081830160c090810191909152601f909201601f1916010195945050505050565b60006020828403121561141a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103c7576103c7611421565b818103818111156103c7576103c7611421565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220e8003806c664f973970dc26111efe79f5feae625b4fc2a953dcfbb809778228b64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xD9D98CE4 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2D5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x10C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x190 PUSH2 0x3CD JUMP JUMPDEST STOP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0x3E2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x196 PUSH2 0x406 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x415 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0x116F JUMP JUMPDEST PUSH2 0x422 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x202 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x59F JUMP JUMPDEST PUSH2 0x196 PUSH2 0x215 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x5C7 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x246 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x259 CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x5F2 JUMP JUMPDEST PUSH2 0x266 PUSH2 0x610 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x122D JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x656 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x665 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x2BD CALLDATASIZE PUSH1 0x4 PUSH2 0x12C5 JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2D0 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E9 JUMP JUMPDEST PUSH2 0x7AD JUMP JUMPDEST PUSH2 0x196 PUSH2 0x2E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x133C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x190 PUSH2 0x31C CALLDATASIZE PUSH1 0x4 PUSH2 0x1210 JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x330 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x35C SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x37E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x38C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C1 DUP2 DUP6 DUP6 PUSH2 0x828 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E0 CALLER PUSH9 0x3635C9ADC5DEA00000 PUSH2 0x83A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3F0 DUP6 DUP3 DUP6 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x3FB DUP6 DUP6 DUP6 PUSH2 0x8EE JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x410 PUSH2 0x94D JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x41F CALLER DUP3 PUSH2 0xA78 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x42E DUP7 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP DUP1 DUP6 GT ISZERO PUSH2 0x459 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFD9A7609 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x465 DUP8 DUP8 PUSH2 0x7AD JUMP JUMPDEST SWAP1 POP PUSH2 0x471 DUP9 DUP8 PUSH2 0x83A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP2 MSTORE PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x23E30C8B SWAP1 PUSH2 0x4C9 SWAP1 CALLER SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x13AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x50C SWAP2 SWAP1 PUSH2 0x1408 JUMP JUMPDEST EQ PUSH2 0x534 JUMPI PUSH1 0x40 MLOAD PUSH3 0x678C5B PUSH1 0xE8 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54A DUP10 ADDRESS PUSH2 0x545 DUP6 DUP12 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0x870 JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x55E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO JUMPDEST ISZERO PUSH2 0x57B JUMPI PUSH2 0x576 DUP10 PUSH2 0x571 DUP5 DUP11 PUSH2 0x1437 JUMP JUMPDEST PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x590 JUMP JUMPDEST PUSH2 0x585 DUP10 DUP9 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x590 DUP10 DUP3 DUP5 PUSH2 0x8EE JUMP JUMPDEST POP PUSH1 0x1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ADDRESS EQ PUSH2 0x5B8 JUMPI PUSH1 0x0 PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x3C7 SWAP1 PUSH1 0x0 NOT PUSH2 0x144A JUMP JUMPDEST PUSH2 0x5CF PUSH2 0xAAE JUMP JUMPDEST PUSH2 0x3E0 PUSH1 0x0 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x5E4 DUP3 CALLER DUP4 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x5EE DUP3 DUP3 PUSH2 0xA78 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH2 0x624 PUSH2 0xB2D JUMP JUMPDEST PUSH2 0x62C PUSH2 0xB5A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x330 SWAP1 PUSH2 0x1375 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C1 DUP2 DUP6 DUP6 PUSH2 0x8EE JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x697 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x6E4 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x73F DUP3 PUSH2 0xB87 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x74F DUP3 DUP8 DUP8 DUP8 PUSH2 0xBB4 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x7A1 DUP11 DUP11 DUP11 PUSH2 0x828 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ADDRESS EQ PUSH2 0x7E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5AD3EDC9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7F5 PUSH2 0xAAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x81F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x41F DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH2 0x835 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBE2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x5EE PUSH1 0x0 DUP4 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x8E8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x8E8 DUP5 DUP5 DUP5 DUP5 SUB PUSH1 0x0 PUSH2 0xBE2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x835 DUP4 DUP4 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x9A6 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x9D0 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x410 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH2 0x5EE DUP3 PUSH1 0x0 DUP4 PUSH2 0xCB7 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x410 PUSH32 0x0 PUSH1 0x6 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x410 PUSH32 0x0 PUSH1 0x7 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7 PUSH2 0xB94 PUSH2 0x94D JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xBC6 DUP9 DUP9 DUP9 DUP9 PUSH2 0xE8C JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0xBD6 DUP3 DUP3 PUSH2 0xF5B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xC0C JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xC36 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8E8 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xCA9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCE2 JUMPI DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCD7 SWAP2 SWAP1 PUSH2 0x1437 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xD54 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xD35 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xD70 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xD8F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xDD4 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xDFB JUMPI PUSH2 0xDF4 DUP4 PUSH2 0x1014 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C7 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xE07 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xE33 SWAP1 PUSH2 0x1375 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE80 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE55 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE80 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xE63 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x3C7 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xEC7 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xF51 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF1B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF47 JUMPI POP PUSH1 0x0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xF51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF6F JUMPI PUSH2 0xF6F PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xF78 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xF8C JUMPI PUSH2 0xF8C PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xFAA JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFBE JUMPI PUSH2 0xFBE PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0xFDF JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xFF3 JUMPI PUSH2 0xFF3 PUSH2 0x145D JUMP JUMPDEST SUB PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x450 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1021 DUP4 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10A1 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1085 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x41F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1107 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x112A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1135 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1145 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1168 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1187 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1192 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x11A2 DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP5 ADD ADD GT ISZERO PUSH2 0x11FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7E6 DUP2 PUSH2 0x10D4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x124C PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0x107B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x125E DUP2 DUP10 PUSH2 0x107B JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12B4 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1296 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x12E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x12EB DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x12FB DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x134F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x135A DUP2 PUSH2 0x10D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x136A DUP2 PUSH2 0x10D4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1389 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x13A9 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP3 MSTORE DUP7 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE DUP2 DUP4 PUSH1 0xC0 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0xC0 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x141A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x1421 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3C7 JUMPI PUSH2 0x3C7 PUSH2 0x1421 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 STOP CODESIZE MOD 0xC6 PUSH5 0xF973970DC2 PUSH2 0x11EF 0xE7 SWAP16 PUSH0 0xEA 0xE6 0x25 0xB4 0xFC 0x2A SWAP6 RETURNDATASIZE 0xCF 0xBB DUP1 SWAP8 PUSH25 0x228B64736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "392:289:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1317:14:23;;1310:22;1292:41;;1280:2;1265:18;4293:186:5;1152:187:23;610:69:22;;;:::i;:::-;;3144:97:5;3222:12;;3144:97;;;1490:25:23;;;1478:2;1463:18;3144:97:5;1344:177:23;5039:244:5;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;2181:36:23;;2169:2;2154:18;3002:82:5;2039:184:23;2656:112:9;;;:::i;618:87:7:-;;;;;;:::i;:::-;;:::i;4784:962:8:-;;;;;;:::i;:::-;;:::i;1934:161::-;;;;;;:::i;:::-;;:::i;3299:116:5:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:5;3364:7;3390:18;;;;;;;;;;;;3299:116;2293:101:0;;;:::i;1021:158:7:-;;;;;;:::i;:::-;;:::i;2406:143:9:-;;;;;;:::i;:::-;;:::i;5144:557:18:-;;;:::i;:::-;;;;;;;;;;;;;:::i;1638:85:0:-;1710:6;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;5299:51:23;;5287:2;5272:18;1638:85:0;5153:203:23;2276:93:5;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:9:-;;;;;;:::i;:::-;;:::i;2460:232:8:-;;;;;;:::i;:::-;;:::i;3846:140:5:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:5;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2543:215:0;;;;;;:::i;:::-;;:::i;2074:89:5:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:12;4420:31:5;735:10:12;4436:7:5;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;610:69:22:-;643:29;649:10;661;643:5;:29::i;:::-;610:69::o;5039:244:5:-;5126:4;735:10:12;5182:37:5;5198:4;735:10:12;5213:5:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:5;;5039:244;-1:-1:-1;;;;5039:244:5:o;2656:112:9:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;618:87:7:-;672:26;735:10:12;692:5:7;672;:26::i;:::-;618:87;:::o;4784:962:8:-;4948:4;4964:15;4982:19;4995:5;4982:12;:19::i;:::-;4964:37;;5023:7;5015:5;:15;5011:84;;;5053:31;;-1:-1:-1;;;5053:31:8;;;;;1490:25:23;;;1463:18;;5053:31:8;;;;;;;;5011:84;5104:11;5118:22;5127:5;5134;5118:8;:22::i;:::-;5104:36;;5150:31;5164:8;5175:5;5150;:31::i;:::-;5195:59;;-1:-1:-1;;;5195:59:8;;1038:45;;-1:-1:-1;;;;;5195:20:8;;;;;:59;;735:10:12;;5230:5:8;;5237;;5244:3;;5249:4;;;;5195:59;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:75;5191:154;;5293:41;;-1:-1:-1;;;5293:41:8;;-1:-1:-1;;;;;5317:32:23;;5293:41:8;;;5299:51:23;5272:18;;5293:41:8;5153:203:23;5191:154:8;5354:24;5410:62;5434:8;5453:4;5460:11;5468:3;5460:5;:11;:::i;:::-;5410:15;:62::i;:::-;5486:8;;;:42;;-1:-1:-1;;;;;;5498:30:8;;;5486:42;5482:237;;;5544:37;5558:8;5569:11;5577:3;5569:5;:11;:::i;:::-;5544:5;:37::i;:::-;5482:237;;;5612:31;5626:8;5637:5;5612;:31::i;:::-;5657:51;5675:8;5686:16;5704:3;5657:9;:51::i;:::-;-1:-1:-1;5735:4:8;;4784:962;-1:-1:-1;;;;;;;;4784:962:8:o;1934:161::-;2000:7;-1:-1:-1;;;;;2026:22:8;;2043:4;2026:22;:62;;2087:1;2026:62;;;3222:12:5;;2051:33:8;;-1:-1:-1;;2051:33:8;:::i;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;1021:158:7:-:0;1096:45;1112:7;735:10:12;1135:5:7;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;2406:143:9:-;-1:-1:-1;;;;;624:14:13;;2497:7:9;624:14:13;;;:7;:14;;;;;;2523:19:9;538:107:13;5144:557:18;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:18;;;-1:-1:-1;5482:212:18;;-1:-1:-1;5590:13:18;;-1:-1:-1;5625:4:18;;-1:-1:-1;5652:1:18;-1:-1:-1;5668:16:18;-1:-1:-1;5482:212:18;-1:-1:-1;5144:557:18:o;2276:93:5:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:12;3733:27:5;735:10:12;3750:2:5;3754:5;3733:9;:27::i;1680:672:9:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:9;;;;;1490:25:23;;;1463:18;;1932:33:9;1344:177:23;1879:97:9;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:13;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:9;2017:78;;;;;;8919:25:23;;;;-1:-1:-1;;;;;8980:32:23;;;8960:18;;;8953:60;9049:32;;;;9029:18;;;9022:60;9098:18;;;9091:34;9141:19;;;9134:35;9185:19;;;9178:35;;;8891:19;;2017:78:9;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:9;:6;-1:-1:-1;;;;;2220:15:9;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:9;;-1:-1:-1;;;;;9416:32:23;;;2258:35:9;;;9398:51:23;9485:32;;9465:18;;;9458:60;9371:18;;2258:35:9;9224:300:23;2216:88:9;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;2460:232:8:-;2537:7;-1:-1:-1;;;;;2560:22:8;;2577:4;2560:22;2556:90;;2605:30;;-1:-1:-1;;;2605:30:8;;-1:-1:-1;;;;;5317:32:23;;2605:30:8;;;5299:51:23;5272:18;;2605:30:8;5153:203:23;2556:90:8;3160:7;2662:23;2655:30;2460:232;-1:-1:-1;;;2460:232:8:o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;5299:51:23::0;5272:18;;2672:31:0::1;5153:203:23::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;8989:128:5:-:0;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;7721:208::-;-1:-1:-1;;;;;7791:21:5;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:5;;7864:1;7835:32;;;5299:51:23;5272:18;;7835:32:5;5153:203:23;7787:91:5;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;10663:477::-;-1:-1:-1;;;;;3952:18:5;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:5;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:5;;-1:-1:-1;;;;;9749:32:23;;10936:60:5;;;9731:51:23;9798:18;;;9791:34;;;9841:18;;;9834:34;;;9704:18;;10936:60:5;9529:345:23;10881:130:5;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:5;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:5;;5807:1;5780:30;;;5299:51:23;5272:18;;5780:30:5;5153:203:23;5735:86:5;-1:-1:-1;;;;;5834:16:5;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:5;;5902:1;5873:32;;;5299:51:23;5272:18;;5873:32:5;5153:203:23;5830:86:5;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:18:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:18;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:18;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;10138:25:23;4226:11:18;10179:18:23;;;10172:34;;;;4239:14:18;10222:18:23;;;10215:34;4255:13:18;10265:18:23;;;10258:34;4278:4:18;10308:19:23;;;10301:61;4168:7:18;;10110:19:23;;4204:80:18;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;8247:206:5;-1:-1:-1;;;;;8317:21:5;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:5;;8388:1;8361:30;;;5299:51:23;5272:18;;8361:30:5;5153:203:23;8313:89:5;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:12;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:12;1901:40:0;;;5299:51:23;5272:18;;1901:40:0;5153:203:23;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;6021:126:18:-;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:19;3549:11;-1:-1:-1;;;3573:23:19;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:17;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:17;;6803:260;-1:-1:-1;;;;;;6803:260:17:o;9949:432:5:-;-1:-1:-1;;;;;10061:19:5;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:5;;10132:1;10103:32;;;5299:51:23;5272:18;;10103:32:5;5153:203:23;10057:89:5;-1:-1:-1;;;;;10159:21:5;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:5;;10231:1;10203:31;;;5299:51:23;5272:18;;10203:31:5;5153:203:23;10155:90:5;-1:-1:-1;;;;;10254:18:5;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:5;10342:5;-1:-1:-1;;;;;10333:31:5;;10358:5;10333:31;;;;1490:25:23;;1478:2;1463:18;;1344:177;10333:31:5;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:5;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:5;;-1:-1:-1;6356:540:5;;-1:-1:-1;;;;;6570:15:5;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:5;;-1:-1:-1;;;;;9749:32:23;;6649:50:5;;;9731:51:23;9798:18;;;9791:34;;;9841:18;;;9834:34;;;9704:18;;6649:50:5;9529:345:23;6599:115:5;-1:-1:-1;;;;;6834:15:5;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:5;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:5;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:5;7355:4;-1:-1:-1;;;;;7346:25:5;;7365:5;7346:25;;;;1490::23;;1478:2;1463:18;;1344:177;7346:25:5;;;;;;;;6271:1107;;;:::o;3385:267:14:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:17;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:17;;-1:-1:-1;6301:30:17;;-1:-1:-1;6333:1:17;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;10600:25:23;;;10673:4;10661:17;;10641:18;;;10634:45;;;;10695:18;;;10688:34;;;10738:18;;;10731:34;;;6457:24:17;;10572:19:23;;6457:24:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:17;;-1:-1:-1;;6457:24:17;;;-1:-1:-1;;;;;;;6495:20:17;;6491:113;;-1:-1:-1;6547:1:17;;-1:-1:-1;6551:29:17;;-1:-1:-1;6547:1:17;;-1:-1:-1;6531:62:17;;6491:113;6622:6;-1:-1:-1;6630:20:17;;-1:-1:-1;6630:20:17;;-1:-1:-1;5140:1530:17;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:17;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:17;;;;;1490:25:23;;;1463:18;;7550:46:17;1344:177:23;7479:243:17;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:17;;;;;1490:25:23;;;1463:18;;7679:32:17;1344:177:23;2078:405:14;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:14;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:14;;;-1:-1:-1;2435:4:14;2426:14;;2419:28;;;;-1:-1:-1;2390:16:14;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:14;;;;;;;;;;;14:400:23;56:3;94:5;88:12;121:6;116:3;109:19;146:1;156:139;170:6;167:1;164:13;156:139;;;278:4;263:13;;;259:24;;253:31;233:11;;;229:22;;222:63;185:12;156:139;;;160:3;340:1;333:4;324:6;319:3;315:16;311:27;304:38;403:4;396:2;392:7;387:2;379:6;375:15;371:29;366:3;362:39;358:50;351:57;;;14:400;;;;:::o;419:220::-;568:2;557:9;550:21;531:4;588:45;629:2;618:9;614:18;606:6;588:45;:::i;644:131::-;-1:-1:-1;;;;;719:31:23;;709:42;;699:70;;765:1;762;755:12;780:367;848:6;856;909:2;897:9;888:7;884:23;880:32;877:52;;;925:1;922;915:12;877:52;964:9;951:23;983:31;1008:5;983:31;:::i;:::-;1033:5;1111:2;1096:18;;;;1083:32;;-1:-1:-1;;;780:367:23:o;1526:508::-;1603:6;1611;1619;1672:2;1660:9;1651:7;1647:23;1643:32;1640:52;;;1688:1;1685;1678:12;1640:52;1727:9;1714:23;1746:31;1771:5;1746:31;:::i;:::-;1796:5;-1:-1:-1;1853:2:23;1838:18;;1825:32;1866:33;1825:32;1866:33;:::i;:::-;1526:508;;1918:7;;-1:-1:-1;;;1998:2:23;1983:18;;;;1970:32;;1526:508::o;2410:226::-;2469:6;2522:2;2510:9;2501:7;2497:23;2493:32;2490:52;;;2538:1;2535;2528:12;2490:52;-1:-1:-1;2583:23:23;;2410:226;-1:-1:-1;2410:226:23:o;2641:1012::-;2767:6;2775;2783;2791;2799;2852:3;2840:9;2831:7;2827:23;2823:33;2820:53;;;2869:1;2866;2859:12;2820:53;2908:9;2895:23;2927:31;2952:5;2927:31;:::i;:::-;2977:5;-1:-1:-1;3034:2:23;3019:18;;3006:32;3047:33;3006:32;3047:33;:::i;:::-;3099:7;-1:-1:-1;3179:2:23;3164:18;;3151:32;;-1:-1:-1;3260:2:23;3245:18;;3232:32;3287:18;3276:30;;3273:50;;;3319:1;3316;3309:12;3273:50;3342:22;;3395:4;3387:13;;3383:27;-1:-1:-1;3373:55:23;;3424:1;3421;3414:12;3373:55;3464:2;3451:16;3490:18;3482:6;3479:30;3476:50;;;3522:1;3519;3512:12;3476:50;3567:7;3562:2;3553:6;3549:2;3545:15;3541:24;3538:37;3535:57;;;3588:1;3585;3578:12;3535:57;2641:1012;;;;-1:-1:-1;2641:1012:23;;-1:-1:-1;;;3619:2:23;3611:11;;3641:6;2641:1012::o;3658:247::-;3717:6;3770:2;3758:9;3749:7;3745:23;3741:32;3738:52;;;3786:1;3783;3776:12;3738:52;3825:9;3812:23;3844:31;3869:5;3844:31;:::i;3910:1238::-;4316:3;4311;4307:13;4299:6;4295:26;4284:9;4277:45;4358:3;4353:2;4342:9;4338:18;4331:31;4258:4;4385:46;4426:3;4415:9;4411:19;4403:6;4385:46;:::i;:::-;4479:9;4471:6;4467:22;4462:2;4451:9;4447:18;4440:50;4513:33;4539:6;4531;4513:33;:::i;:::-;4577:2;4562:18;;4555:34;;;-1:-1:-1;;;;;4626:32:23;;4620:3;4605:19;;4598:61;4646:3;4675:19;;4668:35;;;4740:22;;;4734:3;4719:19;;4712:51;4812:13;;4834:22;;;4884:2;4910:15;;;;-1:-1:-1;4872:15:23;;;;-1:-1:-1;4953:169:23;4967:6;4964:1;4961:13;4953:169;;;5028:13;;5016:26;;5071:2;5097:15;;;;5062:12;;;;4989:1;4982:9;4953:169;;;-1:-1:-1;5139:3:23;;3910:1238;-1:-1:-1;;;;;;;;;;;3910:1238:23:o;5361:1037::-;5472:6;5480;5488;5496;5504;5512;5520;5573:3;5561:9;5552:7;5548:23;5544:33;5541:53;;;5590:1;5587;5580:12;5541:53;5629:9;5616:23;5648:31;5673:5;5648:31;:::i;:::-;5698:5;-1:-1:-1;5755:2:23;5740:18;;5727:32;5768:33;5727:32;5768:33;:::i;:::-;5820:7;-1:-1:-1;5900:2:23;5885:18;;5872:32;;-1:-1:-1;6003:2:23;5988:18;;5975:32;;-1:-1:-1;6085:3:23;6070:19;;6057:33;6134:4;6121:18;;6109:31;;6099:59;;6154:1;6151;6144:12;6099:59;5361:1037;;;;-1:-1:-1;5361:1037:23;;;;6177:7;6257:3;6242:19;;6229:33;;-1:-1:-1;6361:3:23;6346:19;;;6333:33;;5361:1037;-1:-1:-1;;5361:1037:23:o;6403:388::-;6471:6;6479;6532:2;6520:9;6511:7;6507:23;6503:32;6500:52;;;6548:1;6545;6538:12;6500:52;6587:9;6574:23;6606:31;6631:5;6606:31;:::i;:::-;6656:5;-1:-1:-1;6713:2:23;6698:18;;6685:32;6726:33;6685:32;6726:33;:::i;:::-;6778:7;6768:17;;;6403:388;;;;;:::o;6796:380::-;6875:1;6871:12;;;;6918;;;6939:61;;6993:4;6985:6;6981:17;6971:27;;6939:61;7046:2;7038:6;7035:14;7015:18;7012:38;7009:161;;7092:10;7087:3;7083:20;7080:1;7073:31;7127:4;7124:1;7117:15;7155:4;7152:1;7145:15;7009:161;;6796:380;;;:::o;7181:730::-;-1:-1:-1;;;;;7450:32:23;;;7432:51;;7519:32;;7514:2;7499:18;;7492:60;7583:2;7568:18;;7561:34;;;7626:2;7611:18;;7604:34;;;7470:3;7669;7654:19;;7647:32;;;7695:19;;7688:35;;;7716:6;7766;7760:3;7745:19;;7732:49;7831:1;7801:22;;;7825:3;7797:32;;;7790:43;;;;7894:2;7873:15;;;-1:-1:-1;;7869:29:23;7854:45;7850:55;;7181:730;-1:-1:-1;;;;;7181:730:23:o;7916:184::-;7986:6;8039:2;8027:9;8018:7;8014:23;8010:32;8007:52;;;8055:1;8052;8045:12;8007:52;-1:-1:-1;8078:16:23;;7916:184;-1:-1:-1;7916:184:23:o;8105:127::-;8166:10;8161:3;8157:20;8154:1;8147:31;8197:4;8194:1;8187:15;8221:4;8218:1;8211:15;8237:125;8302:9;;;8323:10;;;8320:36;;;8336:18;;:::i;8367:128::-;8434:9;;;8455:11;;;8452:37;;;8469:18;;:::i;10776:127::-;10837:10;10832:3;10828:20;10825:1;10818:31;10868:4;10865:1;10858:15;10892:4;10889:1;10882:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1057800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24756",
								"balanceOf(address)": "2667",
								"burn(uint256)": "50988",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "200",
								"eip712Domain()": "infinite",
								"flashFee(address,uint256)": "537",
								"flashLoan(address,address,uint256,bytes)": "infinite",
								"maxFlashLoan(address)": "infinite",
								"mint()": "50873",
								"name()": "infinite",
								"nonces(address)": "2632",
								"owner()": "2412",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2371",
								"transfer(address,uint256)": "51260",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "160"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "40"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "CALLVALUE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "tag",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH",
									"source": 22,
									"value": "40"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSHSIZE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "CODESIZE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "SUB",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSHSIZE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "CODECOPY",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH",
									"source": 22,
									"value": "40"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "3"
								},
								{
									"begin": 477,
									"end": 604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 477,
									"end": 604,
									"name": "tag",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 477,
									"end": 604,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1554D115"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1613,
									"end": 1617,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 556,
									"end": 568,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1554D1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1554D115"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3096,
									"end": 3147,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "15"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "14"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 18,
									"value": "6"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 3467,
									"end": 3474,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3501,
									"end": 3517,
									"name": "PUSH",
									"source": 18,
									"value": "7"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 18,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 18
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 18
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 18,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 18
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "PUSH",
									"source": 18,
									"value": "100"
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 18,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 3417,
									"end": 3442,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3458,
									"end": 3476,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 3458,
									"end": 3476,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3458,
									"end": 3476,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3451,
									"end": 3485,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3451,
									"end": 3485,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 3451,
									"end": 3485,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3451,
									"end": 3485,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3501,
									"end": 3519,
									"name": "PUSH",
									"source": 23,
									"value": "60"
								},
								{
									"begin": 3501,
									"end": 3519,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3501,
									"end": 3519,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3494,
									"end": 3528,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4255,
									"end": 4268,
									"name": "CHAINID",
									"source": 18
								},
								{
									"begin": 3544,
									"end": 3562,
									"name": "PUSH",
									"source": 23,
									"value": "80"
								},
								{
									"begin": 3544,
									"end": 3562,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3544,
									"end": 3562,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3537,
									"end": 3571,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 3587,
									"end": 3606,
									"name": "PUSH",
									"source": 23,
									"value": "A0"
								},
								{
									"begin": 3587,
									"end": 3606,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3587,
									"end": 3606,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3580,
									"end": 3641,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 3389,
									"end": 3408,
									"name": "PUSH",
									"source": 23,
									"value": "C0"
								},
								{
									"begin": 3389,
									"end": 3408,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 18
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "tag",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3747,
									"end": 3751,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 18,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "52"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 392,
									"end": 681,
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3010,
									"end": 3021,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 3043,
									"end": 3048,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 3037,
									"end": 3056,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 3098,
									"end": 3103,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 3084,
									"end": 3104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "tag",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 3176,
									"end": 3181,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 3135,
									"end": 3181,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "tag",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 14,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "tag",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1773,
									"end": 1784,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1796,
									"end": 1813,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1822,
									"end": 1825,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 1840,
									"end": 1844,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1840,
									"end": 1851,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1893,
									"end": 1896,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "305A27A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "43"
								},
								{
									"begin": 1879,
									"end": 1897,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1974,
									"end": 1978,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "45"
								},
								{
									"begin": 1957,
									"end": 1970,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "tag",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 1994,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 23,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 23
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "54"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 23,
									"value": "54"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "55"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 23,
									"value": "55"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 23
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 309,
									"end": 436,
									"name": "tag",
									"source": 23,
									"value": "47"
								},
								{
									"begin": 309,
									"end": 436,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 370,
									"end": 380,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B71"
								},
								{
									"begin": 365,
									"end": 368,
									"name": "PUSH",
									"source": 23,
									"value": "E0"
								},
								{
									"begin": 361,
									"end": 381,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 358,
									"end": 359,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 351,
									"end": 382,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 401,
									"end": 405,
									"name": "PUSH",
									"source": 23,
									"value": "41"
								},
								{
									"begin": 398,
									"end": 399,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 391,
									"end": 406,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 425,
									"end": 429,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 422,
									"end": 423,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 415,
									"end": 430,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 441,
									"end": 821,
									"name": "tag",
									"source": 23,
									"value": "48"
								},
								{
									"begin": 441,
									"end": 821,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 520,
									"end": 521,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 516,
									"end": 528,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 516,
									"end": 528,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 516,
									"end": 528,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 516,
									"end": 528,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 563,
									"end": 575,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 563,
									"end": 575,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 563,
									"end": 575,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 584,
									"end": 645,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "58"
								},
								{
									"begin": 584,
									"end": 645,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 638,
									"end": 642,
									"name": "PUSH",
									"source": 23,
									"value": "7F"
								},
								{
									"begin": 630,
									"end": 636,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 626,
									"end": 643,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 616,
									"end": 643,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 616,
									"end": 643,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 584,
									"end": 645,
									"name": "tag",
									"source": 23,
									"value": "58"
								},
								{
									"begin": 584,
									"end": 645,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 691,
									"end": 693,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 683,
									"end": 689,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 680,
									"end": 694,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 660,
									"end": 678,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 657,
									"end": 695,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 654,
									"end": 815,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "59"
								},
								{
									"begin": 654,
									"end": 815,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 737,
									"end": 747,
									"name": "PUSH",
									"source": 23,
									"value": "4E487B71"
								},
								{
									"begin": 732,
									"end": 735,
									"name": "PUSH",
									"source": 23,
									"value": "E0"
								},
								{
									"begin": 728,
									"end": 748,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 725,
									"end": 726,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 718,
									"end": 749,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 772,
									"end": 776,
									"name": "PUSH",
									"source": 23,
									"value": "22"
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 23,
									"value": "4"
								},
								{
									"begin": 762,
									"end": 777,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 800,
									"end": 804,
									"name": "PUSH",
									"source": 23,
									"value": "24"
								},
								{
									"begin": 797,
									"end": 798,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 790,
									"end": 805,
									"name": "REVERT",
									"source": 23
								},
								{
									"begin": 654,
									"end": 815,
									"name": "tag",
									"source": 23,
									"value": "59"
								},
								{
									"begin": 654,
									"end": 815,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 654,
									"end": 815,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 441,
									"end": 821,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 441,
									"end": 821,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 441,
									"end": 821,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 441,
									"end": 821,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "tag",
									"source": 23,
									"value": "50"
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1054,
									"end": 1056,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 1049,
									"end": 1052,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1046,
									"end": 1057,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "62"
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 1090,
									"end": 1095,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 1087,
									"end": 1088,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1080,
									"end": 1096,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 1134,
									"end": 1138,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 1131,
									"end": 1132,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1121,
									"end": 1139,
									"name": "KECCAK256",
									"source": 23
								},
								{
									"begin": 1204,
									"end": 1206,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 1192,
									"end": 1202,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 1188,
									"end": 1207,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1185,
									"end": 1186,
									"name": "PUSH",
									"source": 23,
									"value": "5"
								},
								{
									"begin": 1181,
									"end": 1208,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 1175,
									"end": 1179,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1171,
									"end": 1209,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1240,
									"end": 1244,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 1228,
									"end": 1238,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 1225,
									"end": 1245,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "63"
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1263,
									"end": 1267,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "tag",
									"source": 23,
									"value": "63"
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1318,
									"end": 1320,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 1316,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 1309,
									"end": 1321,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1306,
									"end": 1307,
									"name": "PUSH",
									"source": 23,
									"value": "5"
								},
								{
									"begin": 1302,
									"end": 1322,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 1296,
									"end": 1300,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 1292,
									"end": 1323,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1282,
									"end": 1323,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 1282,
									"end": 1323,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "tag",
									"source": 23,
									"value": "64"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1391,
									"end": 1393,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1384,
									"end": 1389,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1381,
									"end": 1394,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "66"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 1450,
									"end": 1451,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 1436,
									"end": 1452,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1436,
									"end": 1452,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 1417,
									"end": 1418,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 1406,
									"end": 1419,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "64"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "tag",
									"source": 23,
									"value": "66"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1377,
									"end": 1380,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1377,
									"end": 1380,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "tag",
									"source": 23,
									"value": "62"
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 952,
									"end": 1470,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1646,
									"end": 2945,
									"name": "tag",
									"source": 23,
									"value": "11"
								},
								{
									"begin": 1646,
									"end": 2945,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1766,
									"end": 1776,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1766,
									"end": 1776,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1788,
									"end": 1818,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1788,
									"end": 1818,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "70"
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "70"
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "47"
								},
								{
									"begin": 1821,
									"end": 1839,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "tag",
									"source": 23,
									"value": "70"
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "71"
								},
								{
									"begin": 1940,
									"end": 1946,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "72"
								},
								{
									"begin": 1932,
									"end": 1936,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 1926,
									"end": 1937,
									"name": "SLOAD",
									"source": 23
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "48"
								},
								{
									"begin": 1900,
									"end": 1938,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "tag",
									"source": 23,
									"value": "72"
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1894,
									"end": 1898,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "50"
								},
								{
									"begin": 1850,
									"end": 1947,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "tag",
									"source": 23,
									"value": "71"
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 1996,
									"end": 2000,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2027,
									"end": 2029,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 2016,
									"end": 2030,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2016,
									"end": 2030,
									"name": "GT",
									"source": 23
								},
								{
									"begin": 2044,
									"end": 2045,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "EQ",
									"source": 23
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "74"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 2732,
									"end": 2733,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 2749,
									"end": 2755,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2795,
									"end": 2821,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "tag",
									"source": 23,
									"value": "75"
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1603,
									"end": 1604,
									"name": "PUSH",
									"source": 23,
									"value": "3"
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 1595,
									"end": 1619,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 1591,
									"end": 1620,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 1581,
									"end": 1621,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 1627,
									"end": 1628,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 1578,
									"end": 1635,
									"name": "OR",
									"source": 23
								},
								{
									"begin": 2848,
									"end": 2929,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2848,
									"end": 2929,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 2009,
									"end": 2939,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "66"
								},
								{
									"begin": 2009,
									"end": 2939,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "tag",
									"source": 23,
									"value": "74"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 899,
									"end": 900,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 892,
									"end": 906,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 892,
									"end": 906,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 892,
									"end": 906,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 936,
									"end": 940,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 923,
									"end": 941,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 923,
									"end": 941,
									"name": "KECCAK256",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "tag",
									"source": 23,
									"value": "78"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2207,
									"end": 2214,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2204,
									"end": 2205,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2201,
									"end": 2215,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "80"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP8",
									"source": 23
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2283,
									"end": 2309,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 2268,
									"end": 2310,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2268,
									"end": 2310,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 2396,
									"end": 2400,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "SWAP5",
									"source": 23
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "SWAP5",
									"source": 23
								},
								{
									"begin": 2349,
									"end": 2350,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 2223,
									"end": 2235,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "78"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "tag",
									"source": 23,
									"value": "80"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 2197,
									"end": 2200,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 2443,
									"end": 2449,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2434,
									"end": 2441,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 2431,
									"end": 2450,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "81"
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2498,
									"end": 2524,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2587,
									"end": 2588,
									"name": "PUSH",
									"source": 23,
									"value": "3"
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "DUP8",
									"source": 23
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 2599,
									"end": 2602,
									"name": "PUSH",
									"source": 23,
									"value": "F8"
								},
								{
									"begin": 2579,
									"end": 2603,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 2575,
									"end": 2612,
									"name": "SHR",
									"source": 23
								},
								{
									"begin": 2571,
									"end": 2613,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 2556,
									"end": 2614,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 2541,
									"end": 2615,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2541,
									"end": 2615,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "tag",
									"source": 23,
									"value": "81"
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2675,
									"end": 2676,
									"name": "PUSH",
									"source": 23,
									"value": "1"
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 2655,
									"end": 2677,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 2642,
									"end": 2678,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 2642,
									"end": 2678,
									"name": "SSTORE",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1646,
									"end": 2945,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "tag",
									"source": 23,
									"value": "43"
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3801,
									"end": 3803,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 3790,
									"end": 3799,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3783,
									"end": 3804,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3764,
									"end": 3768,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3833,
									"end": 3839,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 3827,
									"end": 3840,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 3876,
									"end": 3882,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 3871,
									"end": 3873,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 3860,
									"end": 3869,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 3856,
									"end": 3874,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3849,
									"end": 3883,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3901,
									"end": 3902,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "tag",
									"source": 23,
									"value": "85"
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3925,
									"end": 3931,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3922,
									"end": 3923,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 3919,
									"end": 3932,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "87"
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": 4036,
									"end": 4038,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4020,
									"end": 4034,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4020,
									"end": 4034,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 4020,
									"end": 4034,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4016,
									"end": 4039,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4016,
									"end": 4039,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4010,
									"end": 4040,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 4005,
									"end": 4007,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 3986,
									"end": 4003,
									"name": "DUP7",
									"source": 23
								},
								{
									"begin": 3986,
									"end": 4003,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 3986,
									"end": 4003,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3982,
									"end": 4008,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3975,
									"end": 4041,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 3940,
									"end": 3950,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "85"
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "tag",
									"source": 23,
									"value": "87"
								},
								{
									"begin": 3911,
									"end": 4051,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 3915,
									"end": 3918,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4100,
									"end": 4101,
									"name": "PUSH",
									"source": 23,
									"value": "0"
								},
								{
									"begin": 4095,
									"end": 4097,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 4086,
									"end": 4092,
									"name": "DUP3",
									"source": 23
								},
								{
									"begin": 4075,
									"end": 4084,
									"name": "DUP6",
									"source": 23
								},
								{
									"begin": 4071,
									"end": 4093,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4067,
									"end": 4098,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4060,
									"end": 4102,
									"name": "MSTORE",
									"source": 23
								},
								{
									"begin": 4170,
									"end": 4172,
									"name": "PUSH",
									"source": 23,
									"value": "40"
								},
								{
									"begin": 4163,
									"end": 4165,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 4159,
									"end": 4166,
									"name": "NOT",
									"source": 23
								},
								{
									"begin": 4154,
									"end": 4156,
									"name": "PUSH",
									"source": 23,
									"value": "1F"
								},
								{
									"begin": 4146,
									"end": 4152,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 4142,
									"end": 4157,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4138,
									"end": 4167,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 4127,
									"end": 4136,
									"name": "DUP5",
									"source": 23
								},
								{
									"begin": 4123,
									"end": 4168,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4119,
									"end": 4173,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4111,
									"end": 4173,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4111,
									"end": 4173,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 4111,
									"end": 4173,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "SWAP3",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"name": "POP",
									"source": 23
								},
								{
									"begin": 3652,
									"end": 4179,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4184,
									"end": 4481,
									"name": "tag",
									"source": 23,
									"value": "45"
								},
								{
									"begin": 4184,
									"end": 4481,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 4302,
									"end": 4314,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 4302,
									"end": 4314,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 4349,
									"end": 4353,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4338,
									"end": 4354,
									"name": "DUP1",
									"source": 23
								},
								{
									"begin": 4338,
									"end": 4354,
									"name": "DUP4",
									"source": 23
								},
								{
									"begin": 4338,
									"end": 4354,
									"name": "ADD",
									"source": 23
								},
								{
									"begin": 4332,
									"end": 4355,
									"name": "MLOAD",
									"source": 23
								},
								{
									"begin": 4332,
									"end": 4355,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4302,
									"end": 4314,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4367,
									"end": 4383,
									"name": "DUP2",
									"source": 23
								},
								{
									"begin": 4367,
									"end": 4383,
									"name": "LT",
									"source": 23
								},
								{
									"begin": 4364,
									"end": 4475,
									"name": "ISZERO",
									"source": 23
								},
								{
									"begin": 4364,
									"end": 4475,
									"name": "PUSH [tag]",
									"source": 23,
									"value": "59"
								},
								{
									"begin": 4364,
									"end": 4475,
									"name": "JUMPI",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4441,
									"end": 4445,
									"name": "PUSH",
									"source": 23,
									"value": "20"
								},
								{
									"begin": 4437,
									"end": 4454,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4437,
									"end": 4454,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": 4437,
									"end": 4454,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4437,
									"end": 4454,
									"name": "SUB",
									"source": 23
								},
								{
									"begin": 4434,
									"end": 4435,
									"name": "PUSH",
									"source": 23,
									"value": "3"
								},
								{
									"begin": 4430,
									"end": 4455,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 4426,
									"end": 4464,
									"name": "SHL",
									"source": 23
								},
								{
									"begin": 4415,
									"end": 4465,
									"name": "AND",
									"source": 23
								},
								{
									"begin": 4415,
									"end": 4465,
									"name": "SWAP2",
									"source": 23
								},
								{
									"begin": 4184,
									"end": 4481,
									"name": "SWAP1",
									"source": 23
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4184,
									"end": 4481,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 23
								},
								{
									"begin": 4184,
									"end": 4481,
									"name": "tag",
									"source": 23,
									"value": "52"
								},
								{
									"begin": 4184,
									"end": 4481,
									"name": "JUMPDEST",
									"source": 23
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "80"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "A0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "C0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "E0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "120"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "140"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH #[$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH [$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "CODECOPY",
									"source": 22
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2530"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2527"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2524"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2522"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2520"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2518"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "ASSIGNIMMUTABLE",
									"source": 22,
									"value": "2516"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH #[$]",
									"source": 22,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 392,
									"end": 681,
									"name": "RETURN",
									"source": 22
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e8003806c664f973970dc26111efe79f5feae625b4fc2a953dcfbb809778228b64736f6c634300081a0033",
									".code": [
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "CALLVALUE",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "tag",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "CALLDATASIZE",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "SHR",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "715018A6"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "95D89B41"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "95D89B41"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "19"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "A9059CBB"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "D505ACCF"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "D9D98CE4"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "DD62ED3E"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "23"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "F2FDE38B"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "tag",
											"source": 22,
											"value": "26"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "715018A6"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "14"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "79CC6790"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "15"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "7ECEBE00"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "16"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "84B0196E"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "17"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "8DA5CB5B"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "18"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "tag",
											"source": 22,
											"value": "25"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "313CE567"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "27"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "313CE567"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "8"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "3644E515"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "9"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "42966C68"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "10"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "5CFFE9DE"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "613255AB"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "12"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "70A08231"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "13"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "tag",
											"source": 22,
											"value": "27"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "6FDDE03"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "3"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "95EA7B3"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "1249C58B"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "5"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "18160DDD"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "6"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "23B872DD"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "7"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "tag",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 392,
											"end": 681,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 392,
											"end": 681,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1317,
											"end": 1331,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1317,
											"end": 1331,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 1310,
											"end": 1332,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 1292,
											"end": 1333,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1292,
											"end": 1333,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1280,
											"end": 1282,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1265,
											"end": 1283,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 1152,
											"end": 1339,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 610,
											"end": 679,
											"name": "tag",
											"source": 22,
											"value": "5"
										},
										{
											"begin": 610,
											"end": 679,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 610,
											"end": 679,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "38"
										},
										{
											"begin": 610,
											"end": 679,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "39"
										},
										{
											"begin": 610,
											"end": 679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 610,
											"end": 679,
											"name": "tag",
											"source": 22,
											"value": "38"
										},
										{
											"begin": 610,
											"end": 679,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 610,
											"end": 679,
											"name": "STOP",
											"source": 22
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1478,
											"end": 1480,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3075,
											"end": 3077,
											"name": "PUSH",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2181,
											"end": 2217,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2181,
											"end": 2217,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 2169,
											"end": 2171,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 2154,
											"end": 2172,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 2039,
											"end": 2223,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 4784,
											"end": 5746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4784,
											"end": 5746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 1934,
											"end": 2095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "tag",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 1934,
											"end": 2095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "68"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "30"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "87"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5287,
											"end": 5289,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "101"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 2460,
											"end": 2692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "tag",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 2460,
											"end": 2692,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "109"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 5,
											"value": "108"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 610,
											"end": 679,
											"name": "tag",
											"source": 22,
											"value": "39"
										},
										{
											"begin": 610,
											"end": 679,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 643,
											"end": 672,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "128"
										},
										{
											"begin": 649,
											"end": 659,
											"name": "CALLER",
											"source": 22
										},
										{
											"begin": 661,
											"end": 671,
											"name": "PUSH",
											"source": 22,
											"value": "3635C9ADC5DEA00000"
										},
										{
											"begin": 643,
											"end": 648,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "129"
										},
										{
											"begin": 643,
											"end": 672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 643,
											"end": 672,
											"name": "tag",
											"source": 22,
											"value": "128"
										},
										{
											"begin": 643,
											"end": 672,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 610,
											"end": 679,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 9,
											"value": "54"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2741,
											"end": 2759,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "140"
										},
										{
											"begin": 2741,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "tag",
											"source": 9,
											"value": "139"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 672,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 672,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 672,
											"end": 698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 672,
											"end": 698,
											"name": "tag",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 672,
											"end": 698,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4948,
											"end": 4952,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4964,
											"end": 4979,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5001,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 4995,
											"end": 5000,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 4994,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 4982,
											"end": 5001,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4982,
											"end": 5001,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 4982,
											"end": 5001,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4964,
											"end": 5001,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4964,
											"end": 5001,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5023,
											"end": 5030,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5015,
											"end": 5020,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5015,
											"end": 5030,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5095,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 5011,
											"end": 5095,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FD9A7609"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5053,
											"end": 5084,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5011,
											"end": 5095,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 5011,
											"end": 5095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5104,
											"end": 5115,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5118,
											"end": 5140,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 5127,
											"end": 5132,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5134,
											"end": 5139,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5118,
											"end": 5126,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 5118,
											"end": 5140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5118,
											"end": 5140,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 5118,
											"end": 5140,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5104,
											"end": 5140,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5104,
											"end": 5140,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5150,
											"end": 5181,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 5164,
											"end": 5172,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 5175,
											"end": 5180,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5150,
											"end": 5155,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 5150,
											"end": 5181,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5150,
											"end": 5181,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 5150,
											"end": 5181,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23E30C8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1083,
											"name": "PUSH",
											"source": 8,
											"value": "439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9"
										},
										{
											"begin": 1038,
											"end": 1083,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5195,
											"end": 5215,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5215,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5215,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5215,
											"name": "PUSH",
											"source": 8,
											"value": "23E30C8B"
										},
										{
											"begin": 5195,
											"end": 5215,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5230,
											"end": 5235,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 5230,
											"end": 5235,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5242,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5244,
											"end": 5247,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 5244,
											"end": 5247,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5249,
											"end": 5253,
											"name": "DUP14",
											"source": 8
										},
										{
											"begin": 5249,
											"end": 5253,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5249,
											"end": 5253,
											"name": "DUP14",
											"source": 8
										},
										{
											"begin": 5249,
											"end": 5253,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 5195,
											"end": 5254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "CALL",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "tag",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 5195,
											"end": 5254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 5195,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5270,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5191,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 5191,
											"end": 5345,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "678C5B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5317,
											"end": 5349,
											"name": "DUP10",
											"source": 23
										},
										{
											"begin": 5317,
											"end": 5349,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5293,
											"end": 5334,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5191,
											"end": 5345,
											"name": "tag",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 5191,
											"end": 5345,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5354,
											"end": 5378,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5410,
											"end": 5472,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 5434,
											"end": 5442,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5453,
											"end": 5457,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 5460,
											"end": 5471,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 5468,
											"end": 5471,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 5460,
											"end": 5465,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 5460,
											"end": 5471,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 5460,
											"end": 5471,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5460,
											"end": 5471,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 5460,
											"end": 5471,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5410,
											"end": 5425,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 5410,
											"end": 5472,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5410,
											"end": 5472,
											"name": "tag",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 5410,
											"end": 5472,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5486,
											"end": 5494,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5486,
											"end": 5494,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5486,
											"end": 5494,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5486,
											"end": 5528,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 5486,
											"end": 5528,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5498,
											"end": 5528,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5486,
											"end": 5528,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 5486,
											"end": 5528,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5544,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 5558,
											"end": 5566,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 5577,
											"end": 5580,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5574,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5580,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 5569,
											"end": 5580,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5569,
											"end": 5580,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 5569,
											"end": 5580,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5544,
											"end": 5549,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 5544,
											"end": 5581,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5544,
											"end": 5581,
											"name": "tag",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 5544,
											"end": 5581,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 5482,
											"end": 5719,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5612,
											"end": 5643,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 5626,
											"end": 5634,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5637,
											"end": 5642,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 5612,
											"end": 5617,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 5612,
											"end": 5643,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5612,
											"end": 5643,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 5612,
											"end": 5643,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5657,
											"end": 5708,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 5675,
											"end": 5683,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5686,
											"end": 5702,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5707,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5657,
											"end": 5666,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "136"
										},
										{
											"begin": 5657,
											"end": 5708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5657,
											"end": 5708,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 5657,
											"end": 5708,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5735,
											"end": 5739,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5735,
											"end": 5739,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 4784,
											"end": 5746,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4784,
											"end": 5746,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 1934,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2000,
											"end": 2007,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2026,
											"end": 2048,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2026,
											"end": 2048,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2043,
											"end": 2047,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 2026,
											"end": 2048,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2087,
											"end": 2088,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 2026,
											"end": 2088,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2051,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "122"
										},
										{
											"begin": 2051,
											"end": 2084,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2051,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 2051,
											"end": 2084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1096,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 1096,
											"end": 1141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1166,
											"end": 1171,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1151,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 1151,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 9,
											"value": "82"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2497,
											"end": 2504,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 18,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5242,
											"end": 5255,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5269,
											"end": 5287,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 5301,
											"end": 5322,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5336,
											"end": 5351,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5365,
											"end": 5390,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5404,
											"end": 5416,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5430,
											"end": 5457,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "193"
										},
										{
											"begin": 5533,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "194"
										},
										{
											"begin": 5533,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "tag",
											"source": 18,
											"value": "193"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "195"
										},
										{
											"begin": 5560,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "196"
										},
										{
											"begin": 5560,
											"end": 5576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "tag",
											"source": 18,
											"value": "195"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP12",
											"source": 18
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP11",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP9",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 18
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 9,
											"value": "102"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1901,
											"end": 1909,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1883,
											"end": 1898,
											"name": "TIMESTAMP",
											"source": 9
										},
										{
											"begin": 1883,
											"end": 1909,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313C8981"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "tag",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1986,
											"end": 2004,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1022,
											"end": 1117,
											"name": "PUSH",
											"source": 9,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2045,
											"end": 2050,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2052,
											"end": 2059,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2061,
											"end": 2066,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 819,
											"end": 826,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "tag",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8919,
											"end": 8944,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": 8919,
											"end": 8944,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8919,
											"end": 8944,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": 8919,
											"end": 8944,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8980,
											"end": 9012,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 8980,
											"end": 9012,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 8980,
											"end": 9012,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 8960,
											"end": 8978,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 8960,
											"end": 8978,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 8960,
											"end": 8978,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 8953,
											"end": 9013,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9049,
											"end": 9081,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 9049,
											"end": 9081,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9049,
											"end": 9081,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 9049,
											"end": 9081,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 9029,
											"end": 9047,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 9029,
											"end": 9047,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 9029,
											"end": 9047,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9022,
											"end": 9082,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9098,
											"end": 9116,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 9098,
											"end": 9116,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 9098,
											"end": 9116,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9091,
											"end": 9125,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9141,
											"end": 9160,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 9141,
											"end": 9160,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9141,
											"end": 9160,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9134,
											"end": 9169,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9185,
											"end": 9204,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 9185,
											"end": 9204,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 9185,
											"end": 9204,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9178,
											"end": 9213,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 9178,
											"end": 9213,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9178,
											"end": 9213,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 8891,
											"end": 8910,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 8891,
											"end": 8910,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2107,
											"end": 2119,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 2139,
											"end": 2149,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2122,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 2122,
											"end": 2150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "tag",
											"source": 9,
											"value": "218"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2175,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 2192,
											"end": 2196,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2178,
											"end": 2191,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "221"
										},
										{
											"begin": 2178,
											"end": 2206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "tag",
											"source": 9,
											"value": "220"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "25C00723"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9416,
											"end": 9448,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 9416,
											"end": 9448,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 9416,
											"end": 9448,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 9398,
											"end": 9449,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9485,
											"end": 9517,
											"name": "DUP12",
											"source": 23
										},
										{
											"begin": 9485,
											"end": 9517,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 9465,
											"end": 9483,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 9465,
											"end": 9483,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9465,
											"end": 9483,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9458,
											"end": 9518,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9371,
											"end": 9389,
											"name": "PUSH",
											"source": 23,
											"value": "44"
										},
										{
											"begin": 9371,
											"end": 9389,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 9224,
											"end": 9524,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "tag",
											"source": 9,
											"value": "222"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 2323,
											"end": 2328,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 2330,
											"end": 2337,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 2339,
											"end": 2344,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 2314,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "tag",
											"source": 9,
											"value": "225"
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "tag",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2537,
											"end": 2544,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2560,
											"end": 2582,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2582,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2577,
											"end": 2581,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 2560,
											"end": 2582,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2556,
											"end": 2646,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 2556,
											"end": 2646,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5AD3EDC9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5317,
											"end": 5349,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 5317,
											"end": 5349,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2605,
											"end": 2635,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2556,
											"end": 2646,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 2556,
											"end": 2646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3160,
											"end": 3167,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2662,
											"end": 2685,
											"name": "tag",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 2662,
											"end": 2685,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2655,
											"end": 2685,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2460,
											"end": 2692,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2460,
											"end": 2692,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 5,
											"value": "243"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 5,
											"value": "134"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9749,
											"end": 9781,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 9749,
											"end": 9781,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9731,
											"end": 9782,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "PUSH",
											"source": 23,
											"value": "44"
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9704,
											"end": 9722,
											"name": "PUSH",
											"source": 23,
											"value": "64"
										},
										{
											"begin": 9704,
											"end": 9722,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 9529,
											"end": 9874,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 5,
											"value": "250"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 5,
											"value": "136"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 5,
											"value": "257"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "240"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2520"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "261"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2518"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 18
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 18,
											"value": "261"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "262"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2516"
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3845,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 18,
											"value": "262"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 18,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 10138,
											"end": 10163,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2522"
										},
										{
											"begin": 10179,
											"end": 10197,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10179,
											"end": 10197,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 10179,
											"end": 10197,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10172,
											"end": 10206,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10172,
											"end": 10206,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 10172,
											"end": 10206,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 10172,
											"end": 10206,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2524"
										},
										{
											"begin": 10222,
											"end": 10240,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 10222,
											"end": 10240,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10222,
											"end": 10240,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10215,
											"end": 10249,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 18
										},
										{
											"begin": 10265,
											"end": 10283,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 10265,
											"end": 10283,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10265,
											"end": 10283,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10258,
											"end": 10292,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 10308,
											"end": 10327,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 10308,
											"end": 10327,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10308,
											"end": 10327,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10301,
											"end": 10362,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 10110,
											"end": 10129,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 10110,
											"end": 10129,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 18
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 5,
											"value": "144"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 5,
											"value": "267"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "188"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "tag",
											"source": 18,
											"value": "194"
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6067,
											"end": 6080,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2527"
										},
										{
											"begin": 6126,
											"end": 6139,
											"name": "PUSH",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "281"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "tag",
											"source": 18,
											"value": "196"
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 6522,
											"end": 6535,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "139"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 18,
											"value": "2530"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "281"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 18,
											"value": "219"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4994,
											"end": 5001,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "122"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "287"
										},
										{
											"begin": 5053,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 18,
											"value": "287"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5075,
											"end": 5085,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3555,
											"end": 3559,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3560,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3625,
											"end": 3629,
											"name": "PUSH",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3677,
											"end": 3681,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3661,
											"end": 3695,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3733,
											"end": 3737,
											"name": "PUSH",
											"source": 19,
											"value": "42"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "tag",
											"source": 17,
											"value": "221"
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6888,
											"end": 6895,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6925,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "290"
										},
										{
											"begin": 6978,
											"end": 6982,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 6984,
											"end": 6985,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 6987,
											"end": 6988,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 6990,
											"end": 6991,
											"name": "DUP9",
											"source": 17
										},
										{
											"begin": 6967,
											"end": 6977,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "291"
										},
										{
											"begin": 6967,
											"end": 6992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "tag",
											"source": 17,
											"value": "290"
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "292"
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7021,
											"end": 7029,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7002,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "293"
										},
										{
											"begin": 7002,
											"end": 7030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "tag",
											"source": 17,
											"value": "292"
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 7063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "296"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 5,
											"value": "296"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "298"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5299,
											"end": 5350,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 5272,
											"end": 5290,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 5153,
											"end": 5356,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 5,
											"value": "298"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "253"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 5,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "301"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1478,
											"end": 1480,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 5,
											"value": "301"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 5,
											"value": "246"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "303"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "304"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 5,
											"value": "304"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "305"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 5,
											"value": "303"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "306"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9749,
											"end": 9781,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 9749,
											"end": 9781,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9731,
											"end": 9782,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 9798,
											"end": 9816,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9791,
											"end": 9825,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "PUSH",
											"source": 23,
											"value": "44"
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 9841,
											"end": 9859,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 9834,
											"end": 9868,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 9704,
											"end": 9722,
											"name": "PUSH",
											"source": 23,
											"value": "64"
										},
										{
											"begin": 9704,
											"end": 9722,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 9529,
											"end": 9874,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 5,
											"value": "306"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 5,
											"value": "305"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "308"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "309"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 5,
											"value": "308"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 5,
											"value": "309"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 5,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "310"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1478,
											"end": 1480,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 5,
											"value": "310"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 14,
											"value": "281"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3479,
											"end": 3492,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "315"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "316"
										},
										{
											"begin": 3586,
											"end": 3591,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3577,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "317"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "tag",
											"source": 14,
											"value": "316"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 14,
											"value": "315"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3630,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 14,
											"value": "319"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "117"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 14,
											"value": "320"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 14,
											"value": "322"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 14,
											"value": "323"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "323"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 14,
											"value": "321"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 17,
											"value": "291"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 17,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "326"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6333,
											"end": 6334,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "325"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 17,
											"value": "326"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 6440,
											"end": 6454,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 10600,
											"end": 10625,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 10600,
											"end": 10625,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 10600,
											"end": 10625,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10673,
											"end": 10677,
											"name": "PUSH",
											"source": 23,
											"value": "FF"
										},
										{
											"begin": 10661,
											"end": 10678,
											"name": "DUP10",
											"source": 23
										},
										{
											"begin": 10661,
											"end": 10678,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 10641,
											"end": 10659,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 10641,
											"end": 10659,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 10641,
											"end": 10659,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10634,
											"end": 10679,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 10634,
											"end": 10679,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 10634,
											"end": 10679,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 10634,
											"end": 10679,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10695,
											"end": 10713,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 10695,
											"end": 10713,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 10695,
											"end": 10713,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10688,
											"end": 10722,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 10688,
											"end": 10722,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 10688,
											"end": 10722,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 10731,
											"end": 10765,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 10731,
											"end": 10765,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 10731,
											"end": 10765,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 10572,
											"end": 10591,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 10572,
											"end": 10591,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP6",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "330"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATACOPY",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 17,
											"value": "330"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "331"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "325"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 17,
											"value": "331"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6622,
											"end": 6628,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 17,
											"value": "325"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 17,
											"value": "293"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7291,
											"end": 7311,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 7282,
											"end": 7287,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "335"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 17,
											"value": "337"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "338"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 7196,
											"end": 7728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "tag",
											"source": 17,
											"value": "338"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7387,
											"end": 7416,
											"name": "PUSH",
											"source": 17,
											"value": "1"
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "343"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "343"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "335"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 17,
											"value": "343"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "344"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F645EEDF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "REVERT",
											"source": 17
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "tag",
											"source": 17,
											"value": "344"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7492,
											"end": 7527,
											"name": "PUSH",
											"source": 17,
											"value": "2"
										},
										{
											"begin": 7483,
											"end": 7488,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "349"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "349"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "335"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 17,
											"value": "349"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "350"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FCE698F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "148"
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "tag",
											"source": 17,
											"value": "350"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7626,
											"end": 7656,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7622,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH",
											"source": 17,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "356"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "356"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "335"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 17,
											"value": "356"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "188"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "35E2F383"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 17,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1490,
											"end": 1515,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 1463,
											"end": 1481,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "148"
										},
										{
											"begin": 1344,
											"end": 1521,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 14,
											"value": "317"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2137,
											"end": 2150,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2162,
											"end": 2173,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 2187,
											"end": 2191,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 2176,
											"end": 2192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "tag",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2435,
											"end": 2439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "tag",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2616,
											"end": 2623,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 14,
											"end": 414,
											"name": "tag",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 14,
											"end": 414,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 56,
											"end": 59,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 94,
											"end": 99,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 88,
											"end": 100,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 121,
											"end": 127,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 116,
											"end": 119,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 109,
											"end": 128,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 146,
											"end": 147,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 156,
											"end": 295,
											"name": "tag",
											"source": 23,
											"value": "372"
										},
										{
											"begin": 156,
											"end": 295,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 170,
											"end": 176,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 167,
											"end": 168,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 164,
											"end": 177,
											"name": "LT",
											"source": 23
										},
										{
											"begin": 156,
											"end": 295,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 156,
											"end": 295,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "374"
										},
										{
											"begin": 156,
											"end": 295,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 278,
											"end": 282,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 263,
											"end": 276,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 263,
											"end": 276,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 263,
											"end": 276,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 259,
											"end": 283,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 259,
											"end": 283,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 253,
											"end": 284,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 233,
											"end": 244,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 233,
											"end": 244,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 233,
											"end": 244,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 229,
											"end": 251,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 229,
											"end": 251,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 222,
											"end": 285,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 185,
											"end": 197,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 156,
											"end": 295,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "372"
										},
										{
											"begin": 156,
											"end": 295,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 156,
											"end": 295,
											"name": "tag",
											"source": 23,
											"value": "374"
										},
										{
											"begin": 156,
											"end": 295,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 160,
											"end": 163,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 340,
											"end": 341,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 333,
											"end": 337,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 324,
											"end": 330,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 319,
											"end": 322,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 315,
											"end": 331,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 311,
											"end": 338,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 304,
											"end": 342,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 403,
											"end": 407,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 396,
											"end": 398,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 392,
											"end": 399,
											"name": "NOT",
											"source": 23
										},
										{
											"begin": 387,
											"end": 389,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 379,
											"end": 385,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 375,
											"end": 390,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 371,
											"end": 400,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 362,
											"end": 401,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 358,
											"end": 408,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 351,
											"end": 408,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 351,
											"end": 408,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 351,
											"end": 408,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 14,
											"end": 414,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 14,
											"end": 414,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 14,
											"end": 414,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 14,
											"end": 414,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 14,
											"end": 414,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 419,
											"end": 639,
											"name": "tag",
											"source": 23,
											"value": "31"
										},
										{
											"begin": 419,
											"end": 639,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 568,
											"end": 570,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 557,
											"end": 566,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 550,
											"end": 571,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 531,
											"end": 535,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 588,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "229"
										},
										{
											"begin": 629,
											"end": 631,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 618,
											"end": 627,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 614,
											"end": 632,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 606,
											"end": 612,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 588,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 588,
											"end": 633,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 644,
											"end": 775,
											"name": "tag",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 644,
											"end": 775,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 719,
											"end": 750,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 719,
											"end": 750,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 709,
											"end": 751,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 709,
											"end": 751,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 699,
											"end": 769,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "142"
										},
										{
											"begin": 699,
											"end": 769,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 765,
											"end": 766,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 762,
											"end": 763,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 755,
											"end": 767,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 780,
											"end": 1147,
											"name": "tag",
											"source": 23,
											"value": "34"
										},
										{
											"begin": 780,
											"end": 1147,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 848,
											"end": 854,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 856,
											"end": 862,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 909,
											"end": 911,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 897,
											"end": 906,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 888,
											"end": 895,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 884,
											"end": 907,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 880,
											"end": 912,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 877,
											"end": 929,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 877,
											"end": 929,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "380"
										},
										{
											"begin": 877,
											"end": 929,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 925,
											"end": 926,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 922,
											"end": 923,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 915,
											"end": 927,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 877,
											"end": 929,
											"name": "tag",
											"source": 23,
											"value": "380"
										},
										{
											"begin": 877,
											"end": 929,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 964,
											"end": 973,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 951,
											"end": 974,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 983,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "381"
										},
										{
											"begin": 1008,
											"end": 1013,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 983,
											"end": 1014,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 983,
											"end": 1014,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 983,
											"end": 1014,
											"name": "tag",
											"source": 23,
											"value": "381"
										},
										{
											"begin": 983,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1033,
											"end": 1038,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1096,
											"end": 1114,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 1096,
											"end": 1114,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1096,
											"end": 1114,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 1096,
											"end": 1114,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1083,
											"end": 1115,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1083,
											"end": 1115,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 780,
											"end": 1147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1526,
											"end": 2034,
											"name": "tag",
											"source": 23,
											"value": "46"
										},
										{
											"begin": 1526,
											"end": 2034,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1603,
											"end": 1609,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1611,
											"end": 1617,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 1619,
											"end": 1625,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1672,
											"end": 1674,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 1660,
											"end": 1669,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 1651,
											"end": 1658,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 1647,
											"end": 1670,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 1643,
											"end": 1675,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 1640,
											"end": 1692,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 1640,
											"end": 1692,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "385"
										},
										{
											"begin": 1640,
											"end": 1692,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 1688,
											"end": 1689,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 1685,
											"end": 1686,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 1678,
											"end": 1690,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 1640,
											"end": 1692,
											"name": "tag",
											"source": 23,
											"value": "385"
										},
										{
											"begin": 1640,
											"end": 1692,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1727,
											"end": 1736,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 1714,
											"end": 1737,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1746,
											"end": 1777,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "386"
										},
										{
											"begin": 1771,
											"end": 1776,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1746,
											"end": 1777,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 1746,
											"end": 1777,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1746,
											"end": 1777,
											"name": "tag",
											"source": 23,
											"value": "386"
										},
										{
											"begin": 1746,
											"end": 1777,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1796,
											"end": 1801,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1853,
											"end": 1855,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 1838,
											"end": 1856,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 1838,
											"end": 1856,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1825,
											"end": 1857,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1866,
											"end": 1899,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "387"
										},
										{
											"begin": 1825,
											"end": 1857,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 1866,
											"end": 1899,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 1866,
											"end": 1899,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 1866,
											"end": 1899,
											"name": "tag",
											"source": 23,
											"value": "387"
										},
										{
											"begin": 1866,
											"end": 1899,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 1526,
											"end": 2034,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1526,
											"end": 2034,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 1918,
											"end": 1925,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2000,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 1983,
											"end": 2001,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 1970,
											"end": 2002,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 1526,
											"end": 2034,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2410,
											"end": 2636,
											"name": "tag",
											"source": 23,
											"value": "59"
										},
										{
											"begin": 2410,
											"end": 2636,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2469,
											"end": 2475,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2522,
											"end": 2524,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 2510,
											"end": 2519,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 2501,
											"end": 2508,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 2497,
											"end": 2520,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 2493,
											"end": 2525,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 2490,
											"end": 2542,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2490,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "391"
										},
										{
											"begin": 2490,
											"end": 2542,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 2538,
											"end": 2539,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2535,
											"end": 2536,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 2528,
											"end": 2540,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 2490,
											"end": 2542,
											"name": "tag",
											"source": 23,
											"value": "391"
										},
										{
											"begin": 2490,
											"end": 2542,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2583,
											"end": 2606,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 2583,
											"end": 2606,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 2410,
											"end": 2636,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2410,
											"end": 2636,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "tag",
											"source": 23,
											"value": "63"
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2767,
											"end": 2773,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2775,
											"end": 2781,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 2783,
											"end": 2789,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2791,
											"end": 2797,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 2799,
											"end": 2805,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2852,
											"end": 2855,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 2840,
											"end": 2849,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 2831,
											"end": 2838,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 2827,
											"end": 2850,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 2823,
											"end": 2856,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 2820,
											"end": 2873,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 2820,
											"end": 2873,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "393"
										},
										{
											"begin": 2820,
											"end": 2873,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 2869,
											"end": 2870,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 2866,
											"end": 2867,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 2859,
											"end": 2871,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 2820,
											"end": 2873,
											"name": "tag",
											"source": 23,
											"value": "393"
										},
										{
											"begin": 2820,
											"end": 2873,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2908,
											"end": 2917,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 2895,
											"end": 2918,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 2927,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "394"
										},
										{
											"begin": 2952,
											"end": 2957,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 2927,
											"end": 2958,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 2927,
											"end": 2958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 2927,
											"end": 2958,
											"name": "tag",
											"source": 23,
											"value": "394"
										},
										{
											"begin": 2927,
											"end": 2958,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2977,
											"end": 2982,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3034,
											"end": 3036,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3019,
											"end": 3037,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3019,
											"end": 3037,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3006,
											"end": 3038,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 3047,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "395"
										},
										{
											"begin": 3006,
											"end": 3038,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3047,
											"end": 3080,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 3047,
											"end": 3080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3047,
											"end": 3080,
											"name": "tag",
											"source": 23,
											"value": "395"
										},
										{
											"begin": 3047,
											"end": 3080,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3099,
											"end": 3106,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3179,
											"end": 3181,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 3164,
											"end": 3182,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3164,
											"end": 3182,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 3245,
											"end": 3263,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3245,
											"end": 3263,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3232,
											"end": 3264,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 3287,
											"end": 3305,
											"name": "PUSH",
											"source": 23,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3276,
											"end": 3306,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3276,
											"end": 3306,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 3273,
											"end": 3323,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 3273,
											"end": 3323,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "396"
										},
										{
											"begin": 3273,
											"end": 3323,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3319,
											"end": 3320,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3316,
											"end": 3317,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3309,
											"end": 3321,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 3273,
											"end": 3323,
											"name": "tag",
											"source": 23,
											"value": "396"
										},
										{
											"begin": 3273,
											"end": 3323,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3342,
											"end": 3364,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 3342,
											"end": 3364,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3395,
											"end": 3399,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 3387,
											"end": 3400,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3387,
											"end": 3400,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3383,
											"end": 3410,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 3373,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "397"
										},
										{
											"begin": 3373,
											"end": 3428,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3424,
											"end": 3425,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3421,
											"end": 3422,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3414,
											"end": 3426,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 3373,
											"end": 3428,
											"name": "tag",
											"source": 23,
											"value": "397"
										},
										{
											"begin": 3373,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3464,
											"end": 3466,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 3490,
											"end": 3508,
											"name": "PUSH",
											"source": 23,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3482,
											"end": 3488,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3479,
											"end": 3509,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 3476,
											"end": 3526,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 3476,
											"end": 3526,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "398"
										},
										{
											"begin": 3476,
											"end": 3526,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3522,
											"end": 3523,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3519,
											"end": 3520,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3512,
											"end": 3524,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 3476,
											"end": 3526,
											"name": "tag",
											"source": 23,
											"value": "398"
										},
										{
											"begin": 3476,
											"end": 3526,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3567,
											"end": 3574,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 3562,
											"end": 3564,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3553,
											"end": 3559,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3549,
											"end": 3551,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3545,
											"end": 3560,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3541,
											"end": 3565,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3538,
											"end": 3575,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 3535,
											"end": 3592,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 3535,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "399"
										},
										{
											"begin": 3535,
											"end": 3592,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3588,
											"end": 3589,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3585,
											"end": 3586,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3578,
											"end": 3590,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 3535,
											"end": 3592,
											"name": "tag",
											"source": 23,
											"value": "399"
										},
										{
											"begin": 3535,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP9",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP8",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3611,
											"end": 3622,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 3611,
											"end": 3622,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 3641,
											"end": 3647,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 2641,
											"end": 3653,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3658,
											"end": 3905,
											"name": "tag",
											"source": 23,
											"value": "68"
										},
										{
											"begin": 3658,
											"end": 3905,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3717,
											"end": 3723,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3770,
											"end": 3772,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 3758,
											"end": 3767,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 3749,
											"end": 3756,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 3745,
											"end": 3768,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 3741,
											"end": 3773,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 3738,
											"end": 3790,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 3738,
											"end": 3790,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "401"
										},
										{
											"begin": 3738,
											"end": 3790,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 3786,
											"end": 3787,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 3783,
											"end": 3784,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 3776,
											"end": 3788,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 3738,
											"end": 3790,
											"name": "tag",
											"source": 23,
											"value": "401"
										},
										{
											"begin": 3738,
											"end": 3790,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 3825,
											"end": 3834,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3812,
											"end": 3835,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "229"
										},
										{
											"begin": 3869,
											"end": 3874,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 3844,
											"end": 3875,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 3844,
											"end": 3875,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 3910,
											"end": 5148,
											"name": "tag",
											"source": 23,
											"value": "87"
										},
										{
											"begin": 3910,
											"end": 5148,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4316,
											"end": 4319,
											"name": "PUSH",
											"source": 23,
											"value": "FF"
										},
										{
											"begin": 4311,
											"end": 4314,
											"name": "PUSH",
											"source": 23,
											"value": "F8"
										},
										{
											"begin": 4307,
											"end": 4320,
											"name": "SHL",
											"source": 23
										},
										{
											"begin": 4299,
											"end": 4305,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 4295,
											"end": 4321,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 4284,
											"end": 4293,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4277,
											"end": 4322,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4358,
											"end": 4361,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 4353,
											"end": 4355,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4342,
											"end": 4351,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4338,
											"end": 4356,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4331,
											"end": 4362,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4258,
											"end": 4262,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "404"
										},
										{
											"begin": 4426,
											"end": 4429,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 4415,
											"end": 4424,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 4411,
											"end": 4430,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4403,
											"end": 4409,
											"name": "DUP10",
											"source": 23
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 4385,
											"end": 4431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "tag",
											"source": 23,
											"value": "404"
										},
										{
											"begin": 4385,
											"end": 4431,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4479,
											"end": 4488,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4471,
											"end": 4477,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4467,
											"end": 4489,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 4462,
											"end": 4464,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 4451,
											"end": 4460,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4447,
											"end": 4465,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4440,
											"end": 4490,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4513,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "405"
										},
										{
											"begin": 4539,
											"end": 4545,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4531,
											"end": 4537,
											"name": "DUP10",
											"source": 23
										},
										{
											"begin": 4513,
											"end": 4546,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "367"
										},
										{
											"begin": 4513,
											"end": 4546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4513,
											"end": 4546,
											"name": "tag",
											"source": 23,
											"value": "405"
										},
										{
											"begin": 4513,
											"end": 4546,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4577,
											"end": 4579,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 4562,
											"end": 4580,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4562,
											"end": 4580,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4589,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4589,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4555,
											"end": 4589,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4626,
											"end": 4658,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4626,
											"end": 4658,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 4620,
											"end": 4623,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 4605,
											"end": 4624,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 4605,
											"end": 4624,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4598,
											"end": 4659,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4646,
											"end": 4649,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 4675,
											"end": 4694,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4675,
											"end": 4694,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4668,
											"end": 4703,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 4668,
											"end": 4703,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4668,
											"end": 4703,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4740,
											"end": 4762,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 4740,
											"end": 4762,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4740,
											"end": 4762,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 4734,
											"end": 4737,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 4719,
											"end": 4738,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 4719,
											"end": 4738,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4712,
											"end": 4763,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4812,
											"end": 4825,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 4812,
											"end": 4825,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 4834,
											"end": 4856,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 4834,
											"end": 4856,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 4834,
											"end": 4856,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 4884,
											"end": 4886,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 4910,
											"end": 4925,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 4910,
											"end": 4925,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 4910,
											"end": 4925,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4910,
											"end": 4925,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4872,
											"end": 4887,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 4872,
											"end": 4887,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4872,
											"end": 4887,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4872,
											"end": 4887,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "tag",
											"source": 23,
											"value": "406"
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 4967,
											"end": 4973,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4964,
											"end": 4965,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 4961,
											"end": 4974,
											"name": "LT",
											"source": 23
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "408"
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 5028,
											"end": 5041,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 5028,
											"end": 5041,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 5016,
											"end": 5042,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 5016,
											"end": 5042,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 5071,
											"end": 5073,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5097,
											"end": 5112,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 5062,
											"end": 5074,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 5062,
											"end": 5074,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5062,
											"end": 5074,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5062,
											"end": 5074,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 4989,
											"end": 4990,
											"name": "PUSH",
											"source": 23,
											"value": "1"
										},
										{
											"begin": 4982,
											"end": 4991,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "406"
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "tag",
											"source": 23,
											"value": "408"
										},
										{
											"begin": 4953,
											"end": 5122,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5139,
											"end": 5142,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 5139,
											"end": 5142,
											"name": "SWAP12",
											"source": 23
										},
										{
											"begin": 3910,
											"end": 5148,
											"name": "SWAP11",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3910,
											"end": 5148,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "tag",
											"source": 23,
											"value": "101"
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5472,
											"end": 5478,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5480,
											"end": 5486,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 5488,
											"end": 5494,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5496,
											"end": 5502,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 5504,
											"end": 5510,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5512,
											"end": 5518,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 5520,
											"end": 5526,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5573,
											"end": 5576,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 5561,
											"end": 5570,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5552,
											"end": 5559,
											"name": "DUP11",
											"source": 23
										},
										{
											"begin": 5548,
											"end": 5571,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 5544,
											"end": 5577,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 5541,
											"end": 5594,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 5541,
											"end": 5594,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "411"
										},
										{
											"begin": 5541,
											"end": 5594,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 5590,
											"end": 5591,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 5587,
											"end": 5588,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 5580,
											"end": 5592,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 5541,
											"end": 5594,
											"name": "tag",
											"source": 23,
											"value": "411"
										},
										{
											"begin": 5541,
											"end": 5594,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5629,
											"end": 5638,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 5616,
											"end": 5639,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 5648,
											"end": 5679,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "412"
										},
										{
											"begin": 5673,
											"end": 5678,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 5648,
											"end": 5679,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 5648,
											"end": 5679,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5648,
											"end": 5679,
											"name": "tag",
											"source": 23,
											"value": "412"
										},
										{
											"begin": 5648,
											"end": 5679,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5698,
											"end": 5703,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5755,
											"end": 5757,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 5740,
											"end": 5758,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5740,
											"end": 5758,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 5768,
											"end": 5801,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "413"
										},
										{
											"begin": 5727,
											"end": 5759,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 5768,
											"end": 5801,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 5768,
											"end": 5801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 5768,
											"end": 5801,
											"name": "tag",
											"source": 23,
											"value": "413"
										},
										{
											"begin": 5768,
											"end": 5801,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5820,
											"end": 5827,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5902,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 5885,
											"end": 5903,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5885,
											"end": 5903,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5872,
											"end": 5904,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 5872,
											"end": 5904,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6003,
											"end": 6005,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 5988,
											"end": 6006,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 5988,
											"end": 6006,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 5975,
											"end": 6007,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 5975,
											"end": 6007,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6085,
											"end": 6088,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 6070,
											"end": 6089,
											"name": "DUP9",
											"source": 23
										},
										{
											"begin": 6070,
											"end": 6089,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6057,
											"end": 6090,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 6134,
											"end": 6138,
											"name": "PUSH",
											"source": 23,
											"value": "FF"
										},
										{
											"begin": 6121,
											"end": 6139,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6121,
											"end": 6139,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6109,
											"end": 6140,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6109,
											"end": 6140,
											"name": "EQ",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6158,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "414"
										},
										{
											"begin": 6099,
											"end": 6158,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 6154,
											"end": 6155,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6151,
											"end": 6152,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6144,
											"end": 6156,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 6099,
											"end": 6158,
											"name": "tag",
											"source": 23,
											"value": "414"
										},
										{
											"begin": 6099,
											"end": 6158,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP10",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP9",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP7",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 6177,
											"end": 6184,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": 6257,
											"end": 6260,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 6242,
											"end": 6261,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 6242,
											"end": 6261,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6229,
											"end": 6262,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 6229,
											"end": 6262,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6361,
											"end": 6364,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 6346,
											"end": 6365,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6346,
											"end": 6365,
											"name": "SWAP4",
											"source": 23
										},
										{
											"begin": 6346,
											"end": 6365,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6333,
											"end": 6366,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 6333,
											"end": 6366,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 5361,
											"end": 6398,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5361,
											"end": 6398,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "tag",
											"source": 23,
											"value": "109"
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6471,
											"end": 6477,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6479,
											"end": 6485,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6532,
											"end": 6534,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 6520,
											"end": 6529,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 6511,
											"end": 6518,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 6507,
											"end": 6530,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 6503,
											"end": 6535,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 6500,
											"end": 6552,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 6500,
											"end": 6552,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "416"
										},
										{
											"begin": 6500,
											"end": 6552,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 6548,
											"end": 6549,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 6545,
											"end": 6546,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6538,
											"end": 6550,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 6500,
											"end": 6552,
											"name": "tag",
											"source": 23,
											"value": "416"
										},
										{
											"begin": 6500,
											"end": 6552,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6587,
											"end": 6596,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6574,
											"end": 6597,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 6606,
											"end": 6637,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "417"
										},
										{
											"begin": 6631,
											"end": 6636,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6606,
											"end": 6637,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 6606,
											"end": 6637,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6606,
											"end": 6637,
											"name": "tag",
											"source": 23,
											"value": "417"
										},
										{
											"begin": 6606,
											"end": 6637,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6656,
											"end": 6661,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6713,
											"end": 6715,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 6698,
											"end": 6716,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 6698,
											"end": 6716,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 6685,
											"end": 6717,
											"name": "CALLDATALOAD",
											"source": 23
										},
										{
											"begin": 6726,
											"end": 6759,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "418"
										},
										{
											"begin": 6685,
											"end": 6717,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6726,
											"end": 6759,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "368"
										},
										{
											"begin": 6726,
											"end": 6759,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6726,
											"end": 6759,
											"name": "tag",
											"source": 23,
											"value": "418"
										},
										{
											"begin": 6726,
											"end": 6759,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6778,
											"end": 6785,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6768,
											"end": 6785,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6768,
											"end": 6785,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6768,
											"end": 6785,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6403,
											"end": 6791,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 6796,
											"end": 7176,
											"name": "tag",
											"source": 23,
											"value": "117"
										},
										{
											"begin": 6796,
											"end": 7176,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 6875,
											"end": 6876,
											"name": "PUSH",
											"source": 23,
											"value": "1"
										},
										{
											"begin": 6871,
											"end": 6883,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6871,
											"end": 6883,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 6871,
											"end": 6883,
											"name": "SHR",
											"source": 23
										},
										{
											"begin": 6871,
											"end": 6883,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6918,
											"end": 6930,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6918,
											"end": 6930,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6918,
											"end": 6930,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 6939,
											"end": 7000,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "420"
										},
										{
											"begin": 6939,
											"end": 7000,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 6993,
											"end": 6997,
											"name": "PUSH",
											"source": 23,
											"value": "7F"
										},
										{
											"begin": 6985,
											"end": 6991,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 6981,
											"end": 6998,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 6971,
											"end": 6998,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6971,
											"end": 6998,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6939,
											"end": 7000,
											"name": "tag",
											"source": 23,
											"value": "420"
										},
										{
											"begin": 6939,
											"end": 7000,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7046,
											"end": 7048,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 7038,
											"end": 7044,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7035,
											"end": 7049,
											"name": "LT",
											"source": 23
										},
										{
											"begin": 7015,
											"end": 7033,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7012,
											"end": 7050,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 7009,
											"end": 7170,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "421"
										},
										{
											"begin": 7009,
											"end": 7170,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 7092,
											"end": 7102,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B71"
										},
										{
											"begin": 7087,
											"end": 7090,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 7083,
											"end": 7103,
											"name": "SHL",
											"source": 23
										},
										{
											"begin": 7080,
											"end": 7081,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7104,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7127,
											"end": 7131,
											"name": "PUSH",
											"source": 23,
											"value": "22"
										},
										{
											"begin": 7124,
											"end": 7125,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 7117,
											"end": 7132,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7155,
											"end": 7159,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 7152,
											"end": 7153,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7145,
											"end": 7160,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 7009,
											"end": 7170,
											"name": "tag",
											"source": 23,
											"value": "421"
										},
										{
											"begin": 7009,
											"end": 7170,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7009,
											"end": 7170,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6796,
											"end": 7176,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 6796,
											"end": 7176,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 6796,
											"end": 7176,
											"name": "POP",
											"source": 23
										},
										{
											"begin": 6796,
											"end": 7176,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7181,
											"end": 7911,
											"name": "tag",
											"source": 23,
											"value": "153"
										},
										{
											"begin": 7181,
											"end": 7911,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7450,
											"end": 7482,
											"name": "DUP8",
											"source": 23
										},
										{
											"begin": 7450,
											"end": 7482,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7450,
											"end": 7482,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 7432,
											"end": 7483,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7432,
											"end": 7483,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7519,
											"end": 7551,
											"name": "DUP7",
											"source": 23
										},
										{
											"begin": 7519,
											"end": 7551,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 7514,
											"end": 7516,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 7499,
											"end": 7517,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7499,
											"end": 7517,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7492,
											"end": 7552,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7583,
											"end": 7585,
											"name": "PUSH",
											"source": 23,
											"value": "40"
										},
										{
											"begin": 7568,
											"end": 7586,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7568,
											"end": 7586,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7561,
											"end": 7595,
											"name": "DUP6",
											"source": 23
										},
										{
											"begin": 7561,
											"end": 7595,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7561,
											"end": 7595,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7626,
											"end": 7628,
											"name": "PUSH",
											"source": 23,
											"value": "60"
										},
										{
											"begin": 7611,
											"end": 7629,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7611,
											"end": 7629,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7604,
											"end": 7638,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 7604,
											"end": 7638,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7604,
											"end": 7638,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7470,
											"end": 7473,
											"name": "PUSH",
											"source": 23,
											"value": "A0"
										},
										{
											"begin": 7669,
											"end": 7672,
											"name": "PUSH",
											"source": 23,
											"value": "80"
										},
										{
											"begin": 7654,
											"end": 7673,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7654,
											"end": 7673,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7647,
											"end": 7679,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7647,
											"end": 7679,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7647,
											"end": 7679,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7695,
											"end": 7714,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7695,
											"end": 7714,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7688,
											"end": 7723,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 7688,
											"end": 7723,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7688,
											"end": 7723,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7716,
											"end": 7722,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7766,
											"end": 7772,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 7760,
											"end": 7763,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 7745,
											"end": 7764,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 7745,
											"end": 7764,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7732,
											"end": 7781,
											"name": "CALLDATACOPY",
											"source": 23
										},
										{
											"begin": 7831,
											"end": 7832,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 7801,
											"end": 7823,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7801,
											"end": 7823,
											"name": "DUP4",
											"source": 23
										},
										{
											"begin": 7801,
											"end": 7823,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7825,
											"end": 7828,
											"name": "PUSH",
											"source": 23,
											"value": "C0"
										},
										{
											"begin": 7797,
											"end": 7829,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7797,
											"end": 7829,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 7797,
											"end": 7829,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7790,
											"end": 7833,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7790,
											"end": 7833,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7790,
											"end": 7833,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7790,
											"end": 7833,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 7894,
											"end": 7896,
											"name": "PUSH",
											"source": 23,
											"value": "1F"
										},
										{
											"begin": 7873,
											"end": 7888,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": 7873,
											"end": 7888,
											"name": "SWAP3",
											"source": 23
										},
										{
											"begin": 7873,
											"end": 7888,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7869,
											"end": 7898,
											"name": "AND",
											"source": 23
										},
										{
											"begin": 7854,
											"end": 7899,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7850,
											"end": 7905,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 7850,
											"end": 7905,
											"name": "SWAP6",
											"source": 23
										},
										{
											"begin": 7181,
											"end": 7911,
											"name": "SWAP5",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7181,
											"end": 7911,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 7916,
											"end": 8100,
											"name": "tag",
											"source": 23,
											"value": "157"
										},
										{
											"begin": 7916,
											"end": 8100,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 7986,
											"end": 7992,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8039,
											"end": 8041,
											"name": "PUSH",
											"source": 23,
											"value": "20"
										},
										{
											"begin": 8027,
											"end": 8036,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 8018,
											"end": 8025,
											"name": "DUP5",
											"source": 23
										},
										{
											"begin": 8014,
											"end": 8037,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 8010,
											"end": 8042,
											"name": "SLT",
											"source": 23
										},
										{
											"begin": 8007,
											"end": 8059,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 8007,
											"end": 8059,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "424"
										},
										{
											"begin": 8007,
											"end": 8059,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8055,
											"end": 8056,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8052,
											"end": 8053,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 8045,
											"end": 8057,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 8007,
											"end": 8059,
											"name": "tag",
											"source": 23,
											"value": "424"
										},
										{
											"begin": 8007,
											"end": 8059,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8078,
											"end": 8094,
											"name": "MLOAD",
											"source": 23
										},
										{
											"begin": 8078,
											"end": 8094,
											"name": "SWAP2",
											"source": 23
										},
										{
											"begin": 7916,
											"end": 8100,
											"name": "SWAP1",
											"source": 23
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7916,
											"end": 8100,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8105,
											"end": 8232,
											"name": "tag",
											"source": 23,
											"value": "369"
										},
										{
											"begin": 8105,
											"end": 8232,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8166,
											"end": 8176,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B71"
										},
										{
											"begin": 8161,
											"end": 8164,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 8157,
											"end": 8177,
											"name": "SHL",
											"source": 23
										},
										{
											"begin": 8154,
											"end": 8155,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8147,
											"end": 8178,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 8197,
											"end": 8201,
											"name": "PUSH",
											"source": 23,
											"value": "11"
										},
										{
											"begin": 8194,
											"end": 8195,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 8187,
											"end": 8202,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 8221,
											"end": 8225,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 8218,
											"end": 8219,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 8211,
											"end": 8226,
											"name": "REVERT",
											"source": 23
										},
										{
											"begin": 8237,
											"end": 8362,
											"name": "tag",
											"source": 23,
											"value": "164"
										},
										{
											"begin": 8237,
											"end": 8362,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8302,
											"end": 8311,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 8302,
											"end": 8311,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 8302,
											"end": 8311,
											"name": "ADD",
											"source": 23
										},
										{
											"begin": 8323,
											"end": 8333,
											"name": "DUP1",
											"source": 23
										},
										{
											"begin": 8323,
											"end": 8333,
											"name": "DUP3",
											"source": 23
										},
										{
											"begin": 8323,
											"end": 8333,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 8320,
											"end": 8356,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 8320,
											"end": 8356,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "122"
										},
										{
											"begin": 8320,
											"end": 8356,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8336,
											"end": 8354,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "122"
										},
										{
											"begin": 8336,
											"end": 8354,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "369"
										},
										{
											"begin": 8336,
											"end": 8354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 8367,
											"end": 8495,
											"name": "tag",
											"source": 23,
											"value": "177"
										},
										{
											"begin": 8367,
											"end": 8495,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 8434,
											"end": 8443,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8434,
											"end": 8443,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8434,
											"end": 8443,
											"name": "SUB",
											"source": 23
										},
										{
											"begin": 8455,
											"end": 8466,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8455,
											"end": 8466,
											"name": "DUP2",
											"source": 23
										},
										{
											"begin": 8455,
											"end": 8466,
											"name": "GT",
											"source": 23
										},
										{
											"begin": 8452,
											"end": 8489,
											"name": "ISZERO",
											"source": 23
										},
										{
											"begin": 8452,
											"end": 8489,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "122"
										},
										{
											"begin": 8452,
											"end": 8489,
											"name": "JUMPI",
											"source": 23
										},
										{
											"begin": 8469,
											"end": 8487,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "122"
										},
										{
											"begin": 8469,
											"end": 8487,
											"name": "PUSH [tag]",
											"source": 23,
											"value": "369"
										},
										{
											"begin": 8469,
											"end": 8487,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 23
										},
										{
											"begin": 10776,
											"end": 10903,
											"name": "tag",
											"source": 23,
											"value": "335"
										},
										{
											"begin": 10776,
											"end": 10903,
											"name": "JUMPDEST",
											"source": 23
										},
										{
											"begin": 10837,
											"end": 10847,
											"name": "PUSH",
											"source": 23,
											"value": "4E487B71"
										},
										{
											"begin": 10832,
											"end": 10835,
											"name": "PUSH",
											"source": 23,
											"value": "E0"
										},
										{
											"begin": 10828,
											"end": 10848,
											"name": "SHL",
											"source": 23
										},
										{
											"begin": 10825,
											"end": 10826,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10818,
											"end": 10849,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10868,
											"end": 10872,
											"name": "PUSH",
											"source": 23,
											"value": "21"
										},
										{
											"begin": 10865,
											"end": 10866,
											"name": "PUSH",
											"source": 23,
											"value": "4"
										},
										{
											"begin": 10858,
											"end": 10873,
											"name": "MSTORE",
											"source": 23
										},
										{
											"begin": 10892,
											"end": 10896,
											"name": "PUSH",
											"source": 23,
											"value": "24"
										},
										{
											"begin": 10889,
											"end": 10890,
											"name": "PUSH",
											"source": 23,
											"value": "0"
										},
										{
											"begin": 10882,
											"end": 10897,
											"name": "REVERT",
											"source": 23
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/TimeVillage/USDT.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"flashFee(address,uint256)": "d9d98ce4",
							"flashLoan(address,address,uint256,bytes)": "5cffe9de",
							"maxFlashLoan(address)": "613255ab",
							"mint()": "1249c58b",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"}],\"name\":\"ERC3156ExceededMaxLoan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC3156InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ERC3156UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"ERC3156ExceededMaxLoan(uint256)\":[{\"details\":\"The requested loan exceeds the max loan value for `token`.\"}],\"ERC3156InvalidReceiver(address)\":[{\"details\":\"The receiver of a flashloan is not a valid {onFlashLoan} implementer.\"}],\"ERC3156UnsupportedToken(address)\":[{\"details\":\"The loan token is not valid.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"flashFee(address,uint256)\":{\"details\":\"Returns the fee applied when doing flash loans. This function calls the {_flashFee} function which returns the fee applied when doing flash loans.\",\"params\":{\"token\":\"The token to be flash loaned.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"The fees applied to the corresponding flash loan.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Performs a flash loan. New tokens are minted and sent to the `receiver`, who is required to implement the {IERC3156FlashBorrower} interface. By the end of the flash loan, the receiver is expected to own value + fee tokens and have them approved back to the token contract itself so they can be burned.\",\"params\":{\"data\":\"An arbitrary datafield that is passed to the receiver.\",\"receiver\":\"The receiver of the flash loan. Should implement the {IERC3156FlashBorrower-onFlashLoan} interface.\",\"token\":\"The token to be flash loaned. Only `address(this)` is supported.\",\"value\":\"The amount of tokens to be loaned.\"},\"returns\":{\"_0\":\"`true` if the flash loan was successful.\"}},\"maxFlashLoan(address)\":{\"details\":\"Returns the maximum amount of tokens available for loan.\",\"params\":{\"token\":\"The address of the token that is requested.\"},\"returns\":{\"_0\":\"The amount of token that can be loaned. NOTE: This function does not consider any form of supply cap, so in case it's used in a token with a cap like {ERC20Capped}, make sure to override this function to integrate the cap instead of `type(uint256).max`.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeVillage/USDT.sol\":\"MyToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol\":{\"keccak256\":\"0xde94f78563e985acb16868dae5955135207baa103e2a654108b6f043fd8c51c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b6f33918ae1ef9898bf976dbd62771ea10054cc330f8ca262e61ab6d0cdfa25\",\"dweb:/ipfs/QmReBtCQDR8F7pEd2Cwf2XWLtJNxQAKJiY3p7n7UZniwuL\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/TimeVillage/USDT.sol\":{\"keccak256\":\"0x2cafbd302117e366d7d6e66bdee99f13fb722d2c7b94a615655559548d225ed8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53f36e0d04f9920f04cfa95ba118c1a7982c8bf4a5ac4db9d8c0168a579bacdb\",\"dweb:/ipfs/QmPLW3kGAXSu4YjJBkPMa7RYx6SwfNMACPQkr2JXFTArkL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 391,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 397,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 399,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 401,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 403,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 8,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_owner",
								"offset": 0,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 2532,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 2534,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "7",
								"type": "t_string_storage"
							},
							{
								"astId": 1511,
								"contract": "contracts/TimeVillage/USDT.sol:MyToken",
								"label": "_nonces",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1497
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1498,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1497,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1497,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1497
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1479,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
					"exportedSymbols": {
						"IERC3156FlashBorrower": [
							167
						]
					},
					"id": 168,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "120:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC3156FlashBorrower",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "146:123:1",
								"text": " @dev Interface of the ERC3156 FlashBorrower, as defined in\n https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]."
							},
							"fullyImplemented": false,
							"id": 167,
							"linearizedBaseContracts": [
								167
							],
							"name": "IERC3156FlashBorrower",
							"nameLocation": "280:21:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "308:405:1",
										"text": " @dev Receive a flash loan.\n @param initiator The initiator of the loan.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @param fee The additional amount of tokens to repay.\n @param data Arbitrary data structure, intended to contain user-defined parameters.\n @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\""
									},
									"functionSelector": "23e30c8b",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onFlashLoan",
									"nameLocation": "727:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "initiator",
												"nameLocation": "756:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "748:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "748:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "783:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "775:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "775:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "806:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "798:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "798:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "830:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "822:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "858:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "843:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 160,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "843:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "738:130:1"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "887:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 163,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "886:9:1"
									},
									"scope": 167,
									"src": "718:178:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 168,
							"src": "270:628:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "120:779:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
					"exportedSymbols": {
						"IERC3156FlashBorrower": [
							167
						],
						"IERC3156FlashLender": [
							206
						]
					},
					"id": 207,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 169,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
							"file": "./IERC3156FlashBorrower.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 207,
							"sourceUnit": 168,
							"src": "144:66:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 170,
										"name": "IERC3156FlashBorrower",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "152:21:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC3156FlashLender",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "212:121:2",
								"text": " @dev Interface of the ERC3156 FlashLender, as defined in\n https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]."
							},
							"fullyImplemented": false,
							"id": 206,
							"linearizedBaseContracts": [
								206
							],
							"name": "IERC3156FlashLender",
							"nameLocation": "344:19:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "370:168:2",
										"text": " @dev The amount of currency available to be lended.\n @param token The loan currency.\n @return The amount of `token` that can be borrowed."
									},
									"functionSelector": "613255ab",
									"id": 180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxFlashLoan",
									"nameLocation": "552:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "573:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "565:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:15:2"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "603:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:9:2"
									},
									"scope": 206,
									"src": "543:69:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "618:249:2",
										"text": " @dev The fee to be charged for a given loan.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @return The amount of `token` to be charged for the loan, on top of the returned principal."
									},
									"functionSelector": "d9d98ce4",
									"id": 190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flashFee",
									"nameLocation": "881:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "898:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "890:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "913:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "905:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "905:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:31:2"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "944:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "944:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "943:9:2"
									},
									"scope": 206,
									"src": "872:81:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "959:320:2",
										"text": " @dev Initiate a flash loan.\n @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @param data Arbitrary data structure, intended to contain user-defined parameters."
									},
									"functionSelector": "5cffe9de",
									"id": 205,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flashLoan",
									"nameLocation": "1293:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1334:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1312:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
													"typeString": "contract IERC3156FlashBorrower"
												},
												"typeName": {
													"id": 193,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 192,
														"name": "IERC3156FlashBorrower",
														"nameLocations": [
															"1312:21:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1312:21:2"
													},
													"referencedDeclaration": 167,
													"src": "1312:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
														"typeString": "contract IERC3156FlashBorrower"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1360:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1352:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1383:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1375:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1375:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1414:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1399:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 199,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1399:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1302:122:2"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1443:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 202,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1443:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:6:2"
									},
									"scope": 206,
									"src": "1284:165:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 207,
							"src": "334:1117:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "118:1334:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							231
						]
					},
					"id": 232,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 208,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 231,
							"linearizedBaseContracts": [
								231
							],
							"name": "IERC5267",
							"nameLocation": "143:8:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:3",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 211,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:3"
									},
									"src": "247:28:3"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:3",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "510:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 214,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "537:18:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 216,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "569:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 218,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "604:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "633:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "672:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 224,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "698:27:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 226,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 227,
													"nodeType": "ArrayTypeName",
													"src": "698:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:3"
									},
									"scope": 231,
									"src": "426:310:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 232,
							"src": "133:605:3",
							"usedErrors": [],
							"usedEvents": [
								211
							]
						}
					],
					"src": "107:632:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							368
						],
						"IERC20Errors": [
							273
						],
						"IERC721Errors": [
							321
						]
					},
					"id": 369,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 233,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 234,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:4",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 273,
							"linearizedBaseContracts": [
								273
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:4",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 243,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "668:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "685:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:4"
									},
									"src": "621:80:4"
								},
								{
									"documentation": {
										"id": 244,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 248,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "889:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:4"
									},
									"src": "864:41:4"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 253,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "1102:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:4"
									},
									"src": "1075:45:4"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:4",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 262,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "1509:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "1526:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 262,
												"src": "1545:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:4"
									},
									"src": "1476:85:4"
								},
								{
									"documentation": {
										"id": 263,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 267,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 267,
												"src": "1773:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 264,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:4"
									},
									"src": "1746:45:4"
								},
								{
									"documentation": {
										"id": 268,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:4",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 272,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "2023:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:4"
									},
									"src": "1997:43:4"
								}
							],
							"scope": 369,
							"src": "278:1764:4",
							"usedErrors": [
								243,
								248,
								253,
								262,
								267,
								272
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 274,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:4",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 321,
							"linearizedBaseContracts": [
								321
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:4",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 279,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "2465:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:4"
									},
									"src": "2440:40:4"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:4",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 284,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "2652:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:4"
									},
									"src": "2623:46:4"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:4",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 293,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "2996:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "3012:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "3029:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:4"
									},
									"src": "2969:75:4"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 298,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "3233:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:4"
									},
									"src": "3207:42:4"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 303,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 303,
												"src": "3447:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:4"
									},
									"src": "3419:46:4"
								},
								{
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:4",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 310,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "3756:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 308,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "3774:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:4"
									},
									"src": "3723:68:4"
								},
								{
									"documentation": {
										"id": 311,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 315,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "4004:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:4"
									},
									"src": "3976:46:4"
								},
								{
									"documentation": {
										"id": 316,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:4",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 320,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "4258:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:4"
									},
									"src": "4230:46:4"
								}
							],
							"scope": 369,
							"src": "2186:2092:4",
							"usedErrors": [
								279,
								284,
								293,
								298,
								303,
								310,
								315,
								320
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 322,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:4",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 368,
							"linearizedBaseContracts": [
								368
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 323,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:4",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 333,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4854:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4870:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4887:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4903:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 330,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:4"
									},
									"src": "4821:99:4"
								},
								{
									"documentation": {
										"id": 334,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 338,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "5110:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:4"
									},
									"src": "5083:43:4"
								},
								{
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 343,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "5325:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 340,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:4"
									},
									"src": "5296:47:4"
								},
								{
									"documentation": {
										"id": 344,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:4",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 350,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "5645:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "5663:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:4"
									},
									"src": "5610:68:4"
								},
								{
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 355,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "5892:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:4"
									},
									"src": "5863:47:4"
								},
								{
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:4",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 360,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "6147:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:4"
									},
									"src": "6118:47:4"
								},
								{
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:4",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 367,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "6488:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "6507:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:4"
									},
									"src": "6456:73:4"
								}
							],
							"scope": 369,
							"src": "4424:2107:4",
							"usedErrors": [
								333,
								338,
								343,
								350,
								355,
								360,
								367
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1497
						],
						"ERC20": [
							883
						],
						"IERC20": [
							961
						],
						"IERC20Errors": [
							273
						],
						"IERC20Metadata": [
							1431
						]
					},
					"id": 884,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 370,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 372,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 962,
							"src": "131:36:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 371,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 961,
										"src": "139:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 374,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 1432,
							"src": "168:63:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 373,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1431,
										"src": "176:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 376,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 1498,
							"src": "232:48:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 375,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1497,
										"src": "240:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 378,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 884,
							"sourceUnit": 369,
							"src": "281:65:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 377,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 273,
										"src": "289:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 380,
										"name": "Context",
										"nameLocations": [
											"1428:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1497,
										"src": "1428:7:5"
									},
									"id": 381,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:5"
								},
								{
									"baseName": {
										"id": 382,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 961,
										"src": "1437:6:5"
									},
									"id": 383,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:5"
								},
								{
									"baseName": {
										"id": 384,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1431,
										"src": "1445:14:5"
									},
									"id": 385,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:5"
								},
								{
									"baseName": {
										"id": 386,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 273,
										"src": "1461:12:5"
									},
									"id": 387,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:5"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 379,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:5",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 883,
							"linearizedBaseContracts": [
								883,
								273,
								1431,
								961,
								1497
							],
							"name": "ERC20",
							"nameLocation": "1419:5:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 391,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:5",
									"nodeType": "VariableDeclaration",
									"scope": 883,
									"src": "1480:53:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 390,
										"keyName": "account",
										"keyNameLocation": "1496:7:5",
										"keyType": {
											"id": 388,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 389,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 397,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:5",
									"nodeType": "VariableDeclaration",
									"scope": 883,
									"src": "1540:83:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 396,
										"keyName": "account",
										"keyNameLocation": "1556:7:5",
										"keyType": {
											"id": 392,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 395,
											"keyName": "spender",
											"keyNameLocation": "1583:7:5",
											"keyType": {
												"id": 393,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:5",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 394,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 399,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 883,
									"src": "1630:28:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 398,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 401,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 883,
									"src": "1665:20:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 400,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 403,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 883,
									"src": "1691:22:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 402,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 419,
										"nodeType": "Block",
										"src": "1952:57:5",
										"statements": [
											{
												"expression": {
													"id": 413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 411,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 401,
														"src": "1962:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 412,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "1970:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 414,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:5"
											},
											{
												"expression": {
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 415,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "1985:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 416,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 408,
														"src": "1995:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:5"
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:5",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 420,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "1908:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 405,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "1929:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 407,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:5"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:5"
									},
									"scope": 883,
									"src": "1896:113:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1418
									],
									"body": {
										"id": 428,
										"nodeType": "Block",
										"src": "2134:29:5",
										"statements": [
											{
												"expression": {
													"id": 426,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 401,
													"src": "2151:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 425,
												"id": 427,
												"nodeType": "Return",
												"src": "2144:12:5"
											}
										]
									},
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 429,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:5"
									},
									"returnParameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 429,
												"src": "2119:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 423,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:5"
									},
									"scope": 883,
									"src": "2074:89:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1424
									],
									"body": {
										"id": 437,
										"nodeType": "Block",
										"src": "2338:31:5",
										"statements": [
											{
												"expression": {
													"id": 435,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 403,
													"src": "2355:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 434,
												"id": 436,
												"nodeType": "Return",
												"src": "2348:14:5"
											}
										]
									},
									"documentation": {
										"id": 430,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:5",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:5"
									},
									"returnParameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "2323:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 432,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:5"
									},
									"scope": 883,
									"src": "2276:93:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1430
									],
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "3058:26:5",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 444,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 443,
												"id": 445,
												"nodeType": "Return",
												"src": "3068:9:5"
											}
										]
									},
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:5",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:5"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "3051:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 441,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:5"
									},
									"scope": 883,
									"src": "3002:82:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										910
									],
									"body": {
										"id": 455,
										"nodeType": "Block",
										"src": "3205:36:5",
										"statements": [
											{
												"expression": {
													"id": 453,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 399,
													"src": "3222:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 452,
												"id": 454,
												"nodeType": "Return",
												"src": "3215:19:5"
											}
										]
									},
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:5",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:5"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "3196:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 450,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:5"
									},
									"scope": 883,
									"src": "3144:97:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										918
									],
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "3373:42:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 464,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "3390:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 466,
													"indexExpression": {
														"id": 465,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "3400:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 463,
												"id": 467,
												"nodeType": "Return",
												"src": "3383:25:5"
											}
										]
									},
									"documentation": {
										"id": 457,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:5",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3318:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:5"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "3364:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:5"
									},
									"scope": 883,
									"src": "3299:116:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										928
									],
									"body": {
										"id": 492,
										"nodeType": "Block",
										"src": "3685:103:5",
										"statements": [
											{
												"assignments": [
													480
												],
												"declarations": [
													{
														"constant": false,
														"id": 480,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 492,
														"src": "3695:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 479,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 483,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 481,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "3711:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 485,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "3743:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 486,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "3750:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "3754:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 484,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "3733:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 478,
												"id": 491,
												"nodeType": "Return",
												"src": "3770:11:5"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:5",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 493,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3628:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3640:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:5"
									},
									"returnParameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 493,
												"src": "3679:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 476,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:5"
									},
									"scope": 883,
									"src": "3610:178:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										938
									],
									"body": {
										"id": 509,
										"nodeType": "Block",
										"src": "3935:51:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 503,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 397,
															"src": "3952:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 505,
														"indexExpression": {
															"id": 504,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "3964:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 507,
													"indexExpression": {
														"id": 506,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 498,
														"src": "3971:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 502,
												"id": 508,
												"nodeType": "Return",
												"src": "3945:34:5"
											}
										]
									},
									"documentation": {
										"id": 494,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:5",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 510,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "3865:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "3880:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 497,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:5"
									},
									"returnParameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "3926:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 500,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:5"
									},
									"scope": 883,
									"src": "3846:140:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										948
									],
									"body": {
										"id": 533,
										"nodeType": "Block",
										"src": "4372:107:5",
										"statements": [
											{
												"assignments": [
													521
												],
												"declarations": [
													{
														"constant": false,
														"id": 521,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 533,
														"src": "4382:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 520,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 524,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 522,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "4398:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 526,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 521,
															"src": "4429:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 527,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "4436:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 528,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 515,
															"src": "4445:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 525,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															774,
															834
														],
														"referencedDeclaration": 774,
														"src": "4420:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 530,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 531,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 519,
												"id": 532,
												"nodeType": "Return",
												"src": "4461:11:5"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:5",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "4310:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "4327:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:5"
									},
									"returnParameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "4366:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 517,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:5"
									},
									"scope": 883,
									"src": "4293:186:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										960
									],
									"body": {
										"id": 565,
										"nodeType": "Block",
										"src": "5132:151:5",
										"statements": [
											{
												"assignments": [
													547
												],
												"declarations": [
													{
														"constant": false,
														"id": 547,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 565,
														"src": "5142:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 546,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 550,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 548,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1479,
														"src": "5160:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 552,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 537,
															"src": "5198:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 553,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "5204:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 554,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "5213:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 551,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 882,
														"src": "5182:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 556,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 558,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 537,
															"src": "5239:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 559,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "5245:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 560,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "5249:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 557,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "5229:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 562,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 545,
												"id": 564,
												"nodeType": "Return",
												"src": "5265:11:5"
											}
										]
									},
									"documentation": {
										"id": 535,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:5",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 537,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "5061:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "5075:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 538,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 541,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "5087:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:5"
									},
									"returnParameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "5126:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 543,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:5"
									},
									"scope": 883,
									"src": "5039:244:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "5725:231:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 576,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 569,
														"src": "5739:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 579,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 578,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 577,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 580,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 590,
												"nodeType": "IfStatement",
												"src": "5735:86:5",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "5759:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 585,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 584,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 583,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 582,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 248,
																	"src": "5780:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 588,
															"nodeType": "RevertStatement",
															"src": "5773:37:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 591,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 571,
														"src": "5834:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 594,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 592,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 595,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 605,
												"nodeType": "IfStatement",
												"src": "5830:86:5",
												"trueBody": {
													"id": 604,
													"nodeType": "Block",
													"src": "5852:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 600,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 599,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 598,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 601,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 597,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 253,
																	"src": "5873:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 603,
															"nodeType": "RevertStatement",
															"src": "5866:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 607,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 569,
															"src": "5933:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 608,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 571,
															"src": "5939:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 609,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "5943:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 606,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "5925:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:5"
											}
										]
									},
									"documentation": {
										"id": 567,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "5675:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 571,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "5689:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 570,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "5701:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 572,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:5"
									},
									"returnParameters": {
										"id": 575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:5"
									},
									"scope": 883,
									"src": "5656:300:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "6346:1032:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 623,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "6360:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 625,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 624,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 627,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "6534:362:5",
													"statements": [
														{
															"assignments": [
																635
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 635,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 660,
																	"src": "6548:19:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 634,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 639,
															"initialValue": {
																"baseExpression": {
																	"id": 636,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 391,
																	"src": "6570:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 638,
																"indexExpression": {
																	"id": 637,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 616,
																	"src": "6580:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 640,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 635,
																	"src": "6603:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 641,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "6617:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 650,
															"nodeType": "IfStatement",
															"src": "6599:115:5",
															"trueBody": {
																"id": 649,
																"nodeType": "Block",
																"src": "6624:90:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 644,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 616,
																					"src": "6674:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 645,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 635,
																					"src": "6680:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 646,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 620,
																					"src": "6693:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 643,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 243,
																				"src": "6649:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 648,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:5"
																	}
																]
															}
														},
														{
															"id": 659,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:5",
															"statements": [
																{
																	"expression": {
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 651,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 391,
																				"src": "6834:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 653,
																			"indexExpression": {
																				"id": 652,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 616,
																				"src": "6844:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 656,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 654,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 635,
																				"src": "6852:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 655,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 620,
																				"src": "6866:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 658,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:5"
																}
															]
														}
													]
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "6356:540:5",
												"trueBody": {
													"id": 633,
													"nodeType": "Block",
													"src": "6380:148:5",
													"statements": [
														{
															"expression": {
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 629,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 399,
																	"src": "6496:12:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 630,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 620,
																	"src": "6512:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 632,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 662,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "6910:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 663,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 666,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 681,
													"nodeType": "Block",
													"src": "7125:206:5",
													"statements": [
														{
															"id": 680,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:5",
															"statements": [
																{
																	"expression": {
																		"id": 678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 674,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 391,
																				"src": "7284:9:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 676,
																			"indexExpression": {
																				"id": 675,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 618,
																				"src": "7294:2:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 677,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "7301:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 679,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:5"
																}
															]
														}
													]
												},
												"id": 682,
												"nodeType": "IfStatement",
												"src": "6906:425:5",
												"trueBody": {
													"id": 673,
													"nodeType": "Block",
													"src": "6928:191:5",
													"statements": [
														{
															"id": 672,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:5",
															"statements": [
																{
																	"expression": {
																		"id": 670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 668,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 399,
																			"src": "7073:12:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 669,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "7089:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 671,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:5"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 684,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "7355:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "7361:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 686,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 620,
															"src": "7365:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 683,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 895,
														"src": "7346:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "EmitStatement",
												"src": "7341:30:5"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:5",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "6288:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "6302:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "6314:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 619,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:5"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:5"
									},
									"scope": 883,
									"src": "6271:1107:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 722,
										"nodeType": "Block",
										"src": "7777:152:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 698,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "7791:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 701,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 699,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 702,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 712,
												"nodeType": "IfStatement",
												"src": "7787:91:5",
												"trueBody": {
													"id": 711,
													"nodeType": "Block",
													"src": "7814:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 707,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 706,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 705,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 704,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 253,
																	"src": "7835:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 709,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 710,
															"nodeType": "RevertStatement",
															"src": "7828:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 715,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 714,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 717,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 718,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "7907:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 719,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "7916:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 713,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "7887:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 720,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 721,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:5"
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:5",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "7736:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 723,
												"src": "7753:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:5"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:5"
									},
									"scope": 883,
									"src": "7721:208:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "8303:150:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 731,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 726,
														"src": "8317:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 732,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 735,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 745,
												"nodeType": "IfStatement",
												"src": "8313:89:5",
												"trueBody": {
													"id": 744,
													"nodeType": "Block",
													"src": "8340:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 740,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 739,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 738,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 737,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 248,
																	"src": "8361:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 742,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 743,
															"nodeType": "RevertStatement",
															"src": "8354:37:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 747,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 726,
															"src": "8419:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 750,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 749,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 748,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 752,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "8440:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 746,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 690,
														"src": "8411:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 754,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:5"
											}
										]
									},
									"documentation": {
										"id": 724,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:5",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "8262:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "8279:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 727,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:5"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:5"
									},
									"scope": 883,
									"src": "8247:206:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 773,
										"nodeType": "Block",
										"src": "9063:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 767,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "9082:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 768,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "9089:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 769,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 763,
															"src": "9098:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 766,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															774,
															834
														],
														"referencedDeclaration": 834,
														"src": "9073:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 772,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:5"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:5",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "9007:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "9022:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "9039:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:5"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:5"
									},
									"scope": 883,
									"src": "8989:128:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 833,
										"nodeType": "Block",
										"src": "10047:334:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 786,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 777,
														"src": "10061:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 789,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 787,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 790,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "IfStatement",
												"src": "10057:89:5",
												"trueBody": {
													"id": 799,
													"nodeType": "Block",
													"src": "10082:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 795,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 793,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 792,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "10103:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 797,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 798,
															"nodeType": "RevertStatement",
															"src": "10096:39:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 801,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 779,
														"src": "10159:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 804,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 803,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 802,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 805,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 815,
												"nodeType": "IfStatement",
												"src": "10155:90:5",
												"trueBody": {
													"id": 814,
													"nodeType": "Block",
													"src": "10182:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 810,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 809,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 808,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 807,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 272,
																	"src": "10203:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 812,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 813,
															"nodeType": "RevertStatement",
															"src": "10196:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 816,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 397,
																"src": "10254:11:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 819,
															"indexExpression": {
																"id": 817,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "10266:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 820,
														"indexExpression": {
															"id": 818,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 779,
															"src": "10273:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 821,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 781,
														"src": "10284:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 823,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:5"
											},
											{
												"condition": {
													"id": 824,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 783,
													"src": "10303:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 832,
												"nodeType": "IfStatement",
												"src": "10299:76:5",
												"trueBody": {
													"id": 831,
													"nodeType": "Block",
													"src": "10314:61:5",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 826,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 777,
																		"src": "10342:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 827,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 779,
																		"src": "10349:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 828,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "10358:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 825,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 904,
																	"src": "10333:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 829,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 830,
															"nodeType": "EmitStatement",
															"src": "10328:36:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:5",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "9967:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 776,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "9982:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "9999:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "10014:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 782,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:5"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:5"
									},
									"scope": 883,
									"src": "9949:432:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 881,
										"nodeType": "Block",
										"src": "10752:388:5",
										"statements": [
											{
												"assignments": [
													845
												],
												"declarations": [
													{
														"constant": false,
														"id": 845,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:5",
														"nodeType": "VariableDeclaration",
														"scope": 881,
														"src": "10762:24:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 844,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 850,
												"initialValue": {
													"arguments": [
														{
															"id": 847,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 837,
															"src": "10799:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 848,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "10806:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 846,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 510,
														"src": "10789:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 857,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 851,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 845,
														"src": "10828:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 854,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 853,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:5",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 852,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 855,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 856,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:5",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 880,
												"nodeType": "IfStatement",
												"src": "10824:310:5",
												"trueBody": {
													"id": 879,
													"nodeType": "Block",
													"src": "10867:267:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 860,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 858,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "10885:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 859,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 841,
																	"src": "10904:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 868,
															"nodeType": "IfStatement",
															"src": "10881:130:5",
															"trueBody": {
																"id": 867,
																"nodeType": "Block",
																"src": "10911:100:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 862,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 839,
																					"src": "10963:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 863,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 845,
																					"src": "10972:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 864,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 841,
																					"src": "10990:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 861,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 262,
																				"src": "10936:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 865,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 866,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:5"
																	}
																]
															}
														},
														{
															"id": 878,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:5",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 870,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 837,
																				"src": "11061:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 871,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 839,
																				"src": "11068:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 874,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 872,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 845,
																					"src": "11077:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 873,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 841,
																					"src": "11096:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 875,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 869,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				774,
																				834
																			],
																			"referencedDeclaration": 834,
																			"src": "11052:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 876,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 877,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:5",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 882,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "10688:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "10703:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 882,
												"src": "10720:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 840,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:5"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:5"
									},
									"scope": 883,
									"src": "10663:477:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 884,
							"src": "1401:9741:5",
							"usedErrors": [
								243,
								248,
								253,
								262,
								267,
								272
							],
							"usedEvents": [
								895,
								904
							]
						}
					],
					"src": "105:11038:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							961
						]
					},
					"id": 962,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 885,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 886,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:6",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 961,
							"linearizedBaseContracts": [
								961
							],
							"name": "IERC20",
							"nameLocation": "213:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:6",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 895,
									"name": "Transfer",
									"nameLocation": "395:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "404:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "426:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 890,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 893,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 895,
												"src": "446:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 892,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:6"
									},
									"src": "389:72:6"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 896,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:6",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 904,
									"name": "Approval",
									"nameLocation": "626:8:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 898,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 904,
												"src": "635:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 904,
												"src": "658:23:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 904,
												"src": "683:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:6"
									},
									"src": "620:78:6"
								},
								{
									"documentation": {
										"id": 905,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:6",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 910,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:6"
									},
									"returnParameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "820:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:6"
									},
									"scope": 961,
									"src": "774:55:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 911,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:6",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 918,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "930:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 912,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:6"
									},
									"returnParameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "970:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:6"
									},
									"scope": 961,
									"src": "911:68:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 919,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:6",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 928,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1221:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1233:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:6"
									},
									"returnParameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 928,
												"src": "1266:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 925,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:6"
									},
									"scope": 961,
									"src": "1203:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:6",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 938,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1566:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 930,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1581:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:6"
									},
									"returnParameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "1621:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 935,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:6"
									},
									"scope": 961,
									"src": "1547:83:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:6",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 948,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "2325:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "2342:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 942,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:6"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "2375:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 945,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:6"
									},
									"scope": 961,
									"src": "2308:73:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 949,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:6",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 960,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "2711:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "2725:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 952,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "2737:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:6"
									},
									"returnParameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 960,
												"src": "2770:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 957,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:6"
									},
									"scope": 961,
									"src": "2689:87:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 962,
							"src": "203:2575:6",
							"usedErrors": [],
							"usedEvents": [
								895,
								904
							]
						}
					],
					"src": "106:2673:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1497
						],
						"ERC20": [
							883
						],
						"ERC20Burnable": [
							1007
						]
					},
					"id": 1008,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 963,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 965,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1008,
							"sourceUnit": 884,
							"src": "150:35:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 964,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 883,
										"src": "158:5:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 967,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1008,
							"sourceUnit": 1498,
							"src": "186:51:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 966,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1497,
										"src": "194:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 969,
										"name": "Context",
										"nameLocations": [
											"483:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1497,
										"src": "483:7:7"
									},
									"id": 970,
									"nodeType": "InheritanceSpecifier",
									"src": "483:7:7"
								},
								{
									"baseName": {
										"id": 971,
										"name": "ERC20",
										"nameLocations": [
											"492:5:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "492:5:7"
									},
									"id": 972,
									"nodeType": "InheritanceSpecifier",
									"src": "492:5:7"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 968,
								"nodeType": "StructuredDocumentation",
								"src": "239:208:7",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 1007,
							"linearizedBaseContracts": [
								1007,
								883,
								273,
								1431,
								961,
								1497
							],
							"name": "ERC20Burnable",
							"nameLocation": "466:13:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 984,
										"nodeType": "Block",
										"src": "662:43:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 979,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "678:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "678:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 981,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 975,
															"src": "692:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 978,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "672:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "672:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 983,
												"nodeType": "ExpressionStatement",
												"src": "672:26:7"
											}
										]
									},
									"documentation": {
										"id": 973,
										"nodeType": "StructuredDocumentation",
										"src": "504:109:7",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "627:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "640:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "632:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:15:7"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "662:0:7"
									},
									"scope": 1007,
									"src": "618:87:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1005,
										"nodeType": "Block",
										"src": "1086:93:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 994,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "1112:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 995,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1479,
																"src": "1121:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1121:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 997,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 990,
															"src": "1135:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 993,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 882,
														"src": "1096:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1096:45:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 999,
												"nodeType": "ExpressionStatement",
												"src": "1096:45:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1001,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "1157:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1002,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 990,
															"src": "1166:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1000,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "1151:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1151:21:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1004,
												"nodeType": "ExpressionStatement",
												"src": "1151:21:7"
											}
										]
									},
									"documentation": {
										"id": 986,
										"nodeType": "StructuredDocumentation",
										"src": "711:305:7",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 1006,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1030:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1047:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1039:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1064:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "1056:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:7"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1086:0:7"
									},
									"scope": 1007,
									"src": "1021:158:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1008,
							"src": "448:733:7",
							"usedErrors": [
								243,
								248,
								253,
								262,
								267,
								272
							],
							"usedEvents": [
								895,
								904
							]
						}
					],
					"src": "124:1058:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
					"exportedSymbols": {
						"ERC20": [
							883
						],
						"ERC20FlashMint": [
							1251
						],
						"IERC3156FlashBorrower": [
							167
						],
						"IERC3156FlashLender": [
							206
						]
					},
					"id": 1252,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1009,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
							"file": "../../../interfaces/IERC3156FlashBorrower.sol",
							"id": 1011,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1252,
							"sourceUnit": 168,
							"src": "151:84:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1010,
										"name": "IERC3156FlashBorrower",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "159:21:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
							"file": "../../../interfaces/IERC3156FlashLender.sol",
							"id": 1013,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1252,
							"sourceUnit": 207,
							"src": "236:80:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1012,
										"name": "IERC3156FlashLender",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 206,
										"src": "244:19:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1015,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1252,
							"sourceUnit": 884,
							"src": "317:35:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1014,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 883,
										"src": "325:5:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1017,
										"name": "ERC20",
										"nameLocations": [
											"965:5:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "965:5:8"
									},
									"id": 1018,
									"nodeType": "InheritanceSpecifier",
									"src": "965:5:8"
								},
								{
									"baseName": {
										"id": 1019,
										"name": "IERC3156FlashLender",
										"nameLocations": [
											"972:19:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 206,
										"src": "972:19:8"
									},
									"id": 1020,
									"nodeType": "InheritanceSpecifier",
									"src": "972:19:8"
								}
							],
							"canonicalName": "ERC20FlashMint",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1016,
								"nodeType": "StructuredDocumentation",
								"src": "354:574:8",
								"text": " @dev Implementation of the ERC3156 Flash loans extension, as defined in\n https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n Adds the {flashLoan} method, which provides flash loan support at the token\n level. By default there is no fee, but this can be changed by overriding {flashFee}.\n NOTE: When this extension is used along with the {ERC20Capped} or {ERC20Votes} extensions,\n {maxFlashLoan} will not correctly reflect the maximum that can be flash minted. We recommend\n overriding {maxFlashLoan} so that it correctly reflects the supply cap."
							},
							"fullyImplemented": true,
							"id": 1251,
							"linearizedBaseContracts": [
								1251,
								206,
								883,
								273,
								1431,
								961,
								1497
							],
							"name": "ERC20FlashMint",
							"nameLocation": "947:14:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1025,
									"mutability": "constant",
									"name": "RETURN_VALUE",
									"nameLocation": "1023:12:8",
									"nodeType": "VariableDeclaration",
									"scope": 1251,
									"src": "998:85:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1021,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "998:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "45524333313536466c617368426f72726f7765722e6f6e466c6173684c6f616e",
												"id": 1023,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1048:34:8",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9",
													"typeString": "literal_string \"ERC3156FlashBorrower.onFlashLoan\""
												},
												"value": "ERC3156FlashBorrower.onFlashLoan"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9",
													"typeString": "literal_string \"ERC3156FlashBorrower.onFlashLoan\""
												}
											],
											"id": 1022,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1038:9:8",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1024,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1038:45:8",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "1090:52:8",
										"text": " @dev The loan token is not valid."
									},
									"errorSelector": "b5a7db92",
									"id": 1030,
									"name": "ERC3156UnsupportedToken",
									"nameLocation": "1153:23:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1185:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "1177:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1177:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1176:15:8"
									},
									"src": "1147:45:8"
								},
								{
									"documentation": {
										"id": 1031,
										"nodeType": "StructuredDocumentation",
										"src": "1198:82:8",
										"text": " @dev The requested loan exceeds the max loan value for `token`."
									},
									"errorSelector": "fd9a7609",
									"id": 1035,
									"name": "ERC3156ExceededMaxLoan",
									"nameLocation": "1291:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "maxLoan",
												"nameLocation": "1322:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "1314:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1314:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1313:17:8"
									},
									"src": "1285:46:8"
								},
								{
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "1337:93:8",
										"text": " @dev The receiver of a flashloan is not a valid {onFlashLoan} implementer."
									},
									"errorSelector": "678c5b00",
									"id": 1040,
									"name": "ERC3156InvalidReceiver",
									"nameLocation": "1441:22:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1472:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "1464:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1464:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1463:18:8"
									},
									"src": "1435:47:8"
								},
								{
									"baseFunctions": [
										180
									],
									"body": {
										"id": 1065,
										"nodeType": "Block",
										"src": "2009:86:8",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1053,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1048,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1043,
															"src": "2026:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"id": 1051,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2043:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																		"typeString": "contract ERC20FlashMint"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																		"typeString": "contract ERC20FlashMint"
																	}
																],
																"id": 1050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2035:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1049,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2035:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2035:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2026:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "30",
														"id": 1062,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2087:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2026:62:8",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2056:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1055,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "2056:7:8",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	],
																	"id": 1054,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "2051:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1057,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2051:13:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint256",
																	"typeString": "type(uint256)"
																}
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "2065:3:8",
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "2051:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1059,
																"name": "totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 456,
																"src": "2071:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																	"typeString": "function () view returns (uint256)"
																}
															},
															"id": 1060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2071:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2051:33:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1047,
												"id": 1064,
												"nodeType": "Return",
												"src": "2019:69:8"
											}
										]
									},
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "1488:441:8",
										"text": " @dev Returns the maximum amount of tokens available for loan.\n @param token The address of the token that is requested.\n @return The amount of token that can be loaned.\n NOTE: This function does not consider any form of supply cap, so in case\n it's used in a token with a cap like {ERC20Capped}, make sure to override this\n function to integrate the cap instead of `type(uint256).max`."
									},
									"functionSelector": "613255ab",
									"id": 1066,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxFlashLoan",
									"nameLocation": "1943:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1964:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1066,
												"src": "1956:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1955:15:8"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1066,
												"src": "2000:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1045,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2000:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:9:8"
									},
									"scope": 1251,
									"src": "1934:161:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										190
									],
									"body": {
										"id": 1093,
										"nodeType": "Block",
										"src": "2546:146:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1076,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "2560:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"id": 1079,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "2577:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																	"typeString": "contract ERC20FlashMint"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																	"typeString": "contract ERC20FlashMint"
																}
															],
															"id": 1078,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2569:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1077,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2569:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 1080,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2569:13:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2560:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1087,
												"nodeType": "IfStatement",
												"src": "2556:90:8",
												"trueBody": {
													"id": 1086,
													"nodeType": "Block",
													"src": "2584:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1083,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "2629:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1082,
																	"name": "ERC3156UnsupportedToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1030,
																	"src": "2605:23:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1084,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2605:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1085,
															"nodeType": "RevertStatement",
															"src": "2598:37:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1089,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "2672:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1090,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1071,
															"src": "2679:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1088,
														"name": "_flashFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1111,
														"src": "2662:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) view returns (uint256)"
														}
													},
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2662:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1075,
												"id": 1092,
												"nodeType": "Return",
												"src": "2655:30:8"
											}
										]
									},
									"documentation": {
										"id": 1067,
										"nodeType": "StructuredDocumentation",
										"src": "2101:354:8",
										"text": " @dev Returns the fee applied when doing flash loans. This function calls\n the {_flashFee} function which returns the fee applied when doing flash\n loans.\n @param token The token to be flash loaned.\n @param value The amount of tokens to be loaned.\n @return The fees applied to the corresponding flash loan."
									},
									"functionSelector": "d9d98ce4",
									"id": 1094,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "flashFee",
									"nameLocation": "2469:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2486:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1094,
												"src": "2478:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1068,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2478:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2501:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1094,
												"src": "2493:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2493:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2477:30:8"
									},
									"returnParameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1094,
												"src": "2537:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2537:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2536:9:8"
									},
									"scope": 1251,
									"src": "2460:232:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1110,
										"nodeType": "Block",
										"src": "3169:138:8",
										"statements": [
											{
												"expression": {
													"id": 1104,
													"name": "token",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1097,
													"src": "3262:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1105,
												"nodeType": "ExpressionStatement",
												"src": "3262:5:8"
											},
											{
												"expression": {
													"id": 1106,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1099,
													"src": "3277:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1107,
												"nodeType": "ExpressionStatement",
												"src": "3277:5:8"
											},
											{
												"expression": {
													"hexValue": "30",
													"id": 1108,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3299:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1103,
												"id": 1109,
												"nodeType": "Return",
												"src": "3292:8:8"
											}
										]
									},
									"documentation": {
										"id": 1095,
										"nodeType": "StructuredDocumentation",
										"src": "2698:377:8",
										"text": " @dev Returns the fee applied when doing flash loans. By default this\n implementation has 0 fees. This function can be overloaded to make\n the flash loan mechanism deflationary.\n @param token The token to be flash loaned.\n @param value The amount of tokens to be loaned.\n @return The fees applied to the corresponding flash loan."
									},
									"id": 1111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_flashFee",
									"nameLocation": "3089:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3107:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "3099:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1096,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3122:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "3114:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3114:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3098:30:8"
									},
									"returnParameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "3160:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3160:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3159:9:8"
									},
									"scope": 1251,
									"src": "3080:227:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1122,
										"nodeType": "Block",
										"src": "3695:34:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1119,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3720:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 1118,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "3712:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1117,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3712:7:8",
															"typeDescriptions": {}
														}
													},
													"id": 1120,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3712:10:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1116,
												"id": 1121,
												"nodeType": "Return",
												"src": "3705:17:8"
											}
										]
									},
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "3313:308:8",
										"text": " @dev Returns the receiver address of the flash fee. By default this\n implementation returns the address(0) which means the fee amount will be burnt.\n This function can be overloaded to change the fee receiver.\n @return The address for which the flash fee will be sent to."
									},
									"id": 1123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_flashFeeReceiver",
									"nameLocation": "3635:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3652:2:8"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "3686:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3686:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3685:9:8"
									},
									"scope": 1251,
									"src": "3626:103:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										205
									],
									"body": {
										"id": 1249,
										"nodeType": "Block",
										"src": "4954:792:8",
										"statements": [
											{
												"assignments": [
													1139
												],
												"declarations": [
													{
														"constant": false,
														"id": 1139,
														"mutability": "mutable",
														"name": "maxLoan",
														"nameLocation": "4972:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1249,
														"src": "4964:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1138,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4964:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1143,
												"initialValue": {
													"arguments": [
														{
															"id": 1141,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "4995:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1140,
														"name": "maxFlashLoan",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1066,
														"src": "4982:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4982:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4964:37:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1144,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1131,
														"src": "5015:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1145,
														"name": "maxLoan",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "5023:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5015:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1152,
												"nodeType": "IfStatement",
												"src": "5011:84:8",
												"trueBody": {
													"id": 1151,
													"nodeType": "Block",
													"src": "5032:63:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1148,
																		"name": "maxLoan",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1139,
																		"src": "5076:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1147,
																	"name": "ERC3156ExceededMaxLoan",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1035,
																	"src": "5053:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5053:31:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1150,
															"nodeType": "RevertStatement",
															"src": "5046:38:8"
														}
													]
												}
											},
											{
												"assignments": [
													1154
												],
												"declarations": [
													{
														"constant": false,
														"id": 1154,
														"mutability": "mutable",
														"name": "fee",
														"nameLocation": "5112:3:8",
														"nodeType": "VariableDeclaration",
														"scope": 1249,
														"src": "5104:11:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1153,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5104:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1159,
												"initialValue": {
													"arguments": [
														{
															"id": 1156,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1129,
															"src": "5127:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1157,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "5134:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1155,
														"name": "flashFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1094,
														"src": "5118:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) view returns (uint256)"
														}
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5118:22:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5104:36:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1163,
																	"name": "receiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1127,
																	"src": "5164:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																],
																"id": 1162,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5156:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1161,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5156:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5156:17:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1165,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "5175:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1160,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "5150:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5150:31:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1167,
												"nodeType": "ExpressionStatement",
												"src": "5150:31:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1178,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1170,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1479,
																	"src": "5216:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 1171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5216:12:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1172,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1129,
																"src": "5230:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1173,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1131,
																"src": "5237:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1174,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1154,
																"src": "5244:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1175,
																"name": "data",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1133,
																"src": "5249:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															],
															"expression": {
																"id": 1168,
																"name": "receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1127,
																"src": "5195:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																	"typeString": "contract IERC3156FlashBorrower"
																}
															},
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5204:11:8",
															"memberName": "onFlashLoan",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 166,
															"src": "5195:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (address,address,uint256,uint256,bytes memory) external returns (bytes32)"
															}
														},
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5195:59:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1177,
														"name": "RETURN_VALUE",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1025,
														"src": "5258:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5195:75:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1187,
												"nodeType": "IfStatement",
												"src": "5191:154:8",
												"trueBody": {
													"id": 1186,
													"nodeType": "Block",
													"src": "5272:73:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1182,
																				"name": "receiver",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1127,
																				"src": "5324:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			],
																			"id": 1181,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5316:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1180,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5316:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5316:17:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1179,
																	"name": "ERC3156InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1040,
																	"src": "5293:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1184,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5293:41:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1185,
															"nodeType": "RevertStatement",
															"src": "5286:48:8"
														}
													]
												}
											},
											{
												"assignments": [
													1189
												],
												"declarations": [
													{
														"constant": false,
														"id": 1189,
														"mutability": "mutable",
														"name": "flashFeeReceiver",
														"nameLocation": "5362:16:8",
														"nodeType": "VariableDeclaration",
														"scope": 1249,
														"src": "5354:24:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1188,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5354:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1192,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1190,
														"name": "_flashFeeReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1123,
														"src": "5381:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5381:19:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5354:46:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1196,
																	"name": "receiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1127,
																	"src": "5434:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																],
																"id": 1195,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5426:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1194,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5426:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5426:17:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1200,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5453:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																		"typeString": "contract ERC20FlashMint"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC20FlashMint_$1251",
																		"typeString": "contract ERC20FlashMint"
																	}
																],
																"id": 1199,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5445:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1198,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5445:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1201,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5445:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1202,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1131,
																"src": "5460:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1203,
																"name": "fee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1154,
																"src": "5468:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5460:11:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1193,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 882,
														"src": "5410:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5410:62:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1206,
												"nodeType": "ExpressionStatement",
												"src": "5410:62:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1207,
															"name": "fee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1154,
															"src": "5486:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1208,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5493:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5486:8:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1215,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1210,
															"name": "flashFeeReceiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1189,
															"src": "5498:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1213,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5526:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1212,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5518:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1211,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5518:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5518:10:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "5498:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5486:42:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1245,
													"nodeType": "Block",
													"src": "5598:121:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1231,
																				"name": "receiver",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1127,
																				"src": "5626:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			],
																			"id": 1230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5618:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1229,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5618:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1232,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5618:17:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1233,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1131,
																		"src": "5637:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1228,
																	"name": "_burn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 756,
																	"src": "5612:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1234,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5612:31:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1235,
															"nodeType": "ExpressionStatement",
															"src": "5612:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1239,
																				"name": "receiver",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1127,
																				"src": "5675:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			],
																			"id": 1238,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5667:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1237,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5667:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5667:17:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1241,
																		"name": "flashFeeReceiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1189,
																		"src": "5686:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1242,
																		"name": "fee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1154,
																		"src": "5704:3:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1236,
																	"name": "_transfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 613,
																	"src": "5657:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5657:51:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1244,
															"nodeType": "ExpressionStatement",
															"src": "5657:51:8"
														}
													]
												},
												"id": 1246,
												"nodeType": "IfStatement",
												"src": "5482:237:8",
												"trueBody": {
													"id": 1227,
													"nodeType": "Block",
													"src": "5530:62:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1220,
																				"name": "receiver",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1127,
																				"src": "5558:8:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
																					"typeString": "contract IERC3156FlashBorrower"
																				}
																			],
																			"id": 1219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5550:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1218,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5550:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5550:17:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1224,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1222,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "5569:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1223,
																			"name": "fee",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1154,
																			"src": "5577:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5569:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1217,
																	"name": "_burn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 756,
																	"src": "5544:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 1225,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5544:37:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1226,
															"nodeType": "ExpressionStatement",
															"src": "5544:37:8"
														}
													]
												}
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5735:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1137,
												"id": 1248,
												"nodeType": "Return",
												"src": "5728:11:8"
											}
										]
									},
									"documentation": {
										"id": 1124,
										"nodeType": "StructuredDocumentation",
										"src": "3735:760:8",
										"text": " @dev Performs a flash loan. New tokens are minted and sent to the\n `receiver`, who is required to implement the {IERC3156FlashBorrower}\n interface. By the end of the flash loan, the receiver is expected to own\n value + fee tokens and have them approved back to the token contract itself so\n they can be burned.\n @param receiver The receiver of the flash loan. Should implement the\n {IERC3156FlashBorrower-onFlashLoan} interface.\n @param token The token to be flash loaned. Only `address(this)` is\n supported.\n @param value The amount of tokens to be loaned.\n @param data An arbitrary datafield that is passed to the receiver.\n @return `true` if the flash loan was successful."
									},
									"functionSelector": "5cffe9de",
									"id": 1250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "flashLoan",
									"nameLocation": "4793:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "4834:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "4812:30:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
													"typeString": "contract IERC3156FlashBorrower"
												},
												"typeName": {
													"id": 1126,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1125,
														"name": "IERC3156FlashBorrower",
														"nameLocations": [
															"4812:21:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "4812:21:8"
													},
													"referencedDeclaration": 167,
													"src": "4812:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$167",
														"typeString": "contract IERC3156FlashBorrower"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4860:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "4852:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4852:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4883:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "4875:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4875:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4913:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "4898:19:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1132,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4898:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4802:121:8"
									},
									"returnParameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "4948:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1135,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4948:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4947:6:8"
									},
									"scope": 1251,
									"src": "4784:962:8",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1252,
							"src": "929:4819:8",
							"usedErrors": [
								243,
								248,
								253,
								262,
								267,
								272,
								1030,
								1035,
								1040
							],
							"usedEvents": [
								895,
								904
							]
						}
					],
					"src": "125:5624:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							2495
						],
						"EIP712": [
							2722
						],
						"ERC20": [
							883
						],
						"ERC20Permit": [
							1405
						],
						"IERC20Permit": [
							1467
						],
						"Nonces": [
							1565
						]
					},
					"id": 1406,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1253,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 1255,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1406,
							"sourceUnit": 1468,
							"src": "148:48:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1254,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1467,
										"src": "156:12:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 1257,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1406,
							"sourceUnit": 884,
							"src": "197:35:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1256,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 883,
										"src": "205:5:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 1259,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1406,
							"sourceUnit": 2496,
							"src": "233:60:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1258,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2495,
										"src": "241:5:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 1261,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1406,
							"sourceUnit": 2723,
							"src": "294:62:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1260,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2722,
										"src": "302:6:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 1263,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1406,
							"sourceUnit": 1566,
							"src": "357:49:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1262,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1565,
										"src": "365:6:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1265,
										"name": "ERC20",
										"nameLocations": [
											"929:5:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "929:5:9"
									},
									"id": 1266,
									"nodeType": "InheritanceSpecifier",
									"src": "929:5:9"
								},
								{
									"baseName": {
										"id": 1267,
										"name": "IERC20Permit",
										"nameLocations": [
											"936:12:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1467,
										"src": "936:12:9"
									},
									"id": 1268,
									"nodeType": "InheritanceSpecifier",
									"src": "936:12:9"
								},
								{
									"baseName": {
										"id": 1269,
										"name": "EIP712",
										"nameLocations": [
											"950:6:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2722,
										"src": "950:6:9"
									},
									"id": 1270,
									"nodeType": "InheritanceSpecifier",
									"src": "950:6:9"
								},
								{
									"baseName": {
										"id": 1271,
										"name": "Nonces",
										"nameLocations": [
											"958:6:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1565,
										"src": "958:6:9"
									},
									"id": 1272,
									"nodeType": "InheritanceSpecifier",
									"src": "958:6:9"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1264,
								"nodeType": "StructuredDocumentation",
								"src": "408:487:9",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1405,
							"linearizedBaseContracts": [
								1405,
								1565,
								2722,
								231,
								1467,
								883,
								273,
								1431,
								961,
								1497
							],
							"name": "ERC20Permit",
							"nameLocation": "914:11:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1277,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "996:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 1405,
									"src": "971:146:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1273,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "971:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 1275,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1032:84:9",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 1274,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1022:9:9",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1276,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1022:95:9",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "1124:52:9",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 1282,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1187:23:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1219:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1282,
												"src": "1211:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:18:9"
									},
									"src": "1181:48:9"
								},
								{
									"documentation": {
										"id": 1283,
										"nodeType": "StructuredDocumentation",
										"src": "1235:45:9",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 1289,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1291:20:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1320:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "1312:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1312:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1336:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "1328:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1328:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:31:9"
									},
									"src": "1285:58:9"
								},
								{
									"body": {
										"id": 1299,
										"nodeType": "Block",
										"src": "1624:2:9",
										"statements": []
									},
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "1349:220:9",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1300,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1295,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1292,
													"src": "1613:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 1296,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1619:3:9",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 1297,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1294,
												"name": "EIP712",
												"nameLocations": [
													"1606:6:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2722,
												"src": "1606:6:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1606:17:9"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1600:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1300,
												"src": "1586:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:9"
									},
									"returnParameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1624:0:9"
									},
									"scope": 1405,
									"src": "1574:52:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1452
									],
									"body": {
										"id": 1376,
										"nodeType": "Block",
										"src": "1869:483:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1318,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1883:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1889:9:9",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1883:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1320,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1309,
														"src": "1901:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1883:26:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1327,
												"nodeType": "IfStatement",
												"src": "1879:97:9",
												"trueBody": {
													"id": 1326,
													"nodeType": "Block",
													"src": "1911:65:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1323,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1309,
																		"src": "1956:8:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1322,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "1932:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1932:33:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1325,
															"nodeType": "RevertStatement",
															"src": "1925:40:9"
														}
													]
												}
											},
											{
												"assignments": [
													1329
												],
												"declarations": [
													{
														"constant": false,
														"id": 1329,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "1994:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1376,
														"src": "1986:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1328,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1986:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1343,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1333,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1277,
																	"src": "2028:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1334,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1303,
																	"src": "2045:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1335,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1305,
																	"src": "2052:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1336,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1307,
																	"src": "2061:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1338,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1303,
																			"src": "2078:5:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1337,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1539,
																		"src": "2068:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1339,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2068:16:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1340,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1309,
																	"src": "2086:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1331,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2017:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2021:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2017:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:78:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1330,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2007:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2007:89:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:110:9"
											},
											{
												"assignments": [
													1345
												],
												"declarations": [
													{
														"constant": false,
														"id": 1345,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2115:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1376,
														"src": "2107:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1344,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2107:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1349,
												"initialValue": {
													"arguments": [
														{
															"id": 1347,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "2139:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1346,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2655,
														"src": "2122:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2122:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2107:43:9"
											},
											{
												"assignments": [
													1351
												],
												"declarations": [
													{
														"constant": false,
														"id": 1351,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2169:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1376,
														"src": "2161:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1350,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2161:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1359,
												"initialValue": {
													"arguments": [
														{
															"id": 1354,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1345,
															"src": "2192:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1355,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "2198:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1356,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1313,
															"src": "2201:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1357,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1315,
															"src": "2204:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1352,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2495,
															"src": "2178:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2495_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1353,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2184:7:9",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2445,
														"src": "2178:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2178:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2161:45:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1360,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1351,
														"src": "2220:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1361,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1303,
														"src": "2230:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:15:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1369,
												"nodeType": "IfStatement",
												"src": "2216:88:9",
												"trueBody": {
													"id": 1368,
													"nodeType": "Block",
													"src": "2237:67:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1364,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1351,
																		"src": "2279:6:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1365,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1303,
																		"src": "2287:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1363,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1289,
																	"src": "2258:20:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 1366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:35:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1367,
															"nodeType": "RevertStatement",
															"src": "2251:42:9"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1371,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1303,
															"src": "2323:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1372,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1305,
															"src": "2330:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1373,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1307,
															"src": "2339:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1370,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															774,
															834
														],
														"referencedDeclaration": 774,
														"src": "2314:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2314:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1375,
												"nodeType": "ExpressionStatement",
												"src": "2314:31:9"
											}
										]
									},
									"documentation": {
										"id": 1301,
										"nodeType": "StructuredDocumentation",
										"src": "1632:43:9",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1689:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1713:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1705:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1736:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1728:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1761:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1753:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1784:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1776:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1776:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1808:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1802:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1310,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1802:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1313,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1827:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1819:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1312,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1819:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1846:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1377,
												"src": "1838:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1314,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:158:9"
									},
									"returnParameters": {
										"id": 1317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1869:0:9"
									},
									"scope": 1405,
									"src": "1680:672:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1460,
										1524
									],
									"body": {
										"id": 1393,
										"nodeType": "Block",
										"src": "2506:43:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1390,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1380,
															"src": "2536:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1388,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2523:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$1405_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2529:6:9",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1524,
														"src": "2523:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2523:19:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1387,
												"id": 1392,
												"nodeType": "Return",
												"src": "2516:26:9"
											}
										]
									},
									"documentation": {
										"id": 1378,
										"nodeType": "StructuredDocumentation",
										"src": "2358:43:9",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2415:6:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1384,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1382,
												"name": "IERC20Permit",
												"nameLocations": [
													"2466:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1467,
												"src": "2466:12:9"
											},
											{
												"id": 1383,
												"name": "Nonces",
												"nameLocations": [
													"2480:6:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1565,
												"src": "2480:6:9"
											}
										],
										"src": "2457:30:9"
									},
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2430:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "2422:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2422:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2421:15:9"
									},
									"returnParameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1386,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "2497:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1385,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2496:9:9"
									},
									"scope": 1405,
									"src": "2406:143:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1466
									],
									"body": {
										"id": 1403,
										"nodeType": "Block",
										"src": "2724:44:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1400,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2618,
														"src": "2741:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:20:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1399,
												"id": 1402,
												"nodeType": "Return",
												"src": "2734:27:9"
											}
										]
									},
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:9",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1404,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2665:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2681:2:9"
									},
									"returnParameters": {
										"id": 1399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1404,
												"src": "2715:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1397,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:9:9"
									},
									"scope": 1405,
									"src": "2656:112:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1406,
							"src": "896:1874:9",
							"usedErrors": [
								243,
								248,
								253,
								262,
								267,
								272,
								1282,
								1289,
								1507,
								1579,
								1581,
								2158,
								2163,
								2168
							],
							"usedEvents": [
								211,
								895,
								904
							]
						}
					],
					"src": "122:2649:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							961
						],
						"IERC20Metadata": [
							1431
						]
					},
					"id": 1432,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1407,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1409,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1432,
							"sourceUnit": 962,
							"src": "151:37:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1408,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 961,
										"src": "159:6:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1411,
										"name": "IERC20",
										"nameLocations": [
											"305:6:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 961,
										"src": "305:6:10"
									},
									"id": 1412,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:10"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1410,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:10",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1431,
							"linearizedBaseContracts": [
								1431,
								961
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1413,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:10",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1418,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:10"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1418,
												"src": "416:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1415,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:10"
									},
									"scope": 1431,
									"src": "377:54:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1419,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:10",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1424,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:10"
									},
									"returnParameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1424,
												"src": "539:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:10"
									},
									"scope": 1431,
									"src": "498:56:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1425,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:10",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1430,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:10"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "673:5:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1427,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:10"
									},
									"scope": 1431,
									"src": "630:50:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1432,
							"src": "277:405:10",
							"usedErrors": [],
							"usedEvents": [
								895,
								904
							]
						}
					],
					"src": "125:558:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1467
						]
					},
					"id": 1468,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1433,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1434,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:11",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1467,
							"linearizedBaseContracts": [
								1467
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1435,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:11",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1452,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1437,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3022:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1439,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3045:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3070:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3093:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1445,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3119:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1444,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1447,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3136:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1446,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1452,
												"src": "3155:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1448,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:11"
									},
									"returnParameters": {
										"id": 1451,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:11"
									},
									"scope": 1467,
									"src": "2997:183:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1453,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:11",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1460,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "3501:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:11"
									},
									"returnParameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "3539:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:11"
									},
									"scope": 1467,
									"src": "3485:63:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1461,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:11",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1466,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:11"
									},
									"returnParameters": {
										"id": 1465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1466,
												"src": "3791:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1463,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:11"
									},
									"scope": 1467,
									"src": "3740:60:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1468,
							"src": "2113:1689:11",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1497
						]
					},
					"id": 1498,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1469,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:12"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1470,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:12",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1497,
							"linearizedBaseContracts": [
								1497
							],
							"name": "Context",
							"nameLocation": "642:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1478,
										"nodeType": "Block",
										"src": "718:34:12",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1475,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:12",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1474,
												"id": 1477,
												"nodeType": "Return",
												"src": "728:17:12"
											}
										]
									},
									"id": 1479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:12"
									},
									"returnParameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1479,
												"src": "709:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1472,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:12"
									},
									"scope": 1497,
									"src": "656:96:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1487,
										"nodeType": "Block",
										"src": "825:32:12",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1484,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:12",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1483,
												"id": 1486,
												"nodeType": "Return",
												"src": "835:15:12"
											}
										]
									},
									"id": 1488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:12"
									},
									"returnParameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1488,
												"src": "809:14:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1481,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:12"
									},
									"scope": 1497,
									"src": "758:99:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1495,
										"nodeType": "Block",
										"src": "935:25:12",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1492,
												"id": 1494,
												"nodeType": "Return",
												"src": "945:8:12"
											}
										]
									},
									"id": 1496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1489,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:12"
									},
									"returnParameters": {
										"id": 1492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1496,
												"src": "926:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1490,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:12"
									},
									"scope": 1497,
									"src": "863:97:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1498,
							"src": "624:338:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1565
						]
					},
					"id": 1566,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1499,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:13"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1500,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:13",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1565,
							"linearizedBaseContracts": [
								1565
							],
							"name": "Nonces",
							"nameLocation": "227:6:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:13",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1507,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "361:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:13",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "378:20:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:13"
									},
									"src": "335:65:13"
								},
								{
									"constant": false,
									"id": 1511,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:13",
									"nodeType": "VariableDeclaration",
									"scope": 1565,
									"src": "406:51:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1510,
										"keyName": "account",
										"keyNameLocation": "422:7:13",
										"keyType": {
											"id": 1508,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1509,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1523,
										"nodeType": "Block",
										"src": "607:38:13",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1519,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1511,
														"src": "624:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1521,
													"indexExpression": {
														"id": 1520,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1514,
														"src": "632:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1518,
												"id": 1522,
												"nodeType": "Return",
												"src": "617:21:13"
											}
										]
									},
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:13",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "554:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:13"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "598:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:13"
									},
									"scope": 1565,
									"src": "538:107:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1538,
										"nodeType": "Block",
										"src": "828:326:13",
										"statements": [
											{
												"id": 1537,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:13",
												"statements": [
													{
														"expression": {
															"id": 1535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:13",
															"subExpression": {
																"baseExpression": {
																	"id": 1532,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1511,
																	"src": "1121:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1534,
																"indexExpression": {
																	"id": 1533,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1527,
																	"src": "1129:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1531,
														"id": 1536,
														"nodeType": "Return",
														"src": "1114:23:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:13",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1539,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "778:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:13"
									},
									"returnParameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1539,
												"src": "819:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:13"
									},
									"scope": 1565,
									"src": "759:395:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1563,
										"nodeType": "Block",
										"src": "1338:149:13",
										"statements": [
											{
												"assignments": [
													1548
												],
												"declarations": [
													{
														"constant": false,
														"id": 1548,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 1563,
														"src": "1348:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1547,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1552,
												"initialValue": {
													"arguments": [
														{
															"id": 1550,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1542,
															"src": "1376:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1549,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1539,
														"src": "1366:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1553,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1544,
														"src": "1396:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1554,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1548,
														"src": "1405:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1562,
												"nodeType": "IfStatement",
												"src": "1392:89:13",
												"trueBody": {
													"id": 1561,
													"nodeType": "Block",
													"src": "1414:67:13",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1557,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1542,
																		"src": "1455:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1558,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1548,
																		"src": "1462:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1556,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1507,
																	"src": "1435:19:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256) pure returns (error)"
																	}
																},
																"id": 1559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1560,
															"nodeType": "RevertStatement",
															"src": "1428:42:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1540,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:13",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "1291:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "1306:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:13"
									},
									"returnParameters": {
										"id": 1546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:13"
									},
									"scope": 1565,
									"src": "1265:222:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1566,
							"src": "209:1280:13",
							"usedErrors": [
								1507
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1571
						],
						"ShortStrings": [
							1782
						],
						"StorageSlot": [
							1892
						]
					},
					"id": 1783,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1567,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:14"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1569,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1783,
							"sourceUnit": 1893,
							"src": "132:46:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1568,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1892,
										"src": "140:11:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1571,
							"name": "ShortString",
							"nameLocation": "353:11:14",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:14",
							"underlyingType": {
								"id": 1570,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:14",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1572,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:14",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1782,
							"linearizedBaseContracts": [
								1782
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1575,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:14",
									"nodeType": "VariableDeclaration",
									"scope": 1782,
									"src": "1345:111:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1573,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1574,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:14",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1579,
									"name": "StringTooLong",
									"nameLocation": "1469:13:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "1483:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1576,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:14"
									},
									"src": "1463:32:14"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1581,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:14"
									},
									"src": "1500:27:14"
								},
								{
									"body": {
										"id": 1624,
										"nodeType": "Block",
										"src": "1786:208:14",
										"statements": [
											{
												"assignments": [
													1591
												],
												"declarations": [
													{
														"constant": false,
														"id": 1591,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:14",
														"nodeType": "VariableDeclaration",
														"scope": 1624,
														"src": "1796:17:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1590,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1596,
												"initialValue": {
													"arguments": [
														{
															"id": 1594,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1584,
															"src": "1822:3:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1592,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:14",
															"typeDescriptions": {}
														}
													},
													"id": 1595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1597,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1591,
															"src": "1840:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:14",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1599,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1606,
												"nodeType": "IfStatement",
												"src": "1836:72:14",
												"trueBody": {
													"id": 1605,
													"nodeType": "Block",
													"src": "1858:50:14",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1602,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1584,
																		"src": "1893:3:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1601,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1579,
																	"src": "1879:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (string memory) pure returns (error)"
																	}
																},
																"id": 1603,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1604,
															"nodeType": "RevertStatement",
															"src": "1872:25:14"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1615,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1591,
																						"src": "1965:4:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1614,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1613,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:14",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1616,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1611,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1618,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1591,
																			"src": "1974:4:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:14",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1610,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1609,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 1621,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1607,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1571,
															"src": "1924:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1571_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1608,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:14",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1571_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1589,
												"id": 1623,
												"nodeType": "Return",
												"src": "1917:70:14"
											}
										]
									},
									"documentation": {
										"id": 1582,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:14",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1625,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:14",
												"nodeType": "VariableDeclaration",
												"scope": 1625,
												"src": "1731:17:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1583,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:14"
									},
									"returnParameters": {
										"id": 1589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1625,
												"src": "1773:11:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1587,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1586,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "1773:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "1773:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:14"
									},
									"scope": 1782,
									"src": "1708:286:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1650,
										"nodeType": "Block",
										"src": "2152:331:14",
										"statements": [
											{
												"assignments": [
													1635
												],
												"declarations": [
													{
														"constant": false,
														"id": 1635,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:14",
														"nodeType": "VariableDeclaration",
														"scope": 1650,
														"src": "2162:11:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1634,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1639,
												"initialValue": {
													"arguments": [
														{
															"id": 1637,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1629,
															"src": "2187:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																"typeString": "ShortString"
															}
														],
														"id": 1636,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1683,
														"src": "2176:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:14"
											},
											{
												"assignments": [
													1641
												],
												"declarations": [
													{
														"constant": false,
														"id": 1641,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:14",
														"nodeType": "VariableDeclaration",
														"scope": 1650,
														"src": "2280:17:14",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1640,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1646,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1644,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:14",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1642,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:14"
											},
											{
												"AST": {
													"nativeSrc": "2376:81:14",
													"nodeType": "YulBlock",
													"src": "2376:81:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2397:3:14",
																		"nodeType": "YulIdentifier",
																		"src": "2397:3:14"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2402:3:14",
																		"nodeType": "YulIdentifier",
																		"src": "2402:3:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2390:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2390:6:14"
																},
																"nativeSrc": "2390:16:14",
																"nodeType": "YulFunctionCall",
																"src": "2390:16:14"
															},
															"nativeSrc": "2390:16:14",
															"nodeType": "YulExpressionStatement",
															"src": "2390:16:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2430:3:14",
																				"nodeType": "YulIdentifier",
																				"src": "2430:3:14"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2435:4:14",
																				"nodeType": "YulLiteral",
																				"src": "2435:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2426:3:14",
																			"nodeType": "YulIdentifier",
																			"src": "2426:3:14"
																		},
																		"nativeSrc": "2426:14:14",
																		"nodeType": "YulFunctionCall",
																		"src": "2426:14:14"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2442:4:14",
																		"nodeType": "YulIdentifier",
																		"src": "2442:4:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2419:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2419:6:14"
																},
																"nativeSrc": "2419:28:14",
																"nodeType": "YulFunctionCall",
																"src": "2419:28:14"
															},
															"nativeSrc": "2419:28:14",
															"nodeType": "YulExpressionStatement",
															"src": "2419:28:14"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1635,
														"isOffset": false,
														"isSlot": false,
														"src": "2402:3:14",
														"valueSize": 1
													},
													{
														"declaration": 1629,
														"isOffset": false,
														"isSlot": false,
														"src": "2442:4:14",
														"valueSize": 1
													},
													{
														"declaration": 1641,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:3:14",
														"valueSize": 1
													},
													{
														"declaration": 1641,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:3:14",
														"valueSize": 1
													}
												],
												"id": 1647,
												"nodeType": "InlineAssembly",
												"src": "2367:90:14"
											},
											{
												"expression": {
													"id": 1648,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1641,
													"src": "2473:3:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1633,
												"id": 1649,
												"nodeType": "Return",
												"src": "2466:10:14"
											}
										]
									},
									"documentation": {
										"id": 1626,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:14",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1629,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2096:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1628,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1627,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "2096:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "2096:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:14"
									},
									"returnParameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1651,
												"src": "2137:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1631,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:14"
									},
									"scope": 1782,
									"src": "2078:405:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1682,
										"nodeType": "Block",
										"src": "2625:175:14",
										"statements": [
											{
												"assignments": [
													1661
												],
												"declarations": [
													{
														"constant": false,
														"id": 1661,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2643:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 1682,
														"src": "2635:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1660,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2635:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1671,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1666,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1655,
																		"src": "2679:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1664,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1571,
																		"src": "2660:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1571_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2672:6:14",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2660:18:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2660:24:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1663,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2652:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1662,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2652:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 1668,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2652:33:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1669,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:4:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2652:40:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2635:57:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1672,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1661,
														"src": "2706:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1673,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2715:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2706:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1679,
												"nodeType": "IfStatement",
												"src": "2702:69:14",
												"trueBody": {
													"id": 1678,
													"nodeType": "Block",
													"src": "2719:52:14",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1675,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1581,
																	"src": "2740:18:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2740:20:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1677,
															"nodeType": "RevertStatement",
															"src": "2733:27:14"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1680,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1661,
													"src": "2787:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1659,
												"id": 1681,
												"nodeType": "Return",
												"src": "2780:13:14"
											}
										]
									},
									"documentation": {
										"id": 1652,
										"nodeType": "StructuredDocumentation",
										"src": "2489:61:14",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2564:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2587:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "2575:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1654,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1653,
														"name": "ShortString",
														"nameLocations": [
															"2575:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "2575:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "2575:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2574:18:14"
									},
									"returnParameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "2616:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2615:9:14"
									},
									"scope": 1782,
									"src": "2555:245:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1722,
										"nodeType": "Block",
										"src": "3023:231:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1696,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1686,
																	"src": "3043:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1695,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3037:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1694,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3037:5:14",
																	"typeDescriptions": {}
																}
															},
															"id": 1697,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3037:12:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3050:6:14",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3037:19:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1699,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3037:24:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1720,
													"nodeType": "Block",
													"src": "3121:127:14",
													"statements": [
														{
															"expression": {
																"id": 1713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1709,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1688,
																				"src": "3161:5:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1706,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1892,
																				"src": "3135:11:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1892_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1708,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3147:13:14",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1869,
																			"src": "3135:25:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1800_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1710,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3135:32:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1800_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1711,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3168:5:14",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1799,
																	"src": "3135:38:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1712,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1686,
																	"src": "3176:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3135:46:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1714,
															"nodeType": "ExpressionStatement",
															"src": "3135:46:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1717,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1575,
																		"src": "3219:17:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1715,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1571,
																		"src": "3202:11:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1571_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1716,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3214:4:14",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3202:16:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1571_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:35:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1693,
															"id": 1719,
															"nodeType": "Return",
															"src": "3195:42:14"
														}
													]
												},
												"id": 1721,
												"nodeType": "IfStatement",
												"src": "3033:215:14",
												"trueBody": {
													"id": 1705,
													"nodeType": "Block",
													"src": "3063:52:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1702,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1686,
																		"src": "3098:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1701,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1625,
																	"src": "3084:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1571_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3084:20:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1693,
															"id": 1704,
															"nodeType": "Return",
															"src": "3077:27:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "2806:103:14",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1723,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2923:25:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2963:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "2949:19:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1685,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1688,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2985:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "2970:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1687,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2970:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:43:14"
									},
									"returnParameters": {
										"id": 1693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1692,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1723,
												"src": "3010:11:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1691,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1690,
														"name": "ShortString",
														"nameLocations": [
															"3010:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "3010:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "3010:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3009:13:14"
									},
									"scope": 1782,
									"src": "2914:340:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1749,
										"nodeType": "Block",
										"src": "3494:158:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1736,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1727,
																"src": "3527:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1734,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1571,
																"src": "3508:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1571_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1735,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3520:6:14",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3508:18:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3508:25:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1738,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1575,
														"src": "3537:17:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3508:46:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1747,
													"nodeType": "Block",
													"src": "3609:37:14",
													"statements": [
														{
															"expression": {
																"id": 1745,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1729,
																"src": "3630:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1733,
															"id": 1746,
															"nodeType": "Return",
															"src": "3623:12:14"
														}
													]
												},
												"id": 1748,
												"nodeType": "IfStatement",
												"src": "3504:142:14",
												"trueBody": {
													"id": 1744,
													"nodeType": "Block",
													"src": "3556:47:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1741,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1727,
																		"src": "3586:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1740,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1651,
																	"src": "3577:8:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1742,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3577:15:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1733,
															"id": 1743,
															"nodeType": "Return",
															"src": "3570:22:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "3260:120:14",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3394:20:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1727,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3427:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "3415:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1726,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1725,
														"name": "ShortString",
														"nameLocations": [
															"3415:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "3415:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "3415:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1729,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3449:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "3434:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1728,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3434:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:41:14"
									},
									"returnParameters": {
										"id": 1733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1732,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1750,
												"src": "3479:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1731,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3479:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:15:14"
									},
									"scope": 1782,
									"src": "3385:267:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1780,
										"nodeType": "Block",
										"src": "4132:174:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1763,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1754,
																"src": "4165:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1761,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1571,
																"src": "4146:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1571_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1762,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4158:6:14",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4146:18:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4146:25:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1765,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1575,
														"src": "4175:17:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4146:46:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1778,
													"nodeType": "Block",
													"src": "4249:51:14",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1774,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1756,
																			"src": "4276:5:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1772,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:5:14",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1775,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:12:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4283:6:14",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4270:19:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1760,
															"id": 1777,
															"nodeType": "Return",
															"src": "4263:26:14"
														}
													]
												},
												"id": 1779,
												"nodeType": "IfStatement",
												"src": "4142:158:14",
												"trueBody": {
													"id": 1771,
													"nodeType": "Block",
													"src": "4194:49:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1768,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1754,
																		"src": "4226:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1767,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1683,
																	"src": "4215:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1571_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4215:17:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1760,
															"id": 1770,
															"nodeType": "Return",
															"src": "4208:24:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1751,
										"nodeType": "StructuredDocumentation",
										"src": "3658:364:14",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1781,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4036:22:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1754,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4071:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "4059:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1753,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1752,
														"name": "ShortString",
														"nameLocations": [
															"4059:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1571,
														"src": "4059:11:14"
													},
													"referencedDeclaration": 1571,
													"src": "4059:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4093:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "4078:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1755,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4078:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4058:41:14"
									},
									"returnParameters": {
										"id": 1760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1781,
												"src": "4123:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4122:9:14"
									},
									"scope": 1782,
									"src": "4027:279:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1783,
							"src": "1255:3053:14",
							"usedErrors": [
								1579,
								1581
							],
							"usedEvents": []
						}
					],
					"src": "106:4203:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1892
						]
					},
					"id": 1893,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1784,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:15"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1785,
								"nodeType": "StructuredDocumentation",
								"src": "219:1025:15",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1892,
							"linearizedBaseContracts": [
								1892
							],
							"name": "StorageSlot",
							"nameLocation": "1253:11:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1788,
									"members": [
										{
											"constant": false,
											"id": 1787,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1308:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1788,
											"src": "1300:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1786,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1300:7:15",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1278:11:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1271:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1791,
									"members": [
										{
											"constant": false,
											"id": 1790,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1360:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1791,
											"src": "1355:10:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1789,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1355:4:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1333:11:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1326:46:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1794,
									"members": [
										{
											"constant": false,
											"id": 1793,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1415:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1794,
											"src": "1407:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1792,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1407:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1385:11:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1378:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1797,
									"members": [
										{
											"constant": false,
											"id": 1796,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1797,
											"src": "1462:13:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1795,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:15",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1440:11:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1433:49:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1800,
									"members": [
										{
											"constant": false,
											"id": 1799,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1523:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1800,
											"src": "1516:12:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1798,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1516:6:15",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1495:10:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1488:47:15",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1803,
									"members": [
										{
											"constant": false,
											"id": 1802,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1574:5:15",
											"nodeType": "VariableDeclaration",
											"scope": 1803,
											"src": "1568:11:15",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1801,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1568:5:15",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1548:9:15",
									"nodeType": "StructDefinition",
									"scope": 1892,
									"src": "1541:45:15",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1813,
										"nodeType": "Block",
										"src": "1768:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1830:38:15",
													"nodeType": "YulBlock",
													"src": "1830:38:15",
													"statements": [
														{
															"nativeSrc": "1844:14:15",
															"nodeType": "YulAssignment",
															"src": "1844:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "1854:4:15",
																"nodeType": "YulIdentifier",
																"src": "1854:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "1844:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1810,
														"isOffset": false,
														"isSlot": true,
														"src": "1844:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1806,
														"isOffset": false,
														"isSlot": false,
														"src": "1854:4:15",
														"valueSize": 1
													}
												],
												"id": 1812,
												"nodeType": "InlineAssembly",
												"src": "1821:47:15"
											}
										]
									},
									"documentation": {
										"id": 1804,
										"nodeType": "StructuredDocumentation",
										"src": "1592:87:15",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1814,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1693:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1806,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1716:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "1708:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1805,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:14:15"
									},
									"returnParameters": {
										"id": 1811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1810,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1765:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "1745:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1788_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1809,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1808,
														"name": "AddressSlot",
														"nameLocations": [
															"1745:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1788,
														"src": "1745:11:15"
													},
													"referencedDeclaration": 1788,
													"src": "1745:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1788_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:23:15"
									},
									"scope": 1892,
									"src": "1684:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1824,
										"nodeType": "Block",
										"src": "2056:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2118:38:15",
													"nodeType": "YulBlock",
													"src": "2118:38:15",
													"statements": [
														{
															"nativeSrc": "2132:14:15",
															"nodeType": "YulAssignment",
															"src": "2132:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "2142:4:15",
																"nodeType": "YulIdentifier",
																"src": "2142:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2132:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "2132:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1821,
														"isOffset": false,
														"isSlot": true,
														"src": "2132:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1817,
														"isOffset": false,
														"isSlot": false,
														"src": "2142:4:15",
														"valueSize": 1
													}
												],
												"id": 1823,
												"nodeType": "InlineAssembly",
												"src": "2109:47:15"
											}
										]
									},
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "1880:87:15",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1825,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1981:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2004:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1825,
												"src": "1996:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1816,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:15"
									},
									"returnParameters": {
										"id": 1822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1821,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2053:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1825,
												"src": "2033:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1791_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1820,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1819,
														"name": "BooleanSlot",
														"nameLocations": [
															"2033:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1791,
														"src": "2033:11:15"
													},
													"referencedDeclaration": 1791,
													"src": "2033:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1791_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2032:23:15"
									},
									"scope": 1892,
									"src": "1972:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1835,
										"nodeType": "Block",
										"src": "2344:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2406:38:15",
													"nodeType": "YulBlock",
													"src": "2406:38:15",
													"statements": [
														{
															"nativeSrc": "2420:14:15",
															"nodeType": "YulAssignment",
															"src": "2420:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "2430:4:15",
																"nodeType": "YulIdentifier",
																"src": "2430:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2420:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "2420:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1832,
														"isOffset": false,
														"isSlot": true,
														"src": "2420:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1828,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:4:15",
														"valueSize": 1
													}
												],
												"id": 1834,
												"nodeType": "InlineAssembly",
												"src": "2397:47:15"
											}
										]
									},
									"documentation": {
										"id": 1826,
										"nodeType": "StructuredDocumentation",
										"src": "2168:87:15",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2269:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2292:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "2284:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1827,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2284:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2283:14:15"
									},
									"returnParameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2341:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1836,
												"src": "2321:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1794_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1831,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1830,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2321:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1794,
														"src": "2321:11:15"
													},
													"referencedDeclaration": 1794,
													"src": "2321:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1794_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2320:23:15"
									},
									"scope": 1892,
									"src": "2260:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1846,
										"nodeType": "Block",
										"src": "2632:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2694:38:15",
													"nodeType": "YulBlock",
													"src": "2694:38:15",
													"statements": [
														{
															"nativeSrc": "2708:14:15",
															"nodeType": "YulAssignment",
															"src": "2708:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "2718:4:15",
																"nodeType": "YulIdentifier",
																"src": "2718:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2708:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "2708:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1843,
														"isOffset": false,
														"isSlot": true,
														"src": "2708:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1839,
														"isOffset": false,
														"isSlot": false,
														"src": "2718:4:15",
														"valueSize": 1
													}
												],
												"id": 1845,
												"nodeType": "InlineAssembly",
												"src": "2685:47:15"
											}
										]
									},
									"documentation": {
										"id": 1837,
										"nodeType": "StructuredDocumentation",
										"src": "2456:87:15",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1847,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2557:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1839,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2580:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "2572:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1838,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2571:14:15"
									},
									"returnParameters": {
										"id": 1844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1843,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2629:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1847,
												"src": "2609:21:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1797_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1842,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1841,
														"name": "Uint256Slot",
														"nameLocations": [
															"2609:11:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1797,
														"src": "2609:11:15"
													},
													"referencedDeclaration": 1797,
													"src": "2609:11:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1797_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2608:23:15"
									},
									"scope": 1892,
									"src": "2548:190:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1857,
										"nodeType": "Block",
										"src": "2917:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2979:38:15",
													"nodeType": "YulBlock",
													"src": "2979:38:15",
													"statements": [
														{
															"nativeSrc": "2993:14:15",
															"nodeType": "YulAssignment",
															"src": "2993:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "3003:4:15",
																"nodeType": "YulIdentifier",
																"src": "3003:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2993:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1854,
														"isOffset": false,
														"isSlot": true,
														"src": "2993:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1850,
														"isOffset": false,
														"isSlot": false,
														"src": "3003:4:15",
														"valueSize": 1
													}
												],
												"id": 1856,
												"nodeType": "InlineAssembly",
												"src": "2970:47:15"
											}
										]
									},
									"documentation": {
										"id": 1848,
										"nodeType": "StructuredDocumentation",
										"src": "2744:86:15",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2844:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1850,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2866:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2858:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1849,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:14:15"
									},
									"returnParameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1854,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2914:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1858,
												"src": "2895:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1800_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1853,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1852,
														"name": "StringSlot",
														"nameLocations": [
															"2895:10:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1800,
														"src": "2895:10:15"
													},
													"referencedDeclaration": 1800,
													"src": "2895:10:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1800_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2894:22:15"
									},
									"scope": 1892,
									"src": "2835:188:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1868,
										"nodeType": "Block",
										"src": "3225:112:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3287:44:15",
													"nodeType": "YulBlock",
													"src": "3287:44:15",
													"statements": [
														{
															"nativeSrc": "3301:20:15",
															"nodeType": "YulAssignment",
															"src": "3301:20:15",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3311:10:15",
																"nodeType": "YulIdentifier",
																"src": "3311:10:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3301:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1865,
														"isOffset": false,
														"isSlot": true,
														"src": "3301:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1861,
														"isOffset": false,
														"isSlot": true,
														"src": "3311:10:15",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1867,
												"nodeType": "InlineAssembly",
												"src": "3278:53:15"
											}
										]
									},
									"documentation": {
										"id": 1859,
										"nodeType": "StructuredDocumentation",
										"src": "3029:101:15",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1869,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3144:13:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1861,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3173:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "3158:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1860,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3157:22:15"
									},
									"returnParameters": {
										"id": 1866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3222:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "3203:20:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1800_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1864,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1863,
														"name": "StringSlot",
														"nameLocations": [
															"3203:10:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1800,
														"src": "3203:10:15"
													},
													"referencedDeclaration": 1800,
													"src": "3203:10:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1800_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3202:22:15"
									},
									"scope": 1892,
									"src": "3135:202:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1879,
										"nodeType": "Block",
										"src": "3513:106:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3575:38:15",
													"nodeType": "YulBlock",
													"src": "3575:38:15",
													"statements": [
														{
															"nativeSrc": "3589:14:15",
															"nodeType": "YulAssignment",
															"src": "3589:14:15",
															"value": {
																"name": "slot",
																"nativeSrc": "3599:4:15",
																"nodeType": "YulIdentifier",
																"src": "3599:4:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3589:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1876,
														"isOffset": false,
														"isSlot": true,
														"src": "3589:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1872,
														"isOffset": false,
														"isSlot": false,
														"src": "3599:4:15",
														"valueSize": 1
													}
												],
												"id": 1878,
												"nodeType": "InlineAssembly",
												"src": "3566:47:15"
											}
										]
									},
									"documentation": {
										"id": 1870,
										"nodeType": "StructuredDocumentation",
										"src": "3343:85:15",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1880,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3442:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1872,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3463:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "3455:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1871,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:14:15"
									},
									"returnParameters": {
										"id": 1877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3510:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1880,
												"src": "3492:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1803_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1875,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1874,
														"name": "BytesSlot",
														"nameLocations": [
															"3492:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1803,
														"src": "3492:9:15"
													},
													"referencedDeclaration": 1803,
													"src": "3492:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1803_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:21:15"
									},
									"scope": 1892,
									"src": "3433:186:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1890,
										"nodeType": "Block",
										"src": "3816:112:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3878:44:15",
													"nodeType": "YulBlock",
													"src": "3878:44:15",
													"statements": [
														{
															"nativeSrc": "3892:20:15",
															"nodeType": "YulAssignment",
															"src": "3892:20:15",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3902:10:15",
																"nodeType": "YulIdentifier",
																"src": "3902:10:15"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3892:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3892:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 1887,
														"isOffset": false,
														"isSlot": true,
														"src": "3892:6:15",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1883,
														"isOffset": false,
														"isSlot": true,
														"src": "3902:10:15",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1889,
												"nodeType": "InlineAssembly",
												"src": "3869:53:15"
											}
										]
									},
									"documentation": {
										"id": 1881,
										"nodeType": "StructuredDocumentation",
										"src": "3625:99:15",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1891,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3738:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1883,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3765:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "3751:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1882,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:21:15"
									},
									"returnParameters": {
										"id": 1888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1887,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3813:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1891,
												"src": "3795:19:15",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1803_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1886,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1885,
														"name": "BytesSlot",
														"nameLocations": [
															"3795:9:15"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1803,
														"src": "3795:9:15"
													},
													"referencedDeclaration": 1803,
													"src": "3795:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1803_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3794:21:15"
									},
									"scope": 1892,
									"src": "3729:199:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1893,
							"src": "1245:2685:15",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3738:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3850
						],
						"SignedMath": [
							3955
						],
						"Strings": [
							2147
						]
					},
					"id": 2148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1894,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1896,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2148,
							"sourceUnit": 3851,
							"src": "127:37:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1895,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3850,
										"src": "135:4:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1898,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2148,
							"sourceUnit": 3956,
							"src": "165:49:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1897,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3955,
										"src": "173:10:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1899,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:16",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2147,
							"linearizedBaseContracts": [
								2147
							],
							"name": "Strings",
							"nameLocation": "259:7:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1902,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:16",
									"nodeType": "VariableDeclaration",
									"scope": 2147,
									"src": "273:56:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1900,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:16",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1901,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:16",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1905,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:16",
									"nodeType": "VariableDeclaration",
									"scope": 2147,
									"src": "335:42:16",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1903,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:16",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1904,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:16",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1906,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:16",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1912,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "505:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1910,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "520:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:16"
									},
									"src": "470:66:16"
								},
								{
									"body": {
										"id": 1959,
										"nodeType": "Block",
										"src": "708:627:16",
										"statements": [
											{
												"id": 1958,
												"nodeType": "UncheckedBlock",
												"src": "718:611:16",
												"statements": [
													{
														"assignments": [
															1921
														],
														"declarations": [
															{
																"constant": false,
																"id": 1921,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 1958,
																"src": "742:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1920,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1928,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1924,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1915,
																		"src": "770:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1922,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3850,
																		"src": "759:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3850_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:16",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3670,
																	"src": "759:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1925,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1926,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:16"
													},
													{
														"assignments": [
															1930
														],
														"declarations": [
															{
																"constant": false,
																"id": 1930,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 1958,
																"src": "794:20:16",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1929,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1935,
														"initialValue": {
															"arguments": [
																{
																	"id": 1933,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1921,
																	"src": "828:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1932,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1931,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1934,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:16"
													},
													{
														"assignments": [
															1937
														],
														"declarations": [
															{
																"constant": false,
																"id": 1937,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:16",
																"nodeType": "VariableDeclaration",
																"scope": 1958,
																"src": "849:11:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1936,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1938,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:16"
													},
													{
														"AST": {
															"nativeSrc": "930:67:16",
															"nodeType": "YulBlock",
															"src": "930:67:16",
															"statements": [
																{
																	"nativeSrc": "948:35:16",
																	"nodeType": "YulAssignment",
																	"src": "948:35:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:16",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:16",
																						"nodeType": "YulLiteral",
																						"src": "971:2:16",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:16",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:16"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:16",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:16"
																				},
																				"nativeSrc": "967:15:16",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:16"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:16"
																		},
																		"nativeSrc": "955:28:16",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:16"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:16"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 1930,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:16",
																"valueSize": 1
															},
															{
																"declaration": 1921,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:16",
																"valueSize": 1
															},
															{
																"declaration": 1937,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:16",
																"valueSize": 1
															}
														],
														"id": 1939,
														"nodeType": "InlineAssembly",
														"src": "921:76:16"
													},
													{
														"body": {
															"id": 1954,
															"nodeType": "Block",
															"src": "1023:269:16",
															"statements": [
																{
																	"expression": {
																		"id": 1942,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:16",
																		"subExpression": {
																			"id": 1941,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1937,
																			"src": "1041:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1943,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:16"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:16",
																		"nodeType": "YulBlock",
																		"src": "1124:86:16",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:16",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:16"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:16",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:16"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:16",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:16",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:16",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:16"
																									},
																									"nativeSrc": "1164:14:16",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:16"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:16",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:16"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:16",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:16"
																							},
																							"nativeSrc": "1159:32:16",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:16"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:16",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:16"
																					},
																					"nativeSrc": "1146:46:16",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:16"
																				},
																				"nativeSrc": "1146:46:16",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:16"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "london",
																	"externalReferences": [
																		{
																			"declaration": 1902,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:16",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1937,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:16",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1915,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:16",
																			"valueSize": 1
																		}
																	],
																	"id": 1944,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:16"
																},
																{
																	"expression": {
																		"id": 1947,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1945,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "1227:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1946,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1948,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:16"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1951,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1949,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "1260:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1950,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1953,
																	"nodeType": "IfStatement",
																	"src": "1256:21:16",
																	"trueBody": {
																		"id": 1952,
																		"nodeType": "Break",
																		"src": "1272:5:16"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1940,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1955,
														"nodeType": "WhileStatement",
														"src": "1010:282:16"
													},
													{
														"expression": {
															"id": 1956,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1930,
															"src": "1312:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1919,
														"id": 1957,
														"nodeType": "Return",
														"src": "1305:13:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1913,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1960,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "655:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:16"
									},
									"returnParameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1960,
												"src": "693:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1917,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:16"
									},
									"scope": 2147,
									"src": "637:698:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1985,
										"nodeType": "Block",
										"src": "1511:92:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1971,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1963,
																	"src": "1542:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1975,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:16",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1980,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1963,
																			"src": "1588:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1978,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3955,
																			"src": "1573:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3955_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:16",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3954,
																		"src": "1573:14:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1981,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1977,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1960,
																"src": "1564:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1969,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1968,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:16",
																"typeDescriptions": {}
															}
														},
														"id": 1970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:16",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1967,
												"id": 1984,
												"nodeType": "Return",
												"src": "1521:75:16"
											}
										]
									},
									"documentation": {
										"id": 1961,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:16",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1986,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 1986,
												"src": "1459:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1962,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:16"
									},
									"returnParameters": {
										"id": 1967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1966,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1986,
												"src": "1496:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1965,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:16"
									},
									"scope": 2147,
									"src": "1435:168:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2005,
										"nodeType": "Block",
										"src": "1782:100:16",
										"statements": [
											{
												"id": 2004,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:16",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1995,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1989,
																	"src": "1835:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1998,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1989,
																				"src": "1854:5:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1996,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3850,
																				"src": "1842:4:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3850_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1997,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:16",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3792,
																			"src": "1842:11:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2000,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1994,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2006,
																	2089,
																	2109
																],
																"referencedDeclaration": 2089,
																"src": "1823:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 2002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1993,
														"id": 2003,
														"nodeType": "Return",
														"src": "1816:49:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1987,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 2006,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1989,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2006,
												"src": "1729:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:16"
									},
									"returnParameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2006,
												"src": "1767:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1991,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:16"
									},
									"scope": 2147,
									"src": "1708:174:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2088,
										"nodeType": "Block",
										"src": "2095:435:16",
										"statements": [
											{
												"assignments": [
													2017
												],
												"declarations": [
													{
														"constant": false,
														"id": 2017,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:16",
														"nodeType": "VariableDeclaration",
														"scope": 2088,
														"src": "2105:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2016,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2019,
												"initialValue": {
													"id": 2018,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2009,
													"src": "2126:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:16"
											},
											{
												"assignments": [
													2021
												],
												"declarations": [
													{
														"constant": false,
														"id": 2021,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2088,
														"src": "2141:19:16",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2020,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2030,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2026,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2025,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2011,
																	"src": "2177:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 2027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2023,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 2022,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 2029,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:16"
											},
											{
												"expression": {
													"id": 2035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2031,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "2198:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2033,
														"indexExpression": {
															"hexValue": "30",
															"id": 2032,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2034,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2036,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:16"
											},
											{
												"expression": {
													"id": 2041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2037,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "2223:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2039,
														"indexExpression": {
															"hexValue": "31",
															"id": 2038,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 2040,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:16",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2042,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:16"
											},
											{
												"body": {
													"id": 2071,
													"nodeType": "Block",
													"src": "2293:95:16",
													"statements": [
														{
															"expression": {
																"id": 2065,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2057,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2021,
																		"src": "2307:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2059,
																	"indexExpression": {
																		"id": 2058,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2044,
																		"src": "2314:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 2060,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1902,
																		"src": "2319:10:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 2064,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2061,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2017,
																			"src": "2330:10:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 2062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 2066,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:16"
														},
														{
															"expression": {
																"id": 2069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2067,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2017,
																	"src": "2361:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2070,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:16"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2051,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2044,
														"src": "2281:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2052,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2072,
												"initializationExpression": {
													"assignments": [
														2044
													],
													"declarations": [
														{
															"constant": false,
															"id": 2044,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:16",
															"nodeType": "VariableDeclaration",
															"scope": 2072,
															"src": "2253:9:16",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2043,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2050,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2047,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 2045,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2046,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2011,
																"src": "2269:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2048,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:16"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 2055,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:16",
														"subExpression": {
															"id": 2054,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2044,
															"src": "2290:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2056,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:16"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2075,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2073,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2017,
														"src": "2401:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2074,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2082,
												"nodeType": "IfStatement",
												"src": "2397:96:16",
												"trueBody": {
													"id": 2081,
													"nodeType": "Block",
													"src": "2418:75:16",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 2077,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2009,
																		"src": "2468:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2078,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2011,
																		"src": "2475:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2076,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1912,
																	"src": "2439:28:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 2079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2080,
															"nodeType": "RevertStatement",
															"src": "2432:50:16"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2085,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "2516:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2084,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2083,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:16",
															"typeDescriptions": {}
														}
													},
													"id": 2086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2015,
												"id": 2087,
												"nodeType": "Return",
												"src": "2502:21:16"
											}
										]
									},
									"documentation": {
										"id": 2007,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:16",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 2089,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2009,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2089,
												"src": "2026:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2011,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2089,
												"src": "2041:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:16"
									},
									"returnParameters": {
										"id": 2015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2014,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2089,
												"src": "2080:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2013,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:16"
									},
									"scope": 2147,
									"src": "2005:525:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2108,
										"nodeType": "Block",
										"src": "2762:75:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2102,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2092,
																			"src": "2807:4:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2100,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2098,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2104,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2105,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1905,
															"src": "2815:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2097,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2006,
															2089,
															2109
														],
														"referencedDeclaration": 2089,
														"src": "2779:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2096,
												"id": 2107,
												"nodeType": "Return",
												"src": "2772:58:16"
											}
										]
									},
									"documentation": {
										"id": 2090,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:16",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 2109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2092,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2109,
												"src": "2710:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2091,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:16"
									},
									"returnParameters": {
										"id": 2096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2109,
												"src": "2747:13:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2094,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:16"
									},
									"scope": 2147,
									"src": "2689:148:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2145,
										"nodeType": "Block",
										"src": "2992:104:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2129,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2121,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2112,
																		"src": "3015:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2119,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2122,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:16",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2126,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2114,
																		"src": "3034:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2124,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:16",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 2142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2133,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2112,
																			"src": "3063:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2132,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2131,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2130,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2139,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2114,
																			"src": "3086:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2137,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2140,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2136,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2141,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2118,
												"id": 2144,
												"nodeType": "Return",
												"src": "3002:87:16"
											}
										]
									},
									"documentation": {
										"id": 2110,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:16",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 2146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2146,
												"src": "2929:15:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2111,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2146,
												"src": "2946:15:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2113,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:16"
									},
									"returnParameters": {
										"id": 2118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2146,
												"src": "2986:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2116,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:16"
									},
									"scope": 2147,
									"src": "2914:182:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2148,
							"src": "251:2847:16",
							"usedErrors": [
								1912
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2495
						]
					},
					"id": 2496,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2150,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:17",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2495,
							"linearizedBaseContracts": [
								2495
							],
							"name": "ECDSA",
							"nameLocation": "352:5:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 2155,
									"members": [
										{
											"id": 2151,
											"name": "NoError",
											"nameLocation": "392:7:17",
											"nodeType": "EnumValue",
											"src": "392:7:17"
										},
										{
											"id": 2152,
											"name": "InvalidSignature",
											"nameLocation": "409:16:17",
											"nodeType": "EnumValue",
											"src": "409:16:17"
										},
										{
											"id": 2153,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:17",
											"nodeType": "EnumValue",
											"src": "435:22:17"
										},
										{
											"id": 2154,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:17",
											"nodeType": "EnumValue",
											"src": "467:17:17"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:17",
									"nodeType": "EnumDefinition",
									"src": "364:126:17"
								},
								{
									"documentation": {
										"id": 2156,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:17",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 2158,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:17"
									},
									"src": "564:30:17"
								},
								{
									"documentation": {
										"id": 2159,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:17",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 2163,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2161,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2163,
												"src": "699:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:17"
									},
									"src": "665:50:17"
								},
								{
									"documentation": {
										"id": 2164,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:17",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 2168,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2166,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2168,
												"src": "840:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2165,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:17"
									},
									"src": "811:40:17"
								},
								{
									"body": {
										"id": 2220,
										"nodeType": "Block",
										"src": "2242:653:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2183,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2173,
															"src": "2256:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:17",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 2185,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2218,
													"nodeType": "Block",
													"src": "2781:108:17",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2207,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2206,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2205,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2209,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2155,
																			"src": "2815:12:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:17",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2153,
																		"src": "2815:35:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2155",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 2213,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2173,
																					"src": "2860:9:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2214,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:17",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2211,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2216,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2182,
															"id": 2217,
															"nodeType": "Return",
															"src": "2795:83:17"
														}
													]
												},
												"id": 2219,
												"nodeType": "IfStatement",
												"src": "2252:637:17",
												"trueBody": {
													"id": 2204,
													"nodeType": "Block",
													"src": "2280:495:17",
													"statements": [
														{
															"assignments": [
																2188
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2188,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:17",
																	"nodeType": "VariableDeclaration",
																	"scope": 2204,
																	"src": "2294:9:17",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2187,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2189,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:17"
														},
														{
															"assignments": [
																2191
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2191,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:17",
																	"nodeType": "VariableDeclaration",
																	"scope": 2204,
																	"src": "2317:9:17",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2190,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2192,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:17"
														},
														{
															"assignments": [
																2194
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2194,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:17",
																	"nodeType": "VariableDeclaration",
																	"scope": 2204,
																	"src": "2340:7:17",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 2193,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2195,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:17"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:17",
																"nodeType": "YulBlock",
																"src": "2548:171:17",
																"statements": [
																	{
																		"nativeSrc": "2566:32:17",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:17",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:17",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:17"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:17",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:17",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:17",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:17"
																					},
																					"nativeSrc": "2577:20:17",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:17"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:17"
																			},
																			"nativeSrc": "2571:27:17",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:17"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:17"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:17",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:17",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:17",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:17"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:17",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:17",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:17",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:17"
																					},
																					"nativeSrc": "2626:20:17",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:17"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:17"
																			},
																			"nativeSrc": "2620:27:17",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:17"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:17"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:17",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:17",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:17",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:17",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:17",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:17"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:17",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:17",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:17",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:17"
																							},
																							"nativeSrc": "2683:20:17",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:17"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:17"
																					},
																					"nativeSrc": "2677:27:17",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:17"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:17",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:17"
																			},
																			"nativeSrc": "2669:36:17",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:17"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:17"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 2188,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:17",
																	"valueSize": 1
																},
																{
																	"declaration": 2191,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:17",
																	"valueSize": 1
																},
																{
																	"declaration": 2173,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:17",
																	"valueSize": 1
																},
																{
																	"declaration": 2173,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:17",
																	"valueSize": 1
																},
																{
																	"declaration": 2173,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:17",
																	"valueSize": 1
																},
																{
																	"declaration": 2194,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:17",
																	"valueSize": 1
																}
															],
															"id": 2196,
															"nodeType": "InlineAssembly",
															"src": "2539:180:17"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2198,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2171,
																		"src": "2750:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2199,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2194,
																		"src": "2756:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 2200,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2188,
																		"src": "2759:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2201,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2191,
																		"src": "2762:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2197,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		2221,
																		2301,
																		2409
																	],
																	"referencedDeclaration": 2409,
																	"src": "2739:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 2202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2182,
															"id": 2203,
															"nodeType": "Return",
															"src": "2732:32:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2169,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:17",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 2221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2171,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "2149:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2170,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2173,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "2163:22:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:17"
									},
									"returnParameters": {
										"id": 2182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "2210:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "2219:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2155",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2178,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2177,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2155,
														"src": "2219:12:17"
													},
													"referencedDeclaration": 2155,
													"src": "2219:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2155",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2181,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2221,
												"src": "2233:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2180,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:17"
									},
									"scope": 2495,
									"src": "2129:766:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2250,
										"nodeType": "Block",
										"src": "3789:168:17",
										"statements": [
											{
												"assignments": [
													2232,
													2235,
													2237
												],
												"declarations": [
													{
														"constant": false,
														"id": 2232,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:17",
														"nodeType": "VariableDeclaration",
														"scope": 2250,
														"src": "3800:17:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2231,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:17",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2235,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:17",
														"nodeType": "VariableDeclaration",
														"scope": 2250,
														"src": "3819:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2234,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2233,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:17"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2155,
																"src": "3819:12:17"
															},
															"referencedDeclaration": 2155,
															"src": "3819:12:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2237,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:17",
														"nodeType": "VariableDeclaration",
														"scope": 2250,
														"src": "3839:16:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2236,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2242,
												"initialValue": {
													"arguments": [
														{
															"id": 2239,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2224,
															"src": "3870:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2240,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2226,
															"src": "3876:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2238,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2221,
															2301,
															2409
														],
														"referencedDeclaration": 2221,
														"src": "3859:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2244,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2235,
															"src": "3908:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2245,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2237,
															"src": "3915:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2243,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2494,
														"src": "3896:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2155_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2247,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:17"
											},
											{
												"expression": {
													"id": 2248,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2232,
													"src": "3941:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2230,
												"id": 2249,
												"nodeType": "Return",
												"src": "3934:16:17"
											}
										]
									},
									"documentation": {
										"id": 2222,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:17",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 2251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "3719:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2223,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "3733:22:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2225,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:17"
									},
									"returnParameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2251,
												"src": "3780:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:17"
									},
									"scope": 2495,
									"src": "3702:255:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2300,
										"nodeType": "Block",
										"src": "4285:342:17",
										"statements": [
											{
												"id": 2299,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:17",
												"statements": [
													{
														"assignments": [
															2269
														],
														"declarations": [
															{
																"constant": false,
																"id": 2269,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2299,
																"src": "4319:9:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2268,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2276,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2270,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2258,
																"src": "4331:2:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 2273,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 2272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2271,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2274,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:17"
													},
													{
														"assignments": [
															2278
														],
														"declarations": [
															{
																"constant": false,
																"id": 2278,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2299,
																"src": "4522:7:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 2277,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2291,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2289,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2286,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 2283,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2258,
																							"src": "4547:2:17",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 2282,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2281,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:17",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2284,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:17",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 2285,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2287,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 2288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2280,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2279,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:17"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2293,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2254,
																	"src": "4596:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2294,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2278,
																	"src": "4602:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 2295,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2256,
																	"src": "4605:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2296,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2269,
																	"src": "4608:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 2292,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2221,
																	2301,
																	2409
																],
																"referencedDeclaration": 2409,
																"src": "4585:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 2297,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 2267,
														"id": 2298,
														"nodeType": "Return",
														"src": "4578:32:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2252,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:17",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 2301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2254,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4193:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2253,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2256,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4207:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2255,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2258,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4218:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2257,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:17"
									},
									"returnParameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4253:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4262:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2155",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2263,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2262,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2155,
														"src": "4262:12:17"
													},
													"referencedDeclaration": 2155,
													"src": "4262:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2155",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2301,
												"src": "4276:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2265,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:17"
									},
									"scope": 2495,
									"src": "4173:454:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2333,
										"nodeType": "Block",
										"src": "4840:164:17",
										"statements": [
											{
												"assignments": [
													2314,
													2317,
													2319
												],
												"declarations": [
													{
														"constant": false,
														"id": 2314,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:17",
														"nodeType": "VariableDeclaration",
														"scope": 2333,
														"src": "4851:17:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2313,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:17",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2317,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:17",
														"nodeType": "VariableDeclaration",
														"scope": 2333,
														"src": "4870:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2316,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2315,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:17"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2155,
																"src": "4870:12:17"
															},
															"referencedDeclaration": 2155,
															"src": "4870:12:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2319,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:17",
														"nodeType": "VariableDeclaration",
														"scope": 2333,
														"src": "4890:16:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2318,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2325,
												"initialValue": {
													"arguments": [
														{
															"id": 2321,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2304,
															"src": "4921:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2322,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2306,
															"src": "4927:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2323,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2308,
															"src": "4930:2:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2320,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2221,
															2301,
															2409
														],
														"referencedDeclaration": 2301,
														"src": "4910:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2327,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2317,
															"src": "4955:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2328,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2319,
															"src": "4962:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2326,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2494,
														"src": "4943:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2155_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2330,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:17"
											},
											{
												"expression": {
													"id": 2331,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2314,
													"src": "4988:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2312,
												"id": 2332,
												"nodeType": "Return",
												"src": "4981:16:17"
											}
										]
									},
									"documentation": {
										"id": 2302,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:17",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 2334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "4771:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2303,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "4785:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2305,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2308,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:17",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "4796:10:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2307,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:17"
									},
									"returnParameters": {
										"id": 2312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2334,
												"src": "4831:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:17"
									},
									"scope": 2495,
									"src": "4754:250:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2408,
										"nodeType": "Block",
										"src": "5298:1372:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2355,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2343,
																"src": "6194:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2354,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2353,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2356,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2357,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2369,
												"nodeType": "IfStatement",
												"src": "6182:164:17",
												"trueBody": {
													"id": 2368,
													"nodeType": "Block",
													"src": "6267:79:17",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2361,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2359,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2363,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2155,
																			"src": "6301:12:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2364,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:17",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2154,
																		"src": "6301:30:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2155",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2365,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2343,
																		"src": "6333:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2366,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2352,
															"id": 2367,
															"nodeType": "Return",
															"src": "6281:54:17"
														}
													]
												}
											},
											{
												"assignments": [
													2371
												],
												"declarations": [
													{
														"constant": false,
														"id": 2371,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 2408,
														"src": "6440:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2370,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:17",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2378,
												"initialValue": {
													"arguments": [
														{
															"id": 2373,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2337,
															"src": "6467:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2374,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "6473:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2375,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2341,
															"src": "6476:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2376,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "6479:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2372,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2379,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2371,
														"src": "6495:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2382,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2381,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2380,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2383,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2398,
												"nodeType": "IfStatement",
												"src": "6491:113:17",
												"trueBody": {
													"id": 2397,
													"nodeType": "Block",
													"src": "6517:87:17",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2387,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2386,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2385,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2388,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2389,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2155,
																			"src": "6551:12:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:17",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2152,
																		"src": "6551:29:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2155",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2393,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2391,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:17",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2394,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2395,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2352,
															"id": 2396,
															"nodeType": "Return",
															"src": "6531:62:17"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2399,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2371,
															"src": "6622:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2400,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2155,
																"src": "6630:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2401,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:17",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2151,
															"src": "6630:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2403,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2402,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2406,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:17",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2352,
												"id": 2407,
												"nodeType": "Return",
												"src": "6614:49:17"
											}
										]
									},
									"documentation": {
										"id": 2335,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:17",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5169:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2336,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5191:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2338,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2341,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5208:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2340,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2343,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5227:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2342,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:17"
									},
									"returnParameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2346,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5266:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5275:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2155",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2348,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2347,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2155,
														"src": "5275:12:17"
													},
													"referencedDeclaration": 2155,
													"src": "5275:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2155",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2409,
												"src": "5289:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2350,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:17"
									},
									"scope": 2495,
									"src": "5140:1530:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2444,
										"nodeType": "Block",
										"src": "6897:166:17",
										"statements": [
											{
												"assignments": [
													2424,
													2427,
													2429
												],
												"declarations": [
													{
														"constant": false,
														"id": 2424,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:17",
														"nodeType": "VariableDeclaration",
														"scope": 2444,
														"src": "6908:17:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2423,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:17",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2427,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:17",
														"nodeType": "VariableDeclaration",
														"scope": 2444,
														"src": "6927:18:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2426,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2425,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:17"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2155,
																"src": "6927:12:17"
															},
															"referencedDeclaration": 2155,
															"src": "6927:12:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2429,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:17",
														"nodeType": "VariableDeclaration",
														"scope": 2444,
														"src": "6947:16:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2428,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2436,
												"initialValue": {
													"arguments": [
														{
															"id": 2431,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2412,
															"src": "6978:4:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2432,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2414,
															"src": "6984:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2433,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2416,
															"src": "6987:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2434,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2418,
															"src": "6990:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2430,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2221,
															2301,
															2409
														],
														"referencedDeclaration": 2409,
														"src": "6967:10:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2155_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:17"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2438,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2427,
															"src": "7014:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2439,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2429,
															"src": "7021:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2437,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2494,
														"src": "7002:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2155_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2441,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:17"
											},
											{
												"expression": {
													"id": 2442,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2424,
													"src": "7047:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2422,
												"id": 2443,
												"nodeType": "Return",
												"src": "7040:16:17"
											}
										]
									},
									"documentation": {
										"id": 2410,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:17",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "6820:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2411,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2414,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "6834:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2413,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2416,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "6843:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2415,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "6854:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2417,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:17"
									},
									"returnParameters": {
										"id": 2422,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2421,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2445,
												"src": "6888:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2420,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:17"
									},
									"scope": 2495,
									"src": "6803:260:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2493,
										"nodeType": "Block",
										"src": "7268:460:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$2155",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2454,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2449,
														"src": "7282:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2455,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "7291:12:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2456,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:17",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2151,
														"src": "7291:20:17",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$2155",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2460,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2449,
															"src": "7378:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2461,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2155,
																"src": "7387:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2462,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:17",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2152,
															"src": "7387:29:17",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$2155",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2468,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2449,
																"src": "7483:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2155",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2469,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2155,
																	"src": "7492:12:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2470,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:17",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2153,
																"src": "7492:35:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2155",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$2155",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2480,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2449,
																	"src": "7617:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2155",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2481,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2155,
																		"src": "7626:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$2155_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:17",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2154,
																	"src": "7626:30:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2155",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2489,
															"nodeType": "IfStatement",
															"src": "7613:109:17",
															"trueBody": {
																"id": 2488,
																"nodeType": "Block",
																"src": "7658:64:17",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2485,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2451,
																					"src": "7702:8:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2484,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2168,
																				"src": "7679:22:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 2486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:17",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2487,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:17"
																	}
																]
															}
														},
														"id": 2490,
														"nodeType": "IfStatement",
														"src": "7479:243:17",
														"trueBody": {
															"id": 2479,
															"nodeType": "Block",
															"src": "7529:78:17",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2475,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2451,
																						"src": "7586:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2474,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2473,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:17",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2476,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2472,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2163,
																			"src": "7550:27:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 2477,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2478,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:17"
																}
															]
														}
													},
													"id": 2491,
													"nodeType": "IfStatement",
													"src": "7374:348:17",
													"trueBody": {
														"id": 2467,
														"nodeType": "Block",
														"src": "7418:55:17",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2464,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2158,
																		"src": "7439:21:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 2465,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 2466,
																"nodeType": "RevertStatement",
																"src": "7432:30:17"
															}
														]
													}
												},
												"id": 2492,
												"nodeType": "IfStatement",
												"src": "7278:444:17",
												"trueBody": {
													"id": 2459,
													"nodeType": "Block",
													"src": "7313:55:17",
													"statements": [
														{
															"functionReturnParameters": 2453,
															"id": 2458,
															"nodeType": "Return",
															"src": "7327:7:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2446,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:17",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2449,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 2494,
												"src": "7217:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2155",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2448,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2447,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2155,
														"src": "7217:12:17"
													},
													"referencedDeclaration": 2155,
													"src": "7217:12:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2155",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2451,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2494,
												"src": "7237:16:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2450,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:17"
									},
									"returnParameters": {
										"id": 2453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:17"
									},
									"scope": 2495,
									"src": "7196:532:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2496,
							"src": "344:7386:17",
							"usedErrors": [
								2158,
								2163,
								2168
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2722
						],
						"IERC5267": [
							231
						],
						"MessageHashUtils": [
							2796
						],
						"ShortString": [
							1571
						],
						"ShortStrings": [
							1782
						]
					},
					"id": 2723,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2497,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2499,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2723,
							"sourceUnit": 2797,
							"src": "139:56:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2498,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2796,
										"src": "147:16:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2502,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2723,
							"sourceUnit": 1783,
							"src": "196:62:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2500,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1782,
										"src": "204:12:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2501,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1571,
										"src": "218:11:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2504,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2723,
							"sourceUnit": 232,
							"src": "259:55:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2503,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 231,
										"src": "267:8:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2506,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 231,
										"src": "1988:8:18"
									},
									"id": 2507,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:18"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2505,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:18",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2722,
							"linearizedBaseContracts": [
								2722,
								231
							],
							"name": "EIP712",
							"nameLocation": "1978:6:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2509,
									"libraryName": {
										"id": 2508,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1782,
										"src": "2009:12:18"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:18"
								},
								{
									"constant": true,
									"id": 2514,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2034:140:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2510,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2512,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:18",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2511,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:18",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2513,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:18",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2516,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2373:48:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2515,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2518,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2427:40:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2517,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2520,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2473:37:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2519,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:18",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2522,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2517:37:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2521,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2524,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2560:40:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2523,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:18",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2527,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2607:35:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2526,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2525,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1571,
											"src": "2607:11:18"
										},
										"referencedDeclaration": 1571,
										"src": "2607:11:18",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2530,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2648:38:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2529,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2528,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1571,
											"src": "2648:11:18"
										},
										"referencedDeclaration": 1571,
										"src": "2648:11:18",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2532,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2692:28:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2531,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:18",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2534,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:18",
									"nodeType": "VariableDeclaration",
									"scope": 2722,
									"src": "2726:31:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2533,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:18",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2591,
										"nodeType": "Block",
										"src": "3383:376:18",
										"statements": [
											{
												"expression": {
													"id": 2547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2542,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2527,
														"src": "3393:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2545,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "3432:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2543,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2537,
																"src": "3401:4:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:18",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1723,
															"src": "3401:30:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1571_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2546,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:18",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"id": 2548,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:18"
											},
											{
												"expression": {
													"id": 2554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2549,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2530,
														"src": "3456:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2552,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2534,
																"src": "3501:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2550,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2539,
																"src": "3467:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:18",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1723,
															"src": "3467:33:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1571_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2553,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:18",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
														"typeString": "ShortString"
													}
												},
												"id": 2555,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:18"
											},
											{
												"expression": {
													"id": 2563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2556,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2522,
														"src": "3528:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2560,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2537,
																		"src": "3558:4:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2558,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2557,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2562,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2564,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:18"
											},
											{
												"expression": {
													"id": 2572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2565,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2524,
														"src": "3574:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2569,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2539,
																		"src": "3607:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2567,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2570,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2566,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2571,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2573,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:18"
											},
											{
												"expression": {
													"id": 2577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2574,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2518,
														"src": "3627:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2575,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2576,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:18",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2578,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:18"
											},
											{
												"expression": {
													"id": 2582,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2579,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2516,
														"src": "3667:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2580,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2639,
															"src": "3692:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2581,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2583,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:18"
											},
											{
												"expression": {
													"id": 2589,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2584,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2520,
														"src": "3725:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2587,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2722",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2722",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2586,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2585,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:18",
																"typeDescriptions": {}
															}
														},
														"id": 2588,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:18",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2590,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:18"
											}
										]
									},
									"documentation": {
										"id": 2535,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:18",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2592,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2537,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2592,
												"src": "3340:18:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2536,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2539,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2592,
												"src": "3360:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2538,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:18"
									},
									"returnParameters": {
										"id": 2541,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:18"
									},
									"scope": 2722,
									"src": "3328:431:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2617,
										"nodeType": "Block",
										"src": "3907:200:18",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2603,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2600,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2722",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2722",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2599,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2598,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2602,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2520,
															"src": "3938:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2607,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2604,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2605,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:18",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2606,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2518,
															"src": "3970:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2615,
													"nodeType": "Block",
													"src": "4046:55:18",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2612,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2639,
																	"src": "4067:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2613,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2597,
															"id": 2614,
															"nodeType": "Return",
															"src": "4060:30:18"
														}
													]
												},
												"id": 2616,
												"nodeType": "IfStatement",
												"src": "3917:184:18",
												"trueBody": {
													"id": 2611,
													"nodeType": "Block",
													"src": "3986:54:18",
													"statements": [
														{
															"expression": {
																"id": 2609,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2516,
																"src": "4007:22:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2597,
															"id": 2610,
															"nodeType": "Return",
															"src": "4000:29:18"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2593,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:18",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2618,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2594,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:18"
									},
									"returnParameters": {
										"id": 2597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2618,
												"src": "3898:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2595,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:18"
									},
									"scope": 2722,
									"src": "3845:262:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2638,
										"nodeType": "Block",
										"src": "4177:115:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2626,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2514,
																	"src": "4215:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2627,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2522,
																	"src": "4226:11:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2628,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2524,
																	"src": "4239:14:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2629,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:18",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2633,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2722",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2722",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2631,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2624,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2625,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:18",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2635,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2623,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2622,
												"id": 2637,
												"nodeType": "Return",
												"src": "4187:98:18"
											}
										]
									},
									"id": 2639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:18"
									},
									"returnParameters": {
										"id": 2622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2639,
												"src": "4168:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2620,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:18"
									},
									"scope": 2722,
									"src": "4113:179:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2654,
										"nodeType": "Block",
										"src": "5003:90:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2649,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2618,
																"src": "5053:18:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2650,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2651,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2642,
															"src": "5075:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2647,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2796,
															"src": "5020:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2796_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2648,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:18",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2795,
														"src": "5020:32:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2646,
												"id": 2653,
												"nodeType": "Return",
												"src": "5013:73:18"
											}
										]
									},
									"documentation": {
										"id": 2640,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:18",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2642,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2655,
												"src": "4943:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2641,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:18"
									},
									"returnParameters": {
										"id": 2646,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2645,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2655,
												"src": "4994:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2644,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:18"
									},
									"scope": 2722,
									"src": "4917:176:18",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										230
									],
									"body": {
										"id": 2696,
										"nodeType": "Block",
										"src": "5472:229:18",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2675,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2709,
																"src": "5533:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2677,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2721,
																"src": "5560:14:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2679,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2680,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:18",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2683,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2722",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2722",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2682,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2681,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2685,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 2688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2692,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2691,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2689,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2690,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2693,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2694,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:18",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2673,
												"id": 2695,
												"nodeType": "Return",
												"src": "5482:212:18"
											}
										]
									},
									"documentation": {
										"id": 2656,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:18",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:18"
									},
									"returnParameters": {
										"id": 2673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5242:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2658,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2661,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5269:18:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2660,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2663,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5301:21:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2662,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2665,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5336:15:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2667,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5365:25:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2669,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5404:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2668,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2672,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2697,
												"src": "5430:27:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2670,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2671,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:18"
									},
									"scope": 2722,
									"src": "5144:557:18",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2708,
										"nodeType": "Block",
										"src": "6082:65:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2705,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2532,
															"src": "6126:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2703,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2527,
															"src": "6099:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																"typeString": "ShortString"
															}
														},
														"id": 2704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:18",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1750,
														"src": "6099:26:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1571_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1571_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2702,
												"id": 2707,
												"nodeType": "Return",
												"src": "6092:48:18"
											}
										]
									},
									"documentation": {
										"id": 2698,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:18",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2699,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:18"
									},
									"returnParameters": {
										"id": 2702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "6067:13:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2700,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:18"
									},
									"scope": 2722,
									"src": "6021:126:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2720,
										"nodeType": "Block",
										"src": "6537:71:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2717,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2534,
															"src": "6584:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2715,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2530,
															"src": "6554:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1571",
																"typeString": "ShortString"
															}
														},
														"id": 2716,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:18",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1750,
														"src": "6554:29:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1571_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1571_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2714,
												"id": 2719,
												"nodeType": "Return",
												"src": "6547:54:18"
											}
										]
									},
									"documentation": {
										"id": 2710,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:18",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2721,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2711,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:18"
									},
									"returnParameters": {
										"id": 2714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2713,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "6522:13:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2712,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:18"
									},
									"scope": 2722,
									"src": "6473:135:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2723,
							"src": "1960:4650:18",
							"usedErrors": [
								1579,
								1581
							],
							"usedEvents": [
								211
							]
						}
					],
					"src": "113:6498:18"
				},
				"id": 18
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2796
						],
						"Strings": [
							2147
						]
					},
					"id": 2797,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2724,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2726,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2797,
							"sourceUnit": 2148,
							"src": "149:39:19",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2725,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2147,
										"src": "157:7:19",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2727,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:19",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2796,
							"linearizedBaseContracts": [
								2796
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2736,
										"nodeType": "Block",
										"src": "1314:368:19",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1376:300:19",
													"nodeType": "YulBlock",
													"src": "1376:300:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1397:4:19",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:19",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1403:34:19",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:19",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1390:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:19"
																},
																"nativeSrc": "1390:48:19",
																"nodeType": "YulFunctionCall",
																"src": "1390:48:19"
															},
															"nativeSrc": "1390:48:19",
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1499:4:19",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:19",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1505:11:19",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1492:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:19"
																},
																"nativeSrc": "1492:25:19",
																"nodeType": "YulFunctionCall",
																"src": "1492:25:19"
															},
															"nativeSrc": "1492:25:19",
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:19"
														},
														{
															"nativeSrc": "1571:31:19",
															"nodeType": "YulAssignment",
															"src": "1571:31:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1591:4:19",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:19",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1597:4:19",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:19",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1581:9:19",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:19"
																},
																"nativeSrc": "1581:21:19",
																"nodeType": "YulFunctionCall",
																"src": "1581:21:19"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1571:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:19"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2733,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:19",
														"valueSize": 1
													},
													{
														"declaration": 2730,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:19",
														"valueSize": 1
													}
												],
												"id": 2735,
												"nodeType": "InlineAssembly",
												"src": "1367:309:19"
											}
										]
									},
									"documentation": {
										"id": 2728,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:19",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2737,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2730,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "1254:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2729,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:19"
									},
									"returnParameters": {
										"id": 2734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2733,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 2737,
												"src": "1298:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2732,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:19"
									},
									"scope": 2796,
									"src": "1222:460:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2762,
										"nodeType": "Block",
										"src": "2234:143:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2749,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2754,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2740,
																						"src": "2343:7:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2755,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:19",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2752,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2147,
																					"src": "2326:7:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$2147_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2753,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:19",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1960,
																				"src": "2326:16:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2756,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:19",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2751,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2750,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:19",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2757,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2758,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2740,
																	"src": "2361:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2747,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2746,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:19",
																		"typeDescriptions": {}
																	}
																},
																"id": 2748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:19",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2745,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2744,
												"id": 2761,
												"nodeType": "Return",
												"src": "2244:126:19"
											}
										]
									},
									"documentation": {
										"id": 2738,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:19",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2763,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2740,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:19",
												"nodeType": "VariableDeclaration",
												"scope": 2763,
												"src": "2180:20:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2739,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:19"
									},
									"returnParameters": {
										"id": 2744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2743,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2763,
												"src": "2225:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2742,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:19"
									},
									"scope": 2796,
									"src": "2148:229:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2782,
										"nodeType": "Block",
										"src": "2831:80:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2777,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2766,
																	"src": "2887:9:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2778,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2768,
																	"src": "2898:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2774,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:19",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2773,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2772,
												"id": 2781,
												"nodeType": "Return",
												"src": "2841:63:19"
											}
										]
									},
									"documentation": {
										"id": 2764,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:19",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2766,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 2783,
												"src": "2761:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2768,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 2783,
												"src": "2780:17:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2767,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:19"
									},
									"returnParameters": {
										"id": 2772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2771,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2783,
												"src": "2822:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2770,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:19"
									},
									"scope": 2796,
									"src": "2720:191:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2794,
										"nodeType": "Block",
										"src": "3462:292:19",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3524:224:19",
													"nodeType": "YulBlock",
													"src": "3524:224:19",
													"statements": [
														{
															"nativeSrc": "3538:22:19",
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:19",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3555:4:19",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:19",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3549:5:19",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:19"
																},
																"nativeSrc": "3549:11:19",
																"nodeType": "YulFunctionCall",
																"src": "3549:11:19"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3542:3:19",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:19",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3580:3:19",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:19"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3585:10:19",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:19",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3573:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:19"
																},
																"nativeSrc": "3573:23:19",
																"nodeType": "YulFunctionCall",
																"src": "3573:23:19"
															},
															"nativeSrc": "3573:23:19",
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3620:3:19",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:19"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:4:19",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:19",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3616:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:19"
																		},
																		"nativeSrc": "3616:14:19",
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:19"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3632:15:19",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3609:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:19"
																},
																"nativeSrc": "3609:39:19",
																"nodeType": "YulFunctionCall",
																"src": "3609:39:19"
															},
															"nativeSrc": "3609:39:19",
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:19"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3672:3:19",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:19"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3677:4:19",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:19",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3668:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:19"
																		},
																		"nativeSrc": "3668:14:19",
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:19"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3684:10:19",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:19"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3661:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:19"
																},
																"nativeSrc": "3661:34:19",
																"nodeType": "YulFunctionCall",
																"src": "3661:34:19"
															},
															"nativeSrc": "3661:34:19",
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:19"
														},
														{
															"nativeSrc": "3708:30:19",
															"nodeType": "YulAssignment",
															"src": "3708:30:19",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3728:3:19",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:19"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3733:4:19",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:19",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3718:9:19",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:19"
																},
																"nativeSrc": "3718:20:19",
																"nodeType": "YulFunctionCall",
																"src": "3718:20:19"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3708:6:19",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:19"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 2791,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:19",
														"valueSize": 1
													},
													{
														"declaration": 2786,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:19",
														"valueSize": 1
													},
													{
														"declaration": 2788,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:19",
														"valueSize": 1
													}
												],
												"id": 2793,
												"nodeType": "InlineAssembly",
												"src": "3515:233:19"
											}
										]
									},
									"documentation": {
										"id": 2784,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:19",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2795,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2789,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2786,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:19",
												"nodeType": "VariableDeclaration",
												"scope": 2795,
												"src": "3378:23:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2785,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2788,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 2795,
												"src": "3403:18:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2787,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:19"
									},
									"returnParameters": {
										"id": 2792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 2795,
												"src": "3446:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2790,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:19"
									},
									"scope": 2796,
									"src": "3353:401:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2797,
							"src": "521:3235:19",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:19"
				},
				"id": 19
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3850
						]
					},
					"id": 3851,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2798,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2799,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:20",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3850,
							"linearizedBaseContracts": [
								3850
							],
							"name": "Math",
							"nameLocation": "211:4:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2800,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:20",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2802,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:20",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2801,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:20"
									},
									"src": "277:29:20"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2807,
									"members": [
										{
											"id": 2803,
											"name": "Floor",
											"nameLocation": "336:5:20",
											"nodeType": "EnumValue",
											"src": "336:5:20"
										},
										{
											"id": 2804,
											"name": "Ceil",
											"nameLocation": "379:4:20",
											"nodeType": "EnumValue",
											"src": "379:4:20"
										},
										{
											"id": 2805,
											"name": "Trunc",
											"nameLocation": "421:5:20",
											"nodeType": "EnumValue",
											"src": "421:5:20"
										},
										{
											"id": 2806,
											"name": "Expand",
											"nameLocation": "451:6:20",
											"nodeType": "EnumValue",
											"src": "451:6:20"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:20",
									"nodeType": "EnumDefinition",
									"src": "312:169:20"
								},
								{
									"body": {
										"id": 2838,
										"nodeType": "Block",
										"src": "661:140:20",
										"statements": [
											{
												"id": 2837,
												"nodeType": "UncheckedBlock",
												"src": "671:124:20",
												"statements": [
													{
														"assignments": [
															2820
														],
														"declarations": [
															{
																"constant": false,
																"id": 2820,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:20",
																"nodeType": "VariableDeclaration",
																"scope": 2837,
																"src": "695:9:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2819,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2824,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2821,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2810,
																"src": "707:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2822,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2812,
																"src": "711:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:20"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2827,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2825,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2820,
																"src": "730:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2826,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2810,
																"src": "734:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2832,
														"nodeType": "IfStatement",
														"src": "726:28:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2828,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2830,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2818,
															"id": 2831,
															"nodeType": "Return",
															"src": "737:17:20"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2834,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2820,
																	"src": "782:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2835,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:20",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2818,
														"id": 2836,
														"nodeType": "Return",
														"src": "768:16:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2808,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:20",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2839,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2810,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2839,
												"src": "601:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2809,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2812,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2839,
												"src": "612:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:20"
									},
									"returnParameters": {
										"id": 2818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2815,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2839,
												"src": "646:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2814,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2817,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2839,
												"src": "652:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2816,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:20"
									},
									"scope": 3850,
									"src": "585:216:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2866,
										"nodeType": "Block",
										"src": "984:113:20",
										"statements": [
											{
												"id": 2865,
												"nodeType": "UncheckedBlock",
												"src": "994:97:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2853,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2851,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2844,
																"src": "1022:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2852,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2842,
																"src": "1026:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2858,
														"nodeType": "IfStatement",
														"src": "1018:28:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2854,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2856,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2850,
															"id": 2857,
															"nodeType": "Return",
															"src": "1029:17:20"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2860,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2842,
																		"src": "1074:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2861,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2844,
																		"src": "1078:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2863,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:20",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2850,
														"id": 2864,
														"nodeType": "Return",
														"src": "1060:20:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2840,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:20",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2867,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2842,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "924:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2844,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "935:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:20"
									},
									"returnParameters": {
										"id": 2850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2847,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "969:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2846,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2867,
												"src": "975:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:20"
									},
									"scope": 3850,
									"src": "908:189:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2908,
										"nodeType": "Block",
										"src": "1283:417:20",
										"statements": [
											{
												"id": 2907,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2879,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2870,
																"src": "1551:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2880,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2886,
														"nodeType": "IfStatement",
														"src": "1547:28:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2883,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2884,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2878,
															"id": 2885,
															"nodeType": "Return",
															"src": "1559:16:20"
														}
													},
													{
														"assignments": [
															2888
														],
														"declarations": [
															{
																"constant": false,
																"id": 2888,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:20",
																"nodeType": "VariableDeclaration",
																"scope": 2907,
																"src": "1589:9:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2887,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2892,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2891,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2889,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2870,
																"src": "1601:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2890,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2872,
																"src": "1605:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:20"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2893,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2888,
																	"src": "1624:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2894,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2870,
																	"src": "1628:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2896,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2872,
																"src": "1633:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2902,
														"nodeType": "IfStatement",
														"src": "1620:33:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2898,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2899,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2900,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2878,
															"id": 2901,
															"nodeType": "Return",
															"src": "1636:17:20"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2903,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2904,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2888,
																	"src": "1681:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2905,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:20",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2878,
														"id": 2906,
														"nodeType": "Return",
														"src": "1667:16:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2868,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:20",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2873,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2870,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2909,
												"src": "1223:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2872,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2909,
												"src": "1234:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2871,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:20"
									},
									"returnParameters": {
										"id": 2878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2875,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2909,
												"src": "1268:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2874,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2909,
												"src": "1274:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:20"
									},
									"scope": 3850,
									"src": "1207:493:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2936,
										"nodeType": "Block",
										"src": "1887:114:20",
										"statements": [
											{
												"id": 2935,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2921,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2914,
																"src": "1925:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2928,
														"nodeType": "IfStatement",
														"src": "1921:29:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2926,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2920,
															"id": 2927,
															"nodeType": "Return",
															"src": "1933:17:20"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2929,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2930,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2912,
																		"src": "1978:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2931,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2914,
																		"src": "1982:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2933,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:20",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2920,
														"id": 2934,
														"nodeType": "Return",
														"src": "1964:20:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2910,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:20",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2915,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2912,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1827:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2914,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1838:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2913,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:20"
									},
									"returnParameters": {
										"id": 2920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2917,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1872:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2916,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2937,
												"src": "1878:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:20"
									},
									"scope": 3850,
									"src": "1811:190:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2964,
										"nodeType": "Block",
										"src": "2198:114:20",
										"statements": [
											{
												"id": 2963,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2951,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2949,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2942,
																"src": "2236:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2950,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2956,
														"nodeType": "IfStatement",
														"src": "2232:29:20",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2952,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2953,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2954,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2948,
															"id": 2955,
															"nodeType": "Return",
															"src": "2244:17:20"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2960,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2958,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2940,
																		"src": "2289:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2959,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2942,
																		"src": "2293:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2961,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:20",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2948,
														"id": 2962,
														"nodeType": "Return",
														"src": "2275:20:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2938,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:20",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2965,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2940,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "2138:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2942,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "2149:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:20"
									},
									"returnParameters": {
										"id": 2948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2945,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "2183:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2944,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2947,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2965,
												"src": "2189:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:20"
									},
									"scope": 3850,
									"src": "2122:190:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2982,
										"nodeType": "Block",
										"src": "2449:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2977,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2975,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2968,
															"src": "2466:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2976,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2970,
															"src": "2470:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2979,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2970,
														"src": "2478:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:20",
													"trueExpression": {
														"id": 2978,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2968,
														"src": "2474:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2974,
												"id": 2981,
												"nodeType": "Return",
												"src": "2459:20:20"
											}
										]
									},
									"documentation": {
										"id": 2966,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:20",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2968,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2983,
												"src": "2395:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2970,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 2983,
												"src": "2406:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:20"
									},
									"returnParameters": {
										"id": 2974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2973,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2983,
												"src": "2440:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:20"
									},
									"scope": 3850,
									"src": "2382:104:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3000,
										"nodeType": "Block",
										"src": "2624:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2995,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2993,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2986,
															"src": "2641:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2994,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2988,
															"src": "2645:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2997,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2988,
														"src": "2653:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:20",
													"trueExpression": {
														"id": 2996,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2986,
														"src": "2649:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2992,
												"id": 2999,
												"nodeType": "Return",
												"src": "2634:20:20"
											}
										]
									},
									"documentation": {
										"id": 2984,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:20",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 3001,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2986,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3001,
												"src": "2570:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2988,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3001,
												"src": "2581:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:20"
									},
									"returnParameters": {
										"id": 2992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2991,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3001,
												"src": "2615:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2990,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:20"
									},
									"scope": 3850,
									"src": "2557:104:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3023,
										"nodeType": "Block",
										"src": "2845:82:20",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3013,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3011,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3004,
																	"src": "2900:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3012,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3006,
																	"src": "2904:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3014,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3020,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3017,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3015,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3004,
																		"src": "2910:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 3016,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3006,
																		"src": "2914:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 3018,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 3019,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3010,
												"id": 3022,
												"nodeType": "Return",
												"src": "2892:28:20"
											}
										]
									},
									"documentation": {
										"id": 3002,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:20",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 3024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3004,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "2791:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3006,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "2802:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:20"
									},
									"returnParameters": {
										"id": 3010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3009,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "2836:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:20"
									},
									"scope": 3850,
									"src": "2774:153:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3057,
										"nodeType": "Block",
										"src": "3219:260:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3034,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3029,
														"src": "3233:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3035,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3042,
												"nodeType": "IfStatement",
												"src": "3229:127:20",
												"trueBody": {
													"id": 3041,
													"nodeType": "Block",
													"src": "3241:115:20",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3039,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3037,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3027,
																	"src": "3340:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 3038,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3029,
																	"src": "3344:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3033,
															"id": 3040,
															"nodeType": "Return",
															"src": "3333:12:20"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3045,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3043,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3027,
															"src": "3444:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 3044,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3054,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3049,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3047,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3027,
																			"src": "3458:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 3048,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3050,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 3051,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3029,
																"src": "3467:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 3053,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:20",
													"trueExpression": {
														"hexValue": "30",
														"id": 3046,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3033,
												"id": 3056,
												"nodeType": "Return",
												"src": "3437:35:20"
											}
										]
									},
									"documentation": {
										"id": 3025,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:20",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 3058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3027,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3058,
												"src": "3165:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3029,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3058,
												"src": "3176:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:20"
									},
									"returnParameters": {
										"id": 3033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3058,
												"src": "3210:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:20"
									},
									"scope": 3850,
									"src": "3148:331:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3183,
										"nodeType": "Block",
										"src": "3901:4018:20",
										"statements": [
											{
												"id": 3182,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:20",
												"statements": [
													{
														"assignments": [
															3071
														],
														"declarations": [
															{
																"constant": false,
																"id": 3071,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:20",
																"nodeType": "VariableDeclaration",
																"scope": 3182,
																"src": "4232:13:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3070,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3075,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3074,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3072,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3061,
																"src": "4248:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 3073,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3063,
																"src": "4252:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:20"
													},
													{
														"assignments": [
															3077
														],
														"declarations": [
															{
																"constant": false,
																"id": 3077,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:20",
																"nodeType": "VariableDeclaration",
																"scope": 3182,
																"src": "4312:13:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3076,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3078,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:20"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:20",
															"nodeType": "YulBlock",
															"src": "4392:122:20",
															"statements": [
																{
																	"nativeSrc": "4410:30:20",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:20"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:20",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:20",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:20"
																				},
																				"nativeSrc": "4433:6:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:20"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:20"
																		},
																		"nativeSrc": "4420:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:20"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:20",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:20",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:20",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:20"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:20"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:20"
																				},
																				"nativeSrc": "4470:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:20"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:20"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:20"
																				},
																				"nativeSrc": "4486:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:20"
																		},
																		"nativeSrc": "4466:34:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:20"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:20"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3077,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3061,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:20",
																"valueSize": 1
															},
															{
																"declaration": 3063,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:20",
																"valueSize": 1
															}
														],
														"id": 3079,
														"nodeType": "InlineAssembly",
														"src": "4383:131:20"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3080,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3077,
																"src": "4595:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 3081,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3088,
														"nodeType": "IfStatement",
														"src": "4591:368:20",
														"trueBody": {
															"id": 3087,
															"nodeType": "Block",
															"src": "4607:352:20",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3083,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3071,
																			"src": "4925:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 3084,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3065,
																			"src": "4933:11:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 3069,
																	"id": 3086,
																	"nodeType": "Return",
																	"src": "4918:26:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3091,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3089,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3065,
																"src": "5065:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 3090,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3077,
																"src": "5080:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3096,
														"nodeType": "IfStatement",
														"src": "5061:88:20",
														"trueBody": {
															"id": 3095,
															"nodeType": "Block",
															"src": "5087:62:20",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 3092,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2802,
																			"src": "5112:20:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 3093,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:20",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 3094,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:20"
																}
															]
														}
													},
													{
														"assignments": [
															3098
														],
														"declarations": [
															{
																"constant": false,
																"id": 3098,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:20",
																"nodeType": "VariableDeclaration",
																"scope": 3182,
																"src": "5404:17:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3097,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3099,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:20"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:20",
															"nodeType": "YulBlock",
															"src": "5444:291:20",
															"statements": [
																{
																	"nativeSrc": "5513:38:20",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:20"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:20"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:20",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:20"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:20"
																		},
																		"nativeSrc": "5526:25:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:20"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:20",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:20"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:20",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:20",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:20"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:20"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:20"
																				},
																				"nativeSrc": "5653:20:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:20"
																		},
																		"nativeSrc": "5642:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:20"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:20"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:20",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:20"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:20"
																		},
																		"nativeSrc": "5700:21:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:20"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:20"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 3065,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3077,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3077,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3098,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:20",
																"valueSize": 1
															},
															{
																"declaration": 3098,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:20",
																"valueSize": 1
															},
															{
																"declaration": 3098,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:20",
																"valueSize": 1
															},
															{
																"declaration": 3061,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:20",
																"valueSize": 1
															},
															{
																"declaration": 3063,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:20",
																"valueSize": 1
															}
														],
														"id": 3100,
														"nodeType": "InlineAssembly",
														"src": "5435:300:20"
													},
													{
														"assignments": [
															3102
														],
														"declarations": [
															{
																"constant": false,
																"id": 3102,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:20",
																"nodeType": "VariableDeclaration",
																"scope": 3182,
																"src": "5939:12:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3101,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3109,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3103,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3065,
																"src": "5954:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3106,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 3104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 3105,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3065,
																			"src": "5973:11:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3107,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:20"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:20",
															"nodeType": "YulBlock",
															"src": "6008:362:20",
															"statements": [
																{
																	"nativeSrc": "6073:37:20",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:20",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:20"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:20"
																		},
																		"nativeSrc": "6088:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:20"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:20",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:20"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:20",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:20",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:20"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:20"
																		},
																		"nativeSrc": "6186:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:20"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:20",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:20"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:20",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:20",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:20",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:20",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:20"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:20"
																						},
																						"nativeSrc": "6333:12:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:20"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:20"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:20"
																				},
																				"nativeSrc": "6329:23:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:20",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:20"
																		},
																		"nativeSrc": "6325:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:20"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:20",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:20"
																		}
																	]
																}
															]
														},
														"evmVersion": "london",
														"externalReferences": [
															{
																"declaration": 3065,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:20",
																"valueSize": 1
															},
															{
																"declaration": 3065,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3071,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:20",
																"valueSize": 1
															},
															{
																"declaration": 3102,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:20",
																"valueSize": 1
															},
															{
																"declaration": 3102,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:20",
																"valueSize": 1
															},
															{
																"declaration": 3102,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:20",
																"valueSize": 1
															},
															{
																"declaration": 3102,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:20",
																"valueSize": 1
															},
															{
																"declaration": 3102,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:20",
																"valueSize": 1
															}
														],
														"id": 3110,
														"nodeType": "InlineAssembly",
														"src": "5999:371:20"
													},
													{
														"expression": {
															"id": 3115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3111,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3071,
																"src": "6436:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3114,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3112,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3077,
																	"src": "6445:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3113,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3102,
																	"src": "6453:4:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3116,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:20"
													},
													{
														"assignments": [
															3118
														],
														"declarations": [
															{
																"constant": false,
																"id": 3118,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:20",
																"nodeType": "VariableDeclaration",
																"scope": 3182,
																"src": "6775:15:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3117,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3125,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3124,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 3121,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 3119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 3120,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3065,
																			"src": "6798:11:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 3122,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 3123,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:20"
													},
													{
														"expression": {
															"id": 3132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3126,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7031:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3131,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3128,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7046:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3129,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7060:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3133,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:20"
													},
													{
														"expression": {
															"id": 3140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3134,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7100:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3138,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3136,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7115:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3137,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7129:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3141,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:20"
													},
													{
														"expression": {
															"id": 3148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3142,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7170:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3147,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3146,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3144,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7185:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3145,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7199:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3149,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:20"
													},
													{
														"expression": {
															"id": 3156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3150,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7240:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3154,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3152,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7255:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3153,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7269:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3157,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:20"
													},
													{
														"expression": {
															"id": 3164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3158,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7310:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3160,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7325:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3161,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7339:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3165,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:20"
													},
													{
														"expression": {
															"id": 3172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3166,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3118,
																"src": "7381:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3171,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3167,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3168,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3065,
																		"src": "7396:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3169,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3118,
																		"src": "7410:7:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3173,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:20"
													},
													{
														"expression": {
															"id": 3178,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3174,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3068,
																"src": "7851:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3175,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3071,
																	"src": "7860:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3176,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3118,
																	"src": "7868:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3179,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:20"
													},
													{
														"expression": {
															"id": 3180,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3068,
															"src": "7896:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3069,
														"id": 3181,
														"nodeType": "Return",
														"src": "7889:13:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3059,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:20",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 3184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3061,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "3819:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3063,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "3830:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3062,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3065,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:20",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "3841:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:20"
									},
									"returnParameters": {
										"id": 3069,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3068,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:20",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "3885:14:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3067,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:20"
									},
									"scope": 3850,
									"src": "3803:4116:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3226,
										"nodeType": "Block",
										"src": "8161:192:20",
										"statements": [
											{
												"assignments": [
													3200
												],
												"declarations": [
													{
														"constant": false,
														"id": 3200,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:20",
														"nodeType": "VariableDeclaration",
														"scope": 3226,
														"src": "8171:14:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3199,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3206,
												"initialValue": {
													"arguments": [
														{
															"id": 3202,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3187,
															"src": "8195:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3203,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3189,
															"src": "8198:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3204,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3191,
															"src": "8201:11:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3201,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3184,
															3227
														],
														"referencedDeclaration": 3184,
														"src": "8188:6:20",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 3205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:20",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:20"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3208,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3194,
																"src": "8244:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2807",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2807",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 3207,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3849,
															"src": "8227:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2807_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 3209,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:20",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3211,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3187,
																	"src": "8264:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3212,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3189,
																	"src": "8267:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3213,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3191,
																	"src": "8270:11:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3210,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 3215,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3223,
												"nodeType": "IfStatement",
												"src": "8223:101:20",
												"trueBody": {
													"id": 3222,
													"nodeType": "Block",
													"src": "8288:36:20",
													"statements": [
														{
															"expression": {
																"id": 3220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3218,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3200,
																	"src": "8302:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 3219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3221,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:20"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3224,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3200,
													"src": "8340:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3198,
												"id": 3225,
												"nodeType": "Return",
												"src": "8333:13:20"
											}
										]
									},
									"documentation": {
										"id": 3185,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:20",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 3227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3187,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3227,
												"src": "8067:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3189,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3227,
												"src": "8078:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3191,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:20",
												"nodeType": "VariableDeclaration",
												"scope": 3227,
												"src": "8089:19:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3194,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3227,
												"src": "8110:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3193,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3192,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "8110:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "8110:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:20"
									},
									"returnParameters": {
										"id": 3198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3227,
												"src": "8152:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3196,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:20"
									},
									"scope": 3850,
									"src": "8051:302:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3338,
										"nodeType": "Block",
										"src": "8644:1585:20",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3235,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3230,
														"src": "8658:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3236,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3241,
												"nodeType": "IfStatement",
												"src": "8654:45:20",
												"trueBody": {
													"id": 3240,
													"nodeType": "Block",
													"src": "8666:33:20",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 3238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 3234,
															"id": 3239,
															"nodeType": "Return",
															"src": "8680:8:20"
														}
													]
												}
											},
											{
												"assignments": [
													3243
												],
												"declarations": [
													{
														"constant": false,
														"id": 3243,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:20",
														"nodeType": "VariableDeclaration",
														"scope": 3338,
														"src": "9378:14:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3242,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3252,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 3244,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 3246,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3230,
																			"src": "9406:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3245,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3506,
																			3541
																		],
																		"referencedDeclaration": 3506,
																		"src": "9401:4:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 3247,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:20",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3248,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3250,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:20"
											},
											{
												"id": 3337,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:20",
												"statements": [
													{
														"expression": {
															"id": 3262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3253,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "9839:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3254,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "9849:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3257,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3255,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "9858:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3256,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "9862:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3259,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3260,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3263,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:20"
													},
													{
														"expression": {
															"id": 3273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3264,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "9888:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3269,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3265,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "9898:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3268,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3266,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "9907:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3267,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "9911:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3270,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3274,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:20"
													},
													{
														"expression": {
															"id": 3284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3275,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "9937:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3276,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "9947:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3279,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3277,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "9956:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3278,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "9960:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3281,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3285,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:20"
													},
													{
														"expression": {
															"id": 3295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3286,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "9986:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3294,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3287,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "9996:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3288,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "10005:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3289,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "10009:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3292,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3293,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3296,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:20"
													},
													{
														"expression": {
															"id": 3306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3297,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "10035:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3305,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3298,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "10045:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3301,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3299,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "10054:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3300,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "10058:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3303,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3304,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3307,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:20"
													},
													{
														"expression": {
															"id": 3317,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3308,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "10084:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3316,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3309,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "10094:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3312,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3310,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "10103:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3311,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "10107:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3314,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3315,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3318,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:20"
													},
													{
														"expression": {
															"id": 3328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3319,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3243,
																"src": "10133:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3324,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3320,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3243,
																				"src": "10143:6:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3323,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3321,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3230,
																					"src": "10152:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3322,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3243,
																					"src": "10156:6:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3325,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3329,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:20"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3331,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3243,
																	"src": "10193:6:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3332,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3230,
																		"src": "10201:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3333,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3243,
																		"src": "10205:6:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3330,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3001,
																"src": "10189:3:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3234,
														"id": 3336,
														"nodeType": "Return",
														"src": "10182:30:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3228,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:20",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3339,
												"src": "8601:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:20"
									},
									"returnParameters": {
										"id": 3234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3339,
												"src": "8635:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3232,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:20"
									},
									"scope": 3850,
									"src": "8587:1642:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3373,
										"nodeType": "Block",
										"src": "10405:164:20",
										"statements": [
											{
												"id": 3372,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:20",
												"statements": [
													{
														"assignments": [
															3351
														],
														"declarations": [
															{
																"constant": false,
																"id": 3351,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:20",
																"nodeType": "VariableDeclaration",
																"scope": 3372,
																"src": "10439:14:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3350,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3355,
														"initialValue": {
															"arguments": [
																{
																	"id": 3353,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3342,
																	"src": "10461:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3352,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3339,
																	3374
																],
																"referencedDeclaration": 3339,
																"src": "10456:4:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3354,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:20"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3356,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3351,
																"src": "10484:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3365,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3358,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3345,
																						"src": "10511:8:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3357,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3849,
																					"src": "10494:16:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2807_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3364,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3362,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3360,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3351,
																						"src": "10524:6:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3361,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3351,
																						"src": "10533:6:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3363,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3342,
																					"src": "10542:1:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3368,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:20",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3366,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3369,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3349,
														"id": 3371,
														"nodeType": "Return",
														"src": "10477:75:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3340,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:20",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3342,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "10343:9:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3345,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "10354:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3344,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3343,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "10354:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "10354:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:20"
									},
									"returnParameters": {
										"id": 3349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3374,
												"src": "10396:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:20"
									},
									"scope": 3850,
									"src": "10329:240:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3505,
										"nodeType": "Block",
										"src": "10760:922:20",
										"statements": [
											{
												"assignments": [
													3383
												],
												"declarations": [
													{
														"constant": false,
														"id": 3383,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:20",
														"nodeType": "VariableDeclaration",
														"scope": 3505,
														"src": "10770:14:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3382,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3385,
												"initialValue": {
													"hexValue": "30",
													"id": 3384,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:20",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:20"
											},
											{
												"id": 3502,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3386,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "10826:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3387,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3400,
														"nodeType": "IfStatement",
														"src": "10822:99:20",
														"trueBody": {
															"id": 3399,
															"nodeType": "Block",
															"src": "10844:77:20",
															"statements": [
																{
																	"expression": {
																		"id": 3393,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3391,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "10862:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3392,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3394,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:20"
																},
																{
																	"expression": {
																		"id": 3397,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3395,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "10893:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3396,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3398,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3401,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "10938:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3404,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3415,
														"nodeType": "IfStatement",
														"src": "10934:96:20",
														"trueBody": {
															"id": 3414,
															"nodeType": "Block",
															"src": "10955:75:20",
															"statements": [
																{
																	"expression": {
																		"id": 3408,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3406,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "10973:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3409,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:20"
																},
																{
																	"expression": {
																		"id": 3412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3410,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11003:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3413,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3416,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11047:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3430,
														"nodeType": "IfStatement",
														"src": "11043:96:20",
														"trueBody": {
															"id": 3429,
															"nodeType": "Block",
															"src": "11064:75:20",
															"statements": [
																{
																	"expression": {
																		"id": 3423,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3421,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "11082:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3422,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3424,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:20"
																},
																{
																	"expression": {
																		"id": 3427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3425,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11112:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3428,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3433,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3431,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11156:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3432,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3434,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3445,
														"nodeType": "IfStatement",
														"src": "11152:96:20",
														"trueBody": {
															"id": 3444,
															"nodeType": "Block",
															"src": "11173:75:20",
															"statements": [
																{
																	"expression": {
																		"id": 3438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3436,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "11191:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3437,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3439,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:20"
																},
																{
																	"expression": {
																		"id": 3442,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3440,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11221:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3441,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3443,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3448,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3446,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11265:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3447,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3449,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3460,
														"nodeType": "IfStatement",
														"src": "11261:93:20",
														"trueBody": {
															"id": 3459,
															"nodeType": "Block",
															"src": "11281:73:20",
															"statements": [
																{
																	"expression": {
																		"id": 3453,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3451,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "11299:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3452,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3454,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:20"
																},
																{
																	"expression": {
																		"id": 3457,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3455,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11328:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3456,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3458,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3465,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3463,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3461,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11371:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3462,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3464,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3475,
														"nodeType": "IfStatement",
														"src": "11367:93:20",
														"trueBody": {
															"id": 3474,
															"nodeType": "Block",
															"src": "11387:73:20",
															"statements": [
																{
																	"expression": {
																		"id": 3468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3466,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "11405:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3467,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3469,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:20"
																},
																{
																	"expression": {
																		"id": 3472,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3470,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11434:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3471,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3473,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3476,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11477:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3477,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3479,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3490,
														"nodeType": "IfStatement",
														"src": "11473:93:20",
														"trueBody": {
															"id": 3489,
															"nodeType": "Block",
															"src": "11493:73:20",
															"statements": [
																{
																	"expression": {
																		"id": 3483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3481,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3377,
																			"src": "11511:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3484,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:20"
																},
																{
																	"expression": {
																		"id": 3487,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3485,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11540:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3486,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3488,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3495,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3491,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3377,
																	"src": "11583:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3492,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3494,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3501,
														"nodeType": "IfStatement",
														"src": "11579:64:20",
														"trueBody": {
															"id": 3500,
															"nodeType": "Block",
															"src": "11599:44:20",
															"statements": [
																{
																	"expression": {
																		"id": 3498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3496,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3383,
																			"src": "11617:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3497,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3499,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:20"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3503,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3383,
													"src": "11669:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3381,
												"id": 3504,
												"nodeType": "Return",
												"src": "11662:13:20"
											}
										]
									},
									"documentation": {
										"id": 3375,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:20",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3506,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3377,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3506,
												"src": "10713:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:20"
									},
									"returnParameters": {
										"id": 3381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3506,
												"src": "10751:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:20"
									},
									"scope": 3850,
									"src": "10699:983:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3540,
										"nodeType": "Block",
										"src": "11915:168:20",
										"statements": [
											{
												"id": 3539,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:20",
												"statements": [
													{
														"assignments": [
															3518
														],
														"declarations": [
															{
																"constant": false,
																"id": 3518,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:20",
																"nodeType": "VariableDeclaration",
																"scope": 3539,
																"src": "11949:14:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3517,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3522,
														"initialValue": {
															"arguments": [
																{
																	"id": 3520,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3509,
																	"src": "11971:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3519,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3506,
																	3541
																],
																"referencedDeclaration": 3506,
																"src": "11966:4:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:20"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3523,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3518,
																"src": "11998:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3532,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3525,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3512,
																						"src": "12025:8:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3524,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3849,
																					"src": "12008:16:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2807_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3526,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3531,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3529,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3527,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3528,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3518,
																						"src": "12043:6:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3530,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3509,
																					"src": "12052:5:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3534,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:20",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3536,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3516,
														"id": 3538,
														"nodeType": "Return",
														"src": "11991:75:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3507,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:20",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3541,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3509,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3541,
												"src": "11849:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3512,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3541,
												"src": "11864:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3511,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3510,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "11864:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "11864:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:20"
									},
									"returnParameters": {
										"id": 3516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3541,
												"src": "11906:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:20"
									},
									"scope": 3850,
									"src": "11835:248:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3669,
										"nodeType": "Block",
										"src": "12276:854:20",
										"statements": [
											{
												"assignments": [
													3550
												],
												"declarations": [
													{
														"constant": false,
														"id": 3550,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:20",
														"nodeType": "VariableDeclaration",
														"scope": 3669,
														"src": "12286:14:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3549,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3552,
												"initialValue": {
													"hexValue": "30",
													"id": 3551,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:20",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:20"
											},
											{
												"id": 3666,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3557,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3553,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12342:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3556,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3555,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3569,
														"nodeType": "IfStatement",
														"src": "12338:103:20",
														"trueBody": {
															"id": 3568,
															"nodeType": "Block",
															"src": "12361:80:20",
															"statements": [
																{
																	"expression": {
																		"id": 3562,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3558,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12379:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3561,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3559,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3560,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3563,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:20"
																},
																{
																	"expression": {
																		"id": 3566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3564,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12414:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3567,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3570,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12458:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3572,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3586,
														"nodeType": "IfStatement",
														"src": "12454:103:20",
														"trueBody": {
															"id": 3585,
															"nodeType": "Block",
															"src": "12477:80:20",
															"statements": [
																{
																	"expression": {
																		"id": 3579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3575,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12495:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3576,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3577,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3580,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:20"
																},
																{
																	"expression": {
																		"id": 3583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3581,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12530:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3582,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3584,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3591,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3587,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12574:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3590,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3603,
														"nodeType": "IfStatement",
														"src": "12570:103:20",
														"trueBody": {
															"id": 3602,
															"nodeType": "Block",
															"src": "12593:80:20",
															"statements": [
																{
																	"expression": {
																		"id": 3596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3592,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12611:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3593,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3594,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3597,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:20"
																},
																{
																	"expression": {
																		"id": 3600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3598,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12646:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3599,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3601,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3604,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12690:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3620,
														"nodeType": "IfStatement",
														"src": "12686:100:20",
														"trueBody": {
															"id": 3619,
															"nodeType": "Block",
															"src": "12708:78:20",
															"statements": [
																{
																	"expression": {
																		"id": 3613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3609,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12726:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3610,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3611,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3614,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:20"
																},
																{
																	"expression": {
																		"id": 3617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3615,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12760:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3618,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3625,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3621,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12803:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3624,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3637,
														"nodeType": "IfStatement",
														"src": "12799:100:20",
														"trueBody": {
															"id": 3636,
															"nodeType": "Block",
															"src": "12821:78:20",
															"statements": [
																{
																	"expression": {
																		"id": 3630,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3626,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12839:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3629,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3627,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3631,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:20"
																},
																{
																	"expression": {
																		"id": 3634,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3632,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12873:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3633,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3635,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3638,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "12916:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3641,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3640,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3654,
														"nodeType": "IfStatement",
														"src": "12912:100:20",
														"trueBody": {
															"id": 3653,
															"nodeType": "Block",
															"src": "12934:78:20",
															"statements": [
																{
																	"expression": {
																		"id": 3647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3643,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3544,
																			"src": "12952:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3644,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3645,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3648,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:20"
																},
																{
																	"expression": {
																		"id": 3651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3649,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "12986:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3652,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3659,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3655,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3544,
																"src": "13029:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3658,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3656,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3665,
														"nodeType": "IfStatement",
														"src": "13025:66:20",
														"trueBody": {
															"id": 3664,
															"nodeType": "Block",
															"src": "13047:44:20",
															"statements": [
																{
																	"expression": {
																		"id": 3662,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3660,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3550,
																			"src": "13065:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3661,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3663,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:20"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3667,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3550,
													"src": "13117:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3548,
												"id": 3668,
												"nodeType": "Return",
												"src": "13110:13:20"
											}
										]
									},
									"documentation": {
										"id": 3542,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:20",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3670,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3544,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3670,
												"src": "12229:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:20"
									},
									"returnParameters": {
										"id": 3548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3670,
												"src": "12267:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:20"
									},
									"scope": 3850,
									"src": "12214:916:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3704,
										"nodeType": "Block",
										"src": "13365:170:20",
										"statements": [
											{
												"id": 3703,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:20",
												"statements": [
													{
														"assignments": [
															3682
														],
														"declarations": [
															{
																"constant": false,
																"id": 3682,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:20",
																"nodeType": "VariableDeclaration",
																"scope": 3703,
																"src": "13399:14:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3681,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3686,
														"initialValue": {
															"arguments": [
																{
																	"id": 3684,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3673,
																	"src": "13422:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3683,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3670,
																	3705
																],
																"referencedDeclaration": 3670,
																"src": "13416:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3685,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:20"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3687,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3682,
																"src": "13449:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3696,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3689,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3676,
																						"src": "13476:8:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3688,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3849,
																					"src": "13459:16:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2807_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3690,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3695,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3693,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3691,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3692,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3682,
																						"src": "13495:6:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3694,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3673,
																					"src": "13504:5:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3698,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3699,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:20",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3700,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3680,
														"id": 3702,
														"nodeType": "Return",
														"src": "13442:76:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3671,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:20",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3705,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3673,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3705,
												"src": "13299:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3672,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3676,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3705,
												"src": "13314:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3675,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3674,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "13314:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "13314:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:20"
									},
									"returnParameters": {
										"id": 3680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3679,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3705,
												"src": "13356:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:20"
									},
									"scope": 3850,
									"src": "13284:251:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3791,
										"nodeType": "Block",
										"src": "13855:600:20",
										"statements": [
											{
												"assignments": [
													3714
												],
												"declarations": [
													{
														"constant": false,
														"id": 3714,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:20",
														"nodeType": "VariableDeclaration",
														"scope": 3791,
														"src": "13865:14:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3713,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3716,
												"initialValue": {
													"hexValue": "30",
													"id": 3715,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:20",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:20"
											},
											{
												"id": 3788,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:20",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3721,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3719,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3717,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3708,
																	"src": "13921:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3718,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3720,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3731,
														"nodeType": "IfStatement",
														"src": "13917:98:20",
														"trueBody": {
															"id": 3730,
															"nodeType": "Block",
															"src": "13939:76:20",
															"statements": [
																{
																	"expression": {
																		"id": 3724,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3722,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3708,
																			"src": "13957:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3723,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3725,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:20"
																},
																{
																	"expression": {
																		"id": 3728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3726,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3714,
																			"src": "13988:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3729,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3736,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3732,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3708,
																	"src": "14032:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3733,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3735,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3746,
														"nodeType": "IfStatement",
														"src": "14028:95:20",
														"trueBody": {
															"id": 3745,
															"nodeType": "Block",
															"src": "14049:74:20",
															"statements": [
																{
																	"expression": {
																		"id": 3739,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3737,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3708,
																			"src": "14067:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3738,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3740,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:20"
																},
																{
																	"expression": {
																		"id": 3743,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3741,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3714,
																			"src": "14097:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3744,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3747,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3708,
																	"src": "14140:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3750,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3761,
														"nodeType": "IfStatement",
														"src": "14136:95:20",
														"trueBody": {
															"id": 3760,
															"nodeType": "Block",
															"src": "14157:74:20",
															"statements": [
																{
																	"expression": {
																		"id": 3754,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3752,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3708,
																			"src": "14175:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3753,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3755,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:20"
																},
																{
																	"expression": {
																		"id": 3758,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3756,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3714,
																			"src": "14205:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3757,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3759,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3764,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3762,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3708,
																	"src": "14248:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3765,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3776,
														"nodeType": "IfStatement",
														"src": "14244:95:20",
														"trueBody": {
															"id": 3775,
															"nodeType": "Block",
															"src": "14265:74:20",
															"statements": [
																{
																	"expression": {
																		"id": 3769,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3767,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3708,
																			"src": "14283:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3768,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3770,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:20"
																},
																{
																	"expression": {
																		"id": 3773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3771,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3714,
																			"src": "14313:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3772,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3774,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:20"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3781,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3779,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3777,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3708,
																	"src": "14356:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3778,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:20",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3787,
														"nodeType": "IfStatement",
														"src": "14352:64:20",
														"trueBody": {
															"id": 3786,
															"nodeType": "Block",
															"src": "14372:44:20",
															"statements": [
																{
																	"expression": {
																		"id": 3784,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3782,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3714,
																			"src": "14390:6:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3783,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3785,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:20"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3789,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3714,
													"src": "14442:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3712,
												"id": 3790,
												"nodeType": "Return",
												"src": "14435:13:20"
											}
										]
									},
									"documentation": {
										"id": 3706,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:20",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3792,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3708,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3792,
												"src": "13808:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:20"
									},
									"returnParameters": {
										"id": 3712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3711,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3792,
												"src": "13846:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:20"
									},
									"scope": 3850,
									"src": "13792:663:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3829,
										"nodeType": "Block",
										"src": "14692:177:20",
										"statements": [
											{
												"id": 3828,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:20",
												"statements": [
													{
														"assignments": [
															3804
														],
														"declarations": [
															{
																"constant": false,
																"id": 3804,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:20",
																"nodeType": "VariableDeclaration",
																"scope": 3828,
																"src": "14726:14:20",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3803,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3808,
														"initialValue": {
															"arguments": [
																{
																	"id": 3806,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3795,
																	"src": "14750:5:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3805,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3792,
																	3830
																],
																"referencedDeclaration": 3792,
																"src": "14743:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:20"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3809,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3804,
																"src": "14777:6:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3811,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3798,
																						"src": "14804:8:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2807",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3810,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3849,
																					"src": "14787:16:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2807_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3812,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3820,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3818,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3813,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3816,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3814,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3804,
																									"src": "14823:6:20",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3815,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:20",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:20",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3817,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3819,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3795,
																					"src": "14838:5:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3823,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3824,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:20",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3822,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3825,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:20",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3802,
														"id": 3827,
														"nodeType": "Return",
														"src": "14770:82:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3793,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:20",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3830,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3799,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3795,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:20",
												"nodeType": "VariableDeclaration",
												"scope": 3830,
												"src": "14626:13:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3794,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3798,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3830,
												"src": "14641:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3797,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3796,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "14641:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "14641:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:20"
									},
									"returnParameters": {
										"id": 3802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3801,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3830,
												"src": "14683:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:20"
									},
									"scope": 3850,
									"src": "14610:259:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3848,
										"nodeType": "Block",
										"src": "15067:48:20",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3844,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3841,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3834,
																	"src": "15090:8:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2807",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2807",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3840,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3839,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:20",
																	"typeDescriptions": {}
																}
															},
															"id": 3842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:20",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3845,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3838,
												"id": 3847,
												"nodeType": "Return",
												"src": "15077:31:20"
											}
										]
									},
									"documentation": {
										"id": 3831,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:20",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3834,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:20",
												"nodeType": "VariableDeclaration",
												"scope": 3849,
												"src": "15019:17:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2807",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3833,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3832,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:20"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2807,
														"src": "15019:8:20"
													},
													"referencedDeclaration": 2807,
													"src": "15019:8:20",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2807",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:20"
									},
									"returnParameters": {
										"id": 3838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3849,
												"src": "15061:4:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3836,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:20",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:20"
									},
									"scope": 3850,
									"src": "14993:122:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3851,
							"src": "203:14914:20",
							"usedErrors": [
								2802
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:20"
				},
				"id": 20
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3955
						]
					},
					"id": 3956,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3852,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:21"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3853,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:21",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3955,
							"linearizedBaseContracts": [
								3955
							],
							"name": "SignedMath",
							"nameLocation": "224:10:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3870,
										"nodeType": "Block",
										"src": "376:37:21",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3865,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3863,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3856,
															"src": "393:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3864,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3858,
															"src": "397:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3867,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3858,
														"src": "405:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:21",
													"trueExpression": {
														"id": 3866,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3856,
														"src": "401:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3862,
												"id": 3869,
												"nodeType": "Return",
												"src": "386:20:21"
											}
										]
									},
									"documentation": {
										"id": 3854,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:21",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3871,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3856,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3871,
												"src": "325:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3855,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3858,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3871,
												"src": "335:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3857,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:21"
									},
									"returnParameters": {
										"id": 3862,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3861,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3871,
												"src": "368:6:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3860,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:21"
									},
									"scope": 3955,
									"src": "312:101:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3888,
										"nodeType": "Block",
										"src": "555:37:21",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3883,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3881,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3874,
															"src": "572:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3882,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "576:1:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3885,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3876,
														"src": "584:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:21",
													"trueExpression": {
														"id": 3884,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3874,
														"src": "580:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3880,
												"id": 3887,
												"nodeType": "Return",
												"src": "565:20:21"
											}
										]
									},
									"documentation": {
										"id": 3872,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:21",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3889,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3874,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3889,
												"src": "504:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3873,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3876,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3889,
												"src": "514:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3875,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:21"
									},
									"returnParameters": {
										"id": 3880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3879,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3889,
												"src": "547:6:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3878,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:21"
									},
									"scope": 3955,
									"src": "491:101:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3932,
										"nodeType": "Block",
										"src": "797:162:21",
										"statements": [
											{
												"assignments": [
													3900
												],
												"declarations": [
													{
														"constant": false,
														"id": 3900,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:21",
														"nodeType": "VariableDeclaration",
														"scope": 3932,
														"src": "859:8:21",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3899,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3913,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3901,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3892,
																	"src": "871:1:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3902,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3894,
																	"src": "875:1:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3904,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3910,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3907,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3905,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3892,
																				"src": "882:1:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3906,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3894,
																				"src": "886:1:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3908,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3909,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3911,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:21"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3914,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3900,
														"src": "911:1:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3922,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3919,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3900,
																						"src": "931:1:21",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3918,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:21",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3917,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:21",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3920,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:21",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3921,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3915,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:21",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:21",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3926,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3924,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3892,
																				"src": "945:1:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3925,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3894,
																				"src": "949:1:21",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3927,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:21",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3929,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:21",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3898,
												"id": 3931,
												"nodeType": "Return",
												"src": "904:48:21"
											}
										]
									},
									"documentation": {
										"id": 3890,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:21",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3892,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3933,
												"src": "746:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3891,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3894,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3933,
												"src": "756:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3893,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:21"
									},
									"returnParameters": {
										"id": 3898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3897,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3933,
												"src": "789:6:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3896,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:21"
									},
									"scope": 3955,
									"src": "729:230:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3953,
										"nodeType": "Block",
										"src": "1103:158:21",
										"statements": [
											{
												"id": 3952,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:21",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3943,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3936,
																			"src": "1228:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3944,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3948,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:21",
																		"subExpression": {
																			"id": 3947,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3936,
																			"src": "1242:1:21",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:21",
																	"trueExpression": {
																		"id": 3946,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3936,
																		"src": "1237:1:21",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3942,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:21",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3941,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:21",
																	"typeDescriptions": {}
																}
															},
															"id": 3950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:21",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3940,
														"id": 3951,
														"nodeType": "Return",
														"src": "1213:31:21"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3934,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:21",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3954,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3936,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:21",
												"nodeType": "VariableDeclaration",
												"scope": 3954,
												"src": "1061:8:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3935,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:21"
									},
									"returnParameters": {
										"id": 3940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3939,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3954,
												"src": "1094:7:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:21"
									},
									"scope": 3955,
									"src": "1048:213:21",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3956,
							"src": "216:1047:21",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:21"
				},
				"id": 21
			},
			"contracts/TimeVillage/USDT.sol": {
				"ast": {
					"absolutePath": "contracts/TimeVillage/USDT.sol",
					"exportedSymbols": {
						"Context": [
							1497
						],
						"ECDSA": [
							2495
						],
						"EIP712": [
							2722
						],
						"ERC20": [
							883
						],
						"ERC20Burnable": [
							1007
						],
						"ERC20FlashMint": [
							1251
						],
						"ERC20Permit": [
							1405
						],
						"IERC20": [
							961
						],
						"IERC20Errors": [
							273
						],
						"IERC20Metadata": [
							1431
						],
						"IERC20Permit": [
							1467
						],
						"IERC3156FlashBorrower": [
							167
						],
						"IERC3156FlashLender": [
							206
						],
						"MyToken": [
							4001
						],
						"Nonces": [
							1565
						],
						"Ownable": [
							147
						]
					},
					"id": 4002,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3957,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:22"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3958,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4002,
							"sourceUnit": 884,
							"src": "58:55:22",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 3959,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4002,
							"sourceUnit": 1008,
							"src": "114:74:22",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3960,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4002,
							"sourceUnit": 148,
							"src": "189:52:22",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3961,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4002,
							"sourceUnit": 1406,
							"src": "242:72:22",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20FlashMint.sol",
							"id": 3962,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4002,
							"sourceUnit": 1252,
							"src": "315:75:22",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3963,
										"name": "ERC20",
										"nameLocations": [
											"412:5:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 883,
										"src": "412:5:22"
									},
									"id": 3964,
									"nodeType": "InheritanceSpecifier",
									"src": "412:5:22"
								},
								{
									"baseName": {
										"id": 3965,
										"name": "ERC20Burnable",
										"nameLocations": [
											"419:13:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1007,
										"src": "419:13:22"
									},
									"id": 3966,
									"nodeType": "InheritanceSpecifier",
									"src": "419:13:22"
								},
								{
									"baseName": {
										"id": 3967,
										"name": "Ownable",
										"nameLocations": [
											"434:7:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "434:7:22"
									},
									"id": 3968,
									"nodeType": "InheritanceSpecifier",
									"src": "434:7:22"
								},
								{
									"baseName": {
										"id": 3969,
										"name": "ERC20Permit",
										"nameLocations": [
											"443:11:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1405,
										"src": "443:11:22"
									},
									"id": 3970,
									"nodeType": "InheritanceSpecifier",
									"src": "443:11:22"
								},
								{
									"baseName": {
										"id": 3971,
										"name": "ERC20FlashMint",
										"nameLocations": [
											"456:14:22"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1251,
										"src": "456:14:22"
									},
									"id": 3972,
									"nodeType": "InheritanceSpecifier",
									"src": "456:14:22"
								}
							],
							"canonicalName": "MyToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 4001,
							"linearizedBaseContracts": [
								4001,
								1251,
								206,
								1405,
								1565,
								2722,
								231,
								1467,
								147,
								1007,
								883,
								273,
								1431,
								961,
								1497
							],
							"name": "MyToken",
							"nameLocation": "401:7:22",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3987,
										"nodeType": "Block",
										"src": "602:2:22",
										"statements": []
									},
									"id": 3988,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "555344",
													"id": 3977,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "525:5:22",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c4ae21aac0c6549d71dd96035b7e0bdb6c79ebdba8891b666115bc976d16a29e",
														"typeString": "literal_string \"USD\""
													},
													"value": "USD"
												},
												{
													"hexValue": "55534454",
													"id": 3978,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "532:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_8b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d0",
														"typeString": "literal_string \"USDT\""
													},
													"value": "USDT"
												}
											],
											"id": 3979,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3976,
												"name": "ERC20",
												"nameLocations": [
													"519:5:22"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 883,
												"src": "519:5:22"
											},
											"nodeType": "ModifierInvocation",
											"src": "519:20:22"
										},
										{
											"arguments": [
												{
													"id": 3981,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3974,
													"src": "556:12:22",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3982,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3980,
												"name": "Ownable",
												"nameLocations": [
													"548:7:22"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "548:7:22"
											},
											"nodeType": "ModifierInvocation",
											"src": "548:21:22"
										},
										{
											"arguments": [
												{
													"hexValue": "55534454",
													"id": 3984,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "590:6:22",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_8b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d0",
														"typeString": "literal_string \"USDT\""
													},
													"value": "USDT"
												}
											],
											"id": 3985,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3983,
												"name": "ERC20Permit",
												"nameLocations": [
													"578:11:22"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1405,
												"src": "578:11:22"
											},
											"nodeType": "ModifierInvocation",
											"src": "578:19:22"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3975,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3974,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "497:12:22",
												"nodeType": "VariableDeclaration",
												"scope": 3988,
												"src": "489:20:22",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3973,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "489:7:22",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "488:22:22"
									},
									"returnParameters": {
										"id": 3986,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "602:0:22"
									},
									"scope": 4001,
									"src": "477:127:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3999,
										"nodeType": "Block",
										"src": "633:46:22",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3992,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "649:3:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3993,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "653:6:22",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "649:10:22",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															},
															"id": 3996,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030",
																"id": 3994,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "661:4:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000_by_1",
																	"typeString": "int_const 1000"
																},
																"value": "1000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 3995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "667:4:22",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "661:10:22",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_1000000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000000"
															}
														],
														"id": 3991,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "643:5:22",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "643:29:22",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3998,
												"nodeType": "ExpressionStatement",
												"src": "643:29:22"
											}
										]
									},
									"functionSelector": "1249c58b",
									"id": 4000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "619:4:22",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3989,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "623:2:22"
									},
									"returnParameters": {
										"id": 3990,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "633:0:22"
									},
									"scope": 4001,
									"src": "610:69:22",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 4002,
							"src": "392:289:22",
							"usedErrors": [
								13,
								18,
								243,
								248,
								253,
								262,
								267,
								272,
								1030,
								1035,
								1040,
								1282,
								1289,
								1507,
								1579,
								1581,
								2158,
								2163,
								2168
							],
							"usedEvents": [
								24,
								211,
								895,
								904
							]
						}
					],
					"src": "32:649:22"
				},
				"id": 22
			}
		}
	}
}