{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_initialOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_buyer",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_seller",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_buyerFeePerAge",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_sellerFeePerAge",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ClaimTime",
						"type": "uint256"
					}
				],
				"name": "Claim",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "ArtistAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "ArtistFee",
						"type": "uint256"
					}
				],
				"name": "Fee",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "NFTCancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "NFTListed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "SoldTime",
						"type": "uint256"
					}
				],
				"name": "NFTSold",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_mintContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_minPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					}
				],
				"name": "AuctionOfferList",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Bidding",
				"outputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "userName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "biddingTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bidCount",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "BiddingCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					}
				],
				"name": "CancelListForSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionListCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "ClaimNFT",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "EndTime",
						"type": "uint256"
					}
				],
				"name": "Commission_W_R_T",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "volume",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_mintContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					}
				],
				"name": "ListNft",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "LiveBiddingIndices",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "NftAuction",
				"outputs": [
					{
						"internalType": "address",
						"name": "mintContract",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minimumBid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "listTime",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "marketplaceAddress",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "isActive",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionListCount",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "_price",
						"type": "uint256"
					}
				],
				"name": "NftOffers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "EndTime",
						"type": "uint256"
					}
				],
				"name": "Sale_W_R_T",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalSale",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Sales",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "SelectedUser",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "Volume",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "EndTime",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "VolumeSale_W_R_T_User",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "volume",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "sale",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "EndTime",
						"type": "uint256"
					}
				],
				"name": "Volume_W_R_T",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "volume",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "_idToNFT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "count",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "listTime",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "listed",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "artist",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "artistFeePerAge",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "_nftCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctionListCount",
				"outputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "auctionListNFT",
				"outputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "mintContract",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "minimumBid",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "artist",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "artistFeePerAge",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "listTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "marketplaceAddress",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct Marketplace.nftAuction",
						"name": "listedData",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "listCount",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "uriData",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "auctionOfferListAgain",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "buyNft",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyerFee",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyerFeePerAge",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionListCount",
						"type": "uint256"
					}
				],
				"name": "cancelOfferList",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionListIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_bidcount",
						"type": "uint256"
					}
				],
				"name": "cancelOfferPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "commission",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCommission",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "commissionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "deployTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "listIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"name": "editListForSale",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllListedNfts",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "newOwner",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "seller",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "owner",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "price",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "count",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "listTime",
										"type": "uint256"
									},
									{
										"internalType": "bool",
										"name": "listed",
										"type": "bool"
									},
									{
										"internalType": "address",
										"name": "artist",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "artistFeePerAge",
										"type": "uint256"
									}
								],
								"internalType": "struct Marketplace.NFT",
								"name": "listedData",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "listCount",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uriData",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.ListedNftTokenId[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "newOwner",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "mintContract",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "owner",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumBid",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "artist",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "artistFeePerAge",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "listTime",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "marketplaceAddress",
										"type": "address"
									},
									{
										"internalType": "bool",
										"name": "isActive",
										"type": "bool"
									}
								],
								"internalType": "struct Marketplace.nftAuction",
								"name": "listedData",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "listCount",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uriData",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.ListTokenId[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_listCount",
						"type": "uint256"
					}
				],
				"name": "getBiddingHistory",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "user",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "userName",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "price",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "biddingTime",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "bidCount",
								"type": "uint256"
							}
						],
						"internalType": "struct Marketplace.userDetail[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "contractAddresses",
						"type": "address[]"
					}
				],
				"name": "getNFTDetail",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "mintTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "mintContract",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "mintArtist",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "artistFeePerAge",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							}
						],
						"internalType": "struct Marketplace.MyNft[][]",
						"name": "",
						"type": "tuple[][]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "listCount",
				"outputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "listedNftToken",
				"outputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "mintContract",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "minimumBid",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "artist",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "artistFeePerAge",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "listTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "marketplaceAddress",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "isActive",
								"type": "bool"
							}
						],
						"internalType": "struct Marketplace.nftAuction",
						"name": "listedData",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "listCount",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "uriData",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nftAuctionCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_auctionListCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bidCount",
						"type": "uint256"
					}
				],
				"name": "selectUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sellerFee",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sellerFeePerAge",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_setBuyerFee",
						"type": "uint256"
					}
				],
				"name": "setBuyerFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_setSellerFee",
						"type": "uint256"
					}
				],
				"name": "setSellerFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_address",
						"type": "address"
					}
				],
				"name": "setSellerFeeAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSales",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalVolume",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userBiddingCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "userBidsCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userBuyRecord",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userSoldRecord",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "FatCat Team",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"AuctionOfferList(address,uint256,uint256,address,uint256)": {
					"details": "Lists an NFT for auction on the marketplace. This function allows a user to list an NFT for auction by specifying the NFT's contract address, token ID, minimum starting price, and artist details. It ensures that the NFT is not already listed for sale or auction elsewhere in the marketplace. ",
					"params": {
						"_minPrice": "The starting or minimum price for the auction. Bids below this price will not be accepted.",
						"_mintContract": "The address of the ERC721 contract where the NFT is minted. This contract address                      is used to identify and interact with the NFT.",
						"_tokenId": "The unique identifier of the NFT within its minting contract. This ID is used to specify                 the exact NFT being listed for auction.",
						"artist": "The address of the artist or creator of the NFT. This is used to allocate any artist fees               from the sale.",
						"artistFeePerAge": "The percentage of the sale price that will be paid as a fee to the artist. This fee                        is calculated based on the final sale price of the NFT. Requirements: - The NFT identified by `_tokenId` from `_mintContract` must not already be listed in the marketplace or   be active in another auction.  The function performs the following operations: 1. Validates that the NFT is not currently listed for sale or active in another auction. 2. Increments the counter tracking the total number of auctions. 3. Creates a new `nftAuction` struct with the provided details and marks the auction as active. 4. Updates the auction listing tracking with the new auction's details. 5. Sets the initial bid count for the auction to 0. 6. Transfers the NFT from the seller to the marketplace contract to hold in escrow during the auction. This setup ensures that the NFT is securely held while the auction takes place and facilitates a seamless transfer to the winning bidder at the conclusion of the auction."
					}
				},
				"ClaimNFT(uint256,uint256)": {
					"details": "Allows the highest bidder to claim the NFT after winning the auction. The function handles the transfer of funds including the bid amount to the seller, a fee to the artist, and any additional fees defined by the contract. Finally, it transfers ownership of the NFT to the winning bidder.",
					"params": {
						"_auctionListCount": "The index of the auction in the `auctionListCount` mapping. It identifies                          which auction is being settled and which NFT is being claimed. Requirements: - A winning bidder must have been selected for the auction (`SelectedUser[_auctionListCount]` must not be 0). - The caller must be the winning bidder as determined in the auction. - The value sent with the transaction must at least match the winning bid price. Operation: 1. Validates the auction status and that the caller is the winning bidder. 2. Calculates fees payable to the artist, the seller, and any platform fees. 3. Distributes the funds accordingly: to the seller, artist, and fee accounts. 4. Transfers the NFT from the smart contract to the winning bidder, completing the auction. 5. Emits a `Claim` event for tracking and notification purposes. 6. Updates the token ownership and timestamp in the connected NFT contract, if applicable. 7. Marks the auction as inactive and cleans up the auction and user list mappings."
					}
				},
				"ListNft(address,uint256,uint256,address,uint256)": {
					"details": "Lists an NFT on the marketplace for sale.  This function allows a user to list an NFT for sale in the marketplace. The function ensures that the NFT is not already listed for soyale or auction. It sets the sale price and records the listing details in the marketplace's storage. ",
					"params": {
						"_mintContract": "The address of the NFT contract where the NFT was minted. This contract must                      comply with the ERC721 standard.",
						"_price": "The price at which the NFT is to be sold. This value must be non-negative.",
						"_tokenId": "The unique identifier for the NFT being listed. This tokenId must have been minted                 by the specified `_mintContract`.",
						"artist": "The address of the artist or creator of the NFT. This is used for tracking and possibly               distributing royalties or fees.",
						"artistFeePerAge": "The fee or royalty amount that the artist is entitled to from the sale. The                        specific usage of this parameter can vary, such as a percentage of the sale price.  Requirements: - The NFT must not already be listed for sale in the marketplace. - The NFT must not be active in any auction within this marketplace. - The sale price `_price` must be at least 0 wei, allowing for free listings. - The caller must own the NFT and approve the marketplace contract to transfer it.  On successful listing, the NFT is transferred from the seller to the marketplace contract, effectively escrowing the NFT until the sale is complete or the listing is cancelled. The function emits an `NFTListed` event detailing the tokenId, seller, marketplace address as the current owner, and the sale price."
					}
				},
				"NftOffers(uint256,string,uint256)": {
					"details": "Allows users to place bids on NFTs that are listed for auction. Participants can bid on NFTs by specifying the auction they wish to participate in, their name, and the bid amount. This function updates the auction state with the new bid details.",
					"params": {
						"_auctionListCount": "The index of the auction in the `auctionListCount` mapping, indicating                          which NFT the bid is for. This index helps identify the specific auction.",
						"_name": "The name of the bidder. This parameter can be used for identification or display purposes              in a UI.",
						"_price": "The amount of the bid placed by the user. This value must be higher than the current               highest bid for the auction to be considered valid. Requirements: - The caller (bidder) must not be the owner of the NFT. Owners cannot bid on their own NFTs. - The auction for the NFT must be active. Bids cannot be placed on NFTs not listed for auction or   after the auction has ended.  The function performs the following operations: 1. Retrieves the contract address and token ID of the NFT being bid on, based on `_auctionListCount`. 2. Validates that the caller is not the owner of the NFT and that the auction is active. 3. Increments the count of bids placed by the user for this specific NFT. 4. Records the new bid in the `Bidding` mapping, which stores all bids for each auction. 5. Updates the user's bidding count and the overall list of bids for this auction. This setup ensures that bids are accurately tracked and associated with the correct auction and bidder. It allows for a transparent bidding process where all participants can place bids until the auction concludes."
					}
				},
				"buyNft(uint256,uint256)": {
					"details": "Facilitates the purchase of an NFT listed on the marketplace.  This function allows a buyer to purchase an NFT that has been listed for sale on the marketplace. It handles the transfer of ownership of the NFT, the distribution of funds including the sale price to the seller, and any applicable fees to the marketplace and artist. ",
					"params": {
						"listIndex": "The index of the NFT in the marketplace's list of listed NFTs. This index is used                  to retrieve the details of the NFT to be purchased.",
						"price": "The price at which the buyer is willing to purchase the NFT. This is validated against              the listing price of the NFT.0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2,1,0xAb8483F64d  Requirements: - The caller (buyer) must not be the seller of the NFT. - The provided `price` must be at least equal to the asking price of the NFT. - The caller must send enough ether to cover the asking price and any applicable fees.  The function performs the following operations: 1. Transfers the NFT from the marketplace contract to the buyer. 2. Updates the ownership and other relevant details of the NFT in the connected NFT contract. 3. Calculates the fees to be distributed to the marketplace, artist, and any other parties. 4. Distributes the sale proceeds and fees accordingly. 5. Marks the NFT as no longer listed in the marketplace. 6. Updates the marketplace's listing to reflect the sale and adjusts the list of available NFTs.  Emits a `Fee` event to log the distribution of fees to the artist and a `NFTSold` event to log the sale of the NFT, including details such as the tokenId, seller, buyer, sale price, and timestamp."
					}
				},
				"cancelOfferList(uint256)": {
					"details": "Allows the owner of an NFT listed for auction to cancel the auction. This function enables auction creators to retract their listings before a sale occurs.",
					"params": {
						"_auctionListCount": "The index of the auction in the `auctionListCount` mapping. It identifies                          which auction (and therefore which NFT) is being cancelled. Requirements: - The caller must be the owner of the NFT listed for auction. This ensures that only the rightful   owner can cancel the auction. Operation: 1. Validates that the caller is the owner of the NFT. 2. Transfers the NFT from the smart contract back to the owner, effectively removing it from auction. 3. Marks the auction as inactive by setting its `isActive` flag to false. 4. Reassigns the last auction in the list to the position of the cancelled auction, and then    deletes the last entry. This step maintains a compact list of auctions. 5. Decrements the overall count of auctions."
					}
				},
				"editListForSale(uint256,uint256)": {
					"details": "Allows a seller to cancel their listed NFT offer on the marketplace. This function is designed to cancel an active listing of an NFT on the marketplace, allowing the seller to withdraw their offer. It handles the transfer of the NFT back to the seller and updates the listing status accordingly. ",
					"params": {
						"listIndex": "The index of the listed NFT in the marketplace's tracking data structure. This index                  is used to identify the specific NFT listing to be canceled. Requirements: - The NFT identified by `listIndex` must currently be listed on the marketplace. The function checks   for the `listed` status to ensure that only active listings can be canceled. - The caller of this function should be the owner or have appropriate permissions to cancel the listing.  The function performs the following operations: 1. Validates that the NFT is currently listed. 2. Updates the owner of the NFT to be the original seller, effectively preparing for the transfer back. 3. Transfers the NFT from the marketplace contract back to the original seller (now the owner). 4. Marks the NFT as no longer listed by setting its `listed` status to false. 5. Adjusts the marketplace's internal tracking of listed NFTs to reflect the removal of the listing. 6. Decrements the counter tracking the total number of listed NFTs.  Emits an `NFTCancel` event to log the cancellation of the listing, including details such as the tokenId, seller, the address who performed the cancellation, and the price at which the NFT was listed."
					}
				},
				"getAllListedNfts()": {
					"details": "Retrieves all NFTs currently listed in the marketplace, both for direct sale and auction.",
					"returns": {
						"_0": "ListedNftTokenId[] An array of `ListedNftTokenId` structs containing details of NFTs listed for direct sale.",
						"_1": "ListTokenId[] An array of `ListTokenId` structs containing details of NFTs listed for auction. Operation: 1. Initializes two arrays to hold details of NFTs listed for sale and auction, respectively. 2. Iterates over each listing and auction, adding their details to the respective arrays. 3. Returns the two arrays, one for direct sale listings and the other for auctions."
					}
				},
				"getBiddingHistory(uint256)": {
					"details": "Retrieves the bidding history for a specific NFT listed in the marketplace. // *",
					"params": {
						"_listCount": "The index of the NFT in the `auctionListCount` mapping, identifying which NFT's bidding history to return."
					},
					"returns": {
						"_0": "userDetail[] An array of `userDetail` structs, each containing details of a user's bid on the NFT. // * // * Operation: // * 1. Initializes an array to hold the bidding history. // * 2. Iterates over each bid made on the NFT and adds it to the `BiddingHistory` array. // * 3. Returns the compiled list of bids as an array of `userDetail` structs. // "
					}
				},
				"getNFTDetail(address,address[])": {
					"details": "Retrieves details of NFTs owned by a specific address across multiple contracts.",
					"params": {
						"_to": "The owner address whose NFTs are being queried.",
						"contractAddresses": "An array of contract addresses to query for NFT ownership."
					},
					"returns": {
						"_0": "MyNft[][] A two-dimensional array where each element represents an array of `MyNft` structs         containing details of NFTs owned by `_to` in the corresponding contract. Operation: 1. Initializes a two-dimensional array to hold NFT details from each contract. 2. Iterates over each contract address, querying for NFTs owned by `_to`. 3. Constructs an array of `MyNft` structs for each contract and fills it with the NFT details. 4. Returns a two-dimensional array containing NFT details for each contract."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"selectUser(uint256,uint256)": {
					"details": "Selects the highest bidder for an NFT auction. This function is called to finalize the bidding process and prepare the NFT for transfer to the winning bidder.",
					"params": {
						"_auctionListCount": "The index of the auction in the `auctionListCount` mapping.",
						"bidCount": "The bid count representing the highest bidder in the auction. Operation: 1. Sets the selected user (highest bidder) for the given auction using the `bidCount` provided."
					}
				},
				"setBuyerFee(uint256)": {
					"details": "Sets the percentage fee charged to buyers in NFT sales. Can only be called by the contract owner.",
					"params": {
						"_setBuyerFee": "The fee percentage to be charged to buyers."
					}
				},
				"setSellerFee(uint256)": {
					"details": "Sets the percentage fee charged to sellers in NFT sales. Can only be called by the contract owner.",
					"params": {
						"_setSellerFee": "The fee percentage to be charged to sellers."
					}
				},
				"setSellerFeeAddress(address)": {
					"details": "Sets the address to receive seller fees from NFT sales. Can only be called by the contract owner.",
					"params": {
						"_address": "The address to which seller fees will be sent."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "Marketplace  for the NFTS",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "Contarct is based on directly purchese or auction ",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/fatcat 5aug (1)/contracts/fatcat 5aug/fatcat_marketplace.sol": "Marketplace"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
			"license": "MIT",
			"urls": [
				"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34",
				"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/token/ERC721/ERC721.sol": {
			"keccak256": "0x23be80beb2b5bce2da52e2e5579137c259f582c1b3819aee7b107113053970e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ffbe7736166b19ecbe033cf1b8bc965e8066aab1060346f4fbad4d85fb8b90e",
				"dweb:/ipfs/QmP2qBJdbSF2rShE4RuMGWhJo9vhXf5NWeswaw1q9tB64r"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
				"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49",
			"license": "MIT",
			"urls": [
				"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22",
				"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed0bfc1b92153c5000e50f4021367b931bbe96372ac6facec3c4961b72053d02",
				"dweb:/ipfs/Qmbwp8VDerjS5SV1quwHH1oMXxPQ93fzfLVqJ2RCqbowGE"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792",
			"license": "MIT",
			"urls": [
				"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453",
				"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc",
				"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT"
			]
		},
		"contracts/fatcat 5aug (1)/contracts/fatcat 5aug/fatcat_marketplace.sol": {
			"keccak256": "0xf5dc88dee06cd41f629e99ac9c718fa7f531a20ade4637fef5200e8bdf2b28c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://bdad564b83675bcbf53bd9b0aef9d245dd53fecfb661002d9e7c41f75f0b22fc",
				"dweb:/ipfs/Qmdf7k8mM3vKgGcqQqhKJW2KpMFkzLeGwc5ykRoJ9xBRiy"
			]
		}
	},
	"version": 1
}